        Hugging Face: https://huggingface.co/
        * Models: https://huggingface.co/models
        * Datasets: https://huggingface.co/datasets
        * Spaces: https://huggingface.co/spaces
          * Community
        * Docs: https://huggingface.co/docs
        * Enterprise: https://huggingface.co/enterprise
        * Pricing: https://huggingface.co/pricing
        * 
        * 
        * Log In: https://huggingface.co/login
        * Sign Up: https://huggingface.co/join

              Transformers documentation

                Trainer

              Transformers

              üè° View all docsAWS Trainium & InferentiaAccelerateArgillaAutoTrainBitsandbytesChat UIDataset viewerDatasetsDeploying on AWSDiffusersDistilabelEvaluateGradioHubHub Python LibraryHuggingface.jsInference Endpoints (dedicated)Inference ProvidersLeRobotLeaderboardsLightevalMicrosoft AzureOptimumPEFTSafetensorsSentence TransformersTRLTasksText Embeddings InferenceText Generation InferenceTokenizersTransformersTransformers.jssmolagentstimm
              Search documentation
              mainv4.53.3v4.52.3v4.51.3v4.50.0v4.49.0v4.48.2v4.47.1v4.46.3v4.45.2v4.44.2v4.43.4v4.42.4v4.41.2v4.40.2v4.39.3v4.38.2v4.37.2v4.36.1v4.35.2v4.34.1v4.33.3v4.32.1v4.31.0v4.30.0v4.29.1v4.28.1v4.27.2v4.26.1v4.25.1v4.24.0v4.23.1v4.22.2v4.21.3v4.20.1v4.19.4v4.18.0v4.17.0v4.16.2v4.15.0v4.14.1v4.13.0v4.12.5v4.11.3v4.10.1v4.9.2v4.8.2v4.7.0v4.6.0v4.5.1v4.4.2v4.3.3v4.2.2v4.1.1v4.0.1v3.5.1v3.4.0v3.3.1v3.2.0v3.1.0v3.0.2v2.11.0v2.10.0v2.9.1v2.8.0v2.7.0v2.6.0v2.5.1v2.4.1v2.3.0v2.2.2v2.1.1v2.0.0v1.2.0v1.1.0v1.0.0doc-builder-htmlARDEENESFRHIITJAKOPTTETRZH
              : https://github.com/huggingface/transformers
              Get started
            Transformers : https://huggingface.co/docs/transformers/v4.53.1/en/index Installation : https://huggingface.co/docs/transformers/v4.53.1/en/installation Quickstart : https://huggingface.co/docs/transformers/v4.53.1/en/quicktour
              Base classes
              Inference
              Training
              Quantization
              Export to production
              Resources
              Contribute
              API
                Main Classes
              Auto Classes : https://huggingface.co/docs/transformers/v4.53.1/en/model_doc/auto Backbones : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/backbones Callbacks : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback Configuration : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/configuration Data Collator : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/data_collator Keras callbacks : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/keras_callbacks Logging : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/logging Models : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model Text Generation : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/text_generation ONNX : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/onnx Optimization : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/optimizer_schedules Model outputs : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/output PEFT : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/peft Pipelines : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/pipelines Processors : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/processors Quantization : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/quantization Tokenizer : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer Trainer : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer DeepSpeed : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/deepspeed ExecuTorch : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/executorch Feature Extractor : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/feature_extractor Image Processor : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/image_processor Video Processor : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/video_processor
                Models
                Internal helpers
                Reference
          You are viewing v4.53.1 version. A newer version v4.53.3: https://huggingface.co/docs/transformers/v4.53.3/main_classes/trainer is available.
              Join the Hugging Face community

            and get access to the augmented documentation experience

                  Collaborate on models, datasets and Spaces
                  Faster examples with accelerated inference
                  Switch between documentation themes
              Sign Up: https://huggingface.co/join

              to get started

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#trainer Trainer

          The Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer class provides an API for feature-complete training in PyTorch, and it supports distributed training on multiple GPUs/TPUs, mixed precision for NVIDIA GPUs: https://nvidia.github.io/apex/ , AMD GPUs: https://rocm.docs.amd.com/en/latest/rocm.html , and torch.amp: https://pytorch.org/docs/stable/amp.html for PyTorch. Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer goes hand-in-hand with the TrainingArguments: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments class, which offers a wide range of options to customize how a model is trained. Together, these two classes provide a complete training API.

          Seq2SeqTrainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer and Seq2SeqTrainingArguments: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments inherit from the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer and TrainingArguments: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments classes and they‚Äôre adapted for training models for sequence-to-sequence tasks such as summarization or translation.

            The Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer class is optimized for ü§ó Transformers models and can have surprising behaviors when used with other models. When using it with your own model, make sure:

              * your model always return tuples or subclasses of ModelOutput: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/output#transformers.utils.ModelOutput
              * your model can compute the loss if a labels argument is provided and that loss is returned as the first element of the tuple (if your model returns tuples)
              * your model can accept multiple label arguments (use label_names in TrainingArguments: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments to indicate their name to the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer ) but none of them should be named "label"

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#api-reference ][ transformers.Trainer Trainer

              class transformers. Trainer

              : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L312

              ( model : typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module, NoneType] = None args : TrainingArguments = None data_collator : typing.Optional[transformers.data.data_collator.DataCollator] = None train_dataset : typing.Union[torch.utils.data.dataset.Dataset, torch.utils.data.dataset.IterableDataset, ForwardRef('datasets.Dataset'), NoneType] = None eval_dataset : typing.Union[torch.utils.data.dataset.Dataset, dict[str, torch.utils.data.dataset.Dataset], ForwardRef('datasets.Dataset'), NoneType] = None processing_class : typing.Union[transformers.tokenization_utils_base.PreTrainedTokenizerBase, transformers.image_processing_utils.BaseImageProcessor, transformers.feature_extraction_utils.FeatureExtractionMixin, transformers.processing_utils.ProcessorMixin, NoneType] = None model_init : typing.Optional[typing.Callable[[], transformers.modeling_utils.PreTrainedModel]] = None compute_loss_func : typing.Optional[typing.Callable] = None compute_metrics : typing.Optional[typing.Callable[[transformers.trainer_utils.EvalPrediction], dict]] = None callbacks : typing.Optional[list[transformers.trainer_callback.TrainerCallback]] = None optimizers : tuple = (None, None) optimizer_cls_and_kwargs : typing.Optional[tuple[type[torch.optim.optimizer.Optimizer], dict[str, typing.Any]]] = None preprocess_logits_for_metrics : typing.Optional[typing.Callable[[torch.Tensor, torch.Tensor], torch.Tensor]] = None )

                  Expand 13 parameters

                Parameters

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.model model (PreTrainedModel: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model#transformers.PreTrainedModel or torch.nn.Module , optional ) ‚Äî The model to train, evaluate or use for predictions. If not provided, a model_init must be passed.

                      Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer is optimized to work with the PreTrainedModel: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model#transformers.PreTrainedModel provided by the library. You can still use your own models defined as torch.nn.Module as long as they work the same way as the ü§ó Transformers models.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.args args (TrainingArguments: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments , optional ) ‚Äî The arguments to tweak for training. Will default to a basic instance of TrainingArguments: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments with the output_dir set to a directory named tmp_trainer in the current directory if not provided.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.data_collator data_collator ( DataCollator , optional ) ‚Äî The function to use to form a batch from a list of elements of train_dataset or eval_dataset . Will default to default_data_collator(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/data_collator#transformers.default_data_collator if no processing_class is provided, an instance of DataCollatorWithPadding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/data_collator#transformers.DataCollatorWithPadding otherwise if the processing_class is a feature extractor or tokenizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.train_dataset train_dataset (Union[ torch.utils.data.Dataset , torch.utils.data.IterableDataset , datasets.Dataset ], optional ) ‚Äî The dataset to use for training. If it is a Dataset: https://huggingface.co/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset , columns not accepted by the model.forward() method are automatically removed.

                    Note that if it‚Äôs a torch.utils.data.IterableDataset with some randomization and you are training in a distributed fashion, your iterable dataset should either use a internal attribute generator that is a torch.Generator for the randomization that must be identical on all processes (and the Trainer will manually set the seed of this generator at each epoch) or have a set_epoch() method that internally sets the seed of the RNGs used.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.eval_dataset eval_dataset (Union[ torch.utils.data.Dataset , dict[str, torch.utils.data.Dataset , datasets.Dataset ]), optional ) ‚Äî The dataset to use for evaluation. If it is a Dataset: https://huggingface.co/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset , columns not accepted by the model.forward() method are automatically removed. If it is a dictionary, it will evaluate on each dataset prepending the dictionary key to the metric name.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.processing_class processing_class ( PreTrainedTokenizerBase or BaseImageProcessor or FeatureExtractionMixin or ProcessorMixin , optional ) ‚Äî Processing class used to process the data. If provided, will be used to automatically process the inputs for the model, and it will be saved along the model to make it easier to rerun an interrupted training or reuse the fine-tuned model. This supersedes the tokenizer argument, which is now deprecated.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.model_init model_init ( Callable[[], PreTrainedModel] , optional ) ‚Äî A function that instantiates the model to be used. If provided, each call to train(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.train will start from a new instance of the model as given by this function.

                    The function may have zero argument, or a single one containing the optuna/Ray Tune/SigOpt trial object, to be able to choose different architectures according to hyper parameters (such as layer count, sizes of inner layers, dropout probabilities etc).

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.compute_loss_func compute_loss_func ( Callable , optional ) ‚Äî A function that accepts the raw model outputs, labels, and the number of items in the entire accumulated batch (batch_size * gradient_accumulation_steps) and returns the loss. For example, see the default loss function: https://github.com/huggingface/transformers/blob/052e652d6d53c2b26ffde87e039b723949a53493/src/transformers/trainer.py#L3618 used by Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.compute_metrics compute_metrics ( Callable[[EvalPrediction], Dict] , optional ) ‚Äî The function that will be used to compute metrics at evaluation. Must take a EvalPrediction: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.EvalPrediction and return a dictionary string to metric values. Note When passing TrainingArgs with batch_eval_metrics set to True , your compute_metrics function must take a boolean compute_result argument. This will be triggered after the last eval batch to signal that the function needs to calculate and return the global summary statistics rather than accumulating the batch-level statistics
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.callbacks callbacks (List of TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback , optional ) ‚Äî A list of callbacks to customize the training loop. Will add those to the list of default callbacks detailed in here: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback .

                    If you want to remove one of the default callbacks used, use the Trainer.remove_callback(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.remove_callback method.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.optimizers optimizers ( tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR] , optional , defaults to (None, None) ) ‚Äî A tuple containing the optimizer and the scheduler to use. Will default to an instance of AdamW on your model and a scheduler given by get_linear_schedule_with_warmup(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/optimizer_schedules#transformers.get_linear_schedule_with_warmup controlled by args .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.optimizer_cls_and_kwargs optimizer_cls_and_kwargs ( tuple[Type[torch.optim.Optimizer], dict[str, Any]] , optional ) ‚Äî A tuple containing the optimizer class and keyword arguments to use. Overrides optim and optim_args in args . Incompatible with the optimizers argument.

                    Unlike optimizers, this argument avoids the need to place model parameters on the correct devices before initializing the Trainer.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.preprocess_logits_for_metrics preprocess_logits_for_metrics ( Callable[[torch.Tensor, torch.Tensor], torch.Tensor] , optional ) ‚Äî A function that preprocess the logits right before caching them at each evaluation step. Must take two tensors, the logits and the labels, and return the logits once processed as desired. The modifications made by this function will be reflected in the predictions received by compute_metrics .

                    Note that the labels (second parameter) will be None if the dataset does not have them.

            Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for ü§ó Transformers.

            Important attributes:

              * model ‚Äî Always points to the core model. If using a transformers model, it will be a PreTrainedModel: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model#transformers.PreTrainedModel subclass.
              * model_wrapped ‚Äî Always points to the most external model in case one or more other modules wrap the original model. This is the model that should be used for the forward pass. For example, under DeepSpeed, the inner model is wrapped in DeepSpeed and then again in torch.nn.DistributedDataParallel. If the inner model hasn‚Äôt been wrapped, then self.model_wrapped is the same as self.model.
              * is_model_parallel ‚Äî Whether or not a model has been switched to a model parallel mode (different from data parallelism, this means some of the model layers are split on different GPUs).
              * place_model_on_device ‚Äî Whether or not to automatically place the model on the device - it will be set to False if model parallel or deepspeed is used, or if the default TrainingArguments.place_model_on_device is overridden to return False .
              * is_in_train ‚Äî Whether or not a model is currently running train (e.g. when evaluate is called while in train)

                add_callback

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.add_callback < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L856

                ( callback )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.add_callback.callback callback ( type or [`~transformers.TrainerCallback]`) ‚Äî A TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback class or an instance of a TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback . In the first case, will instantiate a member of that class.

              Add a callback to the current list of TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback .

                autocast_smart_context_manager

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.autocast_smart_context_manager < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L3701

                ( cache_enabled : typing.Optional[bool] = True )

              A helper wrapper that creates an appropriate context manager for autocast while feeding it the desired arguments, depending on the situation.

                compute_loss

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.compute_loss < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L3801

                ( model : Module inputs : dict return_outputs : bool = False num_items_in_batch : typing.Optional[torch.Tensor] = None )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.compute_loss.model model ( nn.Module ) ‚Äî The model to compute the loss for.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.compute_loss.inputs inputs ( dict[str, Union[torch.Tensor, Any]] ) ‚Äî The input data for the model.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.compute_loss.return_outputs return_outputs ( bool , optional , defaults to False ) ‚Äî Whether to return the model outputs along with the loss.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.compute_loss.num_items_in_batch num_items_in_batch (Optional[torch.Tensor], optional ) ‚Äî The number of items in the batch. If num_items_in_batch is not passed,

              How the loss is computed by Trainer. By default, all models return the loss in the first element.

              Subclass and override for custom behavior. If you are not using num_items_in_batch when computing your loss, make sure to overwrite self.model_accepts_loss_kwargs to False. Otherwise, the loss calculationg might be slightly inacurate when performing gradient accumulation.

                compute_loss_context_manager

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.compute_loss_context_manager < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L3695

                ( )

              A helper wrapper to group together context managers.

                create_model_card

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L4674

                ( language : typing.Optional[str] = None license : typing.Optional[str] = None tags : typing.Union[str, list[str], NoneType] = None model_name : typing.Optional[str] = None finetuned_from : typing.Optional[str] = None tasks : typing.Union[str, list[str], NoneType] = None dataset_tags : typing.Union[str, list[str], NoneType] = None dataset : typing.Union[str, list[str], NoneType] = None dataset_args : typing.Union[str, list[str], NoneType] = None )

                    Expand 9 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card.language language ( str , optional ) ‚Äî The language of the model (if applicable)
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card.license license ( str , optional ) ‚Äî The license of the model. Will default to the license of the pretrained model used, if the original model given to the Trainer comes from a repo on the Hub.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card.tags tags ( str or list[str] , optional ) ‚Äî Some tags to be included in the metadata of the model card.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card.model_name model_name ( str , optional ) ‚Äî The name of the model.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card.finetuned_from finetuned_from ( str , optional ) ‚Äî The name of the model used to fine-tune this one (if applicable). Will default to the name of the repo of the original model given to the Trainer (if it comes from the Hub).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card.tasks tasks ( str or list[str] , optional ) ‚Äî One or several task identifiers, to be included in the metadata of the model card.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card.dataset_tags dataset_tags ( str or list[str] , optional ) ‚Äî One or several dataset tags, to be included in the metadata of the model card.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card.dataset dataset ( str or list[str] , optional ) ‚Äî One or several dataset identifiers, to be included in the metadata of the model card.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card.dataset_args dataset_args ( str or list[str] , optional ) ‚Äî One or several dataset arguments, to be included in the metadata of the model card.

              Creates a draft of a model card using the information available to the Trainer.

                create_optimizer

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_optimizer < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1191

                ( )

              Setup the optimizer.

              We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the Trainer‚Äôs init through optimizers, or subclass and override this method in a subclass.

                create_optimizer_and_scheduler

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1163

                ( num_training_steps : int )

              Setup the optimizer and the learning rate scheduler.

              We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the Trainer‚Äôs init through optimizers, or subclass and override this method (or create_optimizer and/or create_scheduler) in a subclass.

                create_scheduler

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_scheduler < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1730

                ( num_training_steps : int optimizer : Optimizer = None )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_scheduler.num_training_steps num_training_steps (int) ‚Äî The number of training steps to do.

              Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or passed as an argument.

                evaluate

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.evaluate < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L4131

                ( eval_dataset : typing.Union[torch.utils.data.dataset.Dataset, dict[str, torch.utils.data.dataset.Dataset], NoneType] = None ignore_keys : typing.Optional[list[str]] = None metric_key_prefix : str = 'eval' )

                    Expand 3 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.evaluate.eval_dataset eval_dataset (Union[ Dataset , dict[str, Dataset ]), optional ) ‚Äî Pass a dataset if you wish to override self.eval_dataset . If it is a Dataset: https://huggingface.co/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset , columns not accepted by the model.forward() method are automatically removed. If it is a dictionary, it will evaluate on each dataset, prepending the dictionary key to the metric name. Datasets must implement the __len__ method.

                        If you pass a dictionary with names of datasets as keys and datasets as values, evaluate will run separate evaluations on each dataset. This can be useful to monitor how training affects other datasets or simply to get a more fine-grained evaluation. When used with load_best_model_at_end, make sure metric_for_best_model references exactly one of the datasets. If you, for example, pass in {"data1": data1, "data2": data2} for two datasets data1 and data2, you could specify metric_for_best_model="eval_data1_loss" for using the loss on data1 and metric_for_best_model="eval_data2_loss" for the loss on data2.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.evaluate.ignore_keys ignore_keys ( list[str] , optional ) ‚Äî A list of keys in the output of your model (if it is a dictionary) that should be ignored when gathering predictions.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.evaluate.metric_key_prefix metric_key_prefix ( str , optional , defaults to "eval" ) ‚Äî An optional prefix to be used as the metrics key prefix. For example the metrics ‚Äúbleu‚Äù will be named ‚Äúeval_bleu‚Äù if the prefix is ‚Äúeval‚Äù (default)

              Run evaluation and returns metrics.

              The calling script will be responsible for providing a method to compute metrics, as they are task-dependent (pass it to the init compute_metrics argument).

              You can also subclass and override this method to inject custom behavior.

                evaluation_loop

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.evaluation_loop < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L4299

                ( dataloader : DataLoader description : str prediction_loss_only : typing.Optional[bool] = None ignore_keys : typing.Optional[list[str]] = None metric_key_prefix : str = 'eval' )

              Prediction/evaluation loop, shared by Trainer.evaluate() and Trainer.predict().

              Works both with or without labels.

                floating_point_ops

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.floating_point_ops < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L4638

                ( inputs : dict ) ‚Üí int

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.floating_point_ops.inputs inputs ( dict[str, Union[torch.Tensor, Any]] ) ‚Äî The inputs and targets of the model.

                    Returns

                    int

                  The number of floating-point operations.

              For models that inherit from PreTrainedModel: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model#transformers.PreTrainedModel , uses that method to compute the number of floating point operations for every backward + forward pass. If using another model, either implement such a method in the model or subclass and override this method.

                get_batch_samples

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_batch_samples < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L5289

                ( epoch_iterator : Iterator num_batches : int device : device )

              Collects a specified number of batches from the epoch iterator and optionally counts the number of items in the batches to properly scale the loss.

                get_decay_parameter_names

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_decay_parameter_names < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1179

                ( model )

              Get all parameter names that weight decay will be applied to.

              This function filters out parameters in two ways:

               1. By layer type (instances of layers specified in ALL_LAYERNORM_LAYERS)
               2. By parameter name patterns (containing ‚Äòbias‚Äô, or variation of ‚Äònorm‚Äô)

                get_eval_dataloader

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_eval_dataloader < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1106

                ( eval_dataset : typing.Union[str, torch.utils.data.dataset.Dataset, NoneType] = None )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_eval_dataloader.eval_dataset eval_dataset ( str or torch.utils.data.Dataset , optional ) ‚Äî If a str , will use self.eval_dataset[eval_dataset] as the evaluation dataset. If a Dataset , will override self.eval_dataset and must implement __len__ . If it is a Dataset: https://huggingface.co/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset , columns not accepted by the model.forward() method are automatically removed.

              Returns the evaluation ~torch.utils.data.DataLoader.

              Subclass and override this method if you want to inject some custom behavior.

                get_learning_rates

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_learning_rates < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1264

                ( )

              Returns the learning rate of each parameter from self.optimizer.

                get_num_trainable_parameters

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_num_trainable_parameters < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1258

                ( )

              Get the number of trainable parameters.

                get_optimizer_cls_and_kwargs

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_optimizer_cls_and_kwargs < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1288

                ( args : TrainingArguments model : typing.Optional[transformers.modeling_utils.PreTrainedModel] = None )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_optimizer_cls_and_kwargs.args args ( transformers.training_args.TrainingArguments ) ‚Äî The training arguments for the training session.

              Returns the optimizer class and optimizer parameters based on the training arguments.

                get_optimizer_group

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_optimizer_group < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1272

                ( param : typing.Union[str, torch.nn.parameter.Parameter, NoneType] = None )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_optimizer_group.param param ( str or torch.nn.parameter.Parameter , optional ) ‚Äî The parameter for which optimizer group needs to be returned.

              Returns optimizer group for a parameter if given, else returns all optimizer groups for params.

                get_test_dataloader

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_test_dataloader < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1145

                ( test_dataset : Dataset )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_test_dataloader.test_dataset test_dataset ( torch.utils.data.Dataset , optional ) ‚Äî The test dataset to use. If it is a Dataset: https://huggingface.co/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset , columns not accepted by the model.forward() method are automatically removed. It must implement __len__ .

              Returns the test ~torch.utils.data.DataLoader.

              Subclass and override this method if you want to inject some custom behavior.

                get_total_train_batch_size

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_total_train_batch_size < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L2227

                ( args )

              Calculates total batch size (micro_batch grad_accum dp_world_size).

              Note: Only considers DP and TP (dp_world_size = world_size // tp_size).

                get_tp_size

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_tp_size < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L2213

                ( )

              Get the tensor parallel size from either the model or DeepSpeed config.

                get_train_dataloader

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.get_train_dataloader < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1041

                ( )

              Returns the training ~torch.utils.data.DataLoader.

              Will use no sampler if train_dataset does not implement __len__, a random sampler (adapted to distributed training if necessary) otherwise.

              Subclass and override this method if you want to inject some custom behavior.

                hyperparameter_search

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.hyperparameter_search < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L3554

                ( hp_space : typing.Optional[typing.Callable[[ForwardRef('optuna.Trial')], dict[str, float]]] = None compute_objective : typing.Optional[typing.Callable[[dict[str, float]], float]] = None n_trials : int = 20 direction : typing.Union[str, list[str]] = 'minimize' backend : typing.Union[ForwardRef('str'), transformers.trainer_utils.HPSearchBackend, NoneType] = None hp_name : typing.Optional[typing.Callable[[ForwardRef('optuna.Trial')], str]] = None **kwargs ) ‚Üí [ trainer_utils.BestRun or list[trainer_utils.BestRun] ]

                    Expand 7 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.hyperparameter_search.hp_space hp_space ( Callable[["optuna.Trial"], dict[str, float]] , optional ) ‚Äî A function that defines the hyperparameter search space. Will default to default_hp_space_optuna() or default_hp_space_ray() or default_hp_space_sigopt() depending on your backend.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.hyperparameter_search.compute_objective compute_objective ( Callable[[dict[str, float]], float] , optional ) ‚Äî A function computing the objective to minimize or maximize from the metrics returned by the evaluate method. Will default to default_compute_objective() .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.hyperparameter_search.n_trials n_trials ( int , optional , defaults to 100) ‚Äî The number of trial runs to test.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.hyperparameter_search.direction direction ( str or list[str] , optional , defaults to "minimize" ) ‚Äî If it‚Äôs single objective optimization, direction is str , can be "minimize" or "maximize" , you should pick "minimize" when optimizing the validation loss, "maximize" when optimizing one or several metrics. If it‚Äôs multi objectives optimization, direction is list[str] , can be List of "minimize" and "maximize" , you should pick "minimize" when optimizing the validation loss, "maximize" when optimizing one or several metrics.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.hyperparameter_search.backend backend ( str or ~training_utils.HPSearchBackend , optional ) ‚Äî The backend to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt, depending on which one is installed. If all are installed, will default to optuna.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.hyperparameter_search.hp_name hp_name ( Callable[["optuna.Trial"], str]] , optional ) ‚Äî A function that defines the trial/run name. Will default to None.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.hyperparameter_search.kwargs kwargs ( dict[str, Any] , optional ) ‚Äî Additional keyword arguments for each backend:

                        + optuna: parameters from optuna.study.create_study: https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html and also the parameters timeout, n_jobs and gc_after_trial from optuna.study.Study.optimize: https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.Study.html#optuna.study.Study.optimize
                        + ray: parameters from tune.run: https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run . If resources_per_trial is not set in the kwargs, it defaults to 1 CPU core and 1 GPU (if available). If progress_reporter is not set in the kwargs, ray.tune.CLIReporter: https://docs.ray.io/en/latest/tune/api/doc/ray.tune.CLIReporter.html is used.
                        + sigopt: the parameter proxies from sigopt.Connection.set_proxies: https://docs.sigopt.com/support/faq#how-do-i-use-sigopt-with-a-proxy .

                    Returns

                    [trainer_utils.BestRun or list[trainer_utils.BestRun]]

                  All the information about the best run or best runs for multi-objective optimization. Experiment summary can be found in run_summary attribute for Ray backend.

              Launch an hyperparameter search using optuna or Ray Tune or SigOpt. The optimized quantity is determined by compute_objective, which defaults to a function returning the evaluation loss when no metric is provided, the sum of all metrics otherwise.

                To use this method, you need to have provided a model_init when initializing your Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer : we need to reinitialize the model at each new run. This is incompatible with the optimizers argument, so you need to subclass Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer and override the method create_optimizer_and_scheduler(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler for custom optimizer/scheduler.

                init_hf_repo

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.init_hf_repo < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L4656

                ( token : typing.Optional[str] = None )

              Initializes a git repo in self.args.hub_model_id.

                is_local_process_zero

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.is_local_process_zero < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L3873

                ( )

              Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several machines) main process.

                is_world_process_zero

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.is_world_process_zero < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L3880

                ( )

              Whether or not this process is the global main process (when training in a distributed fashion on several machines, this is only going to be True for one process).

                log

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.log < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L3638

                ( logs : dict start_time : typing.Optional[float] = None )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.log.logs logs ( dict[str, float] ) ‚Äî The values to log.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.log.start_time start_time ( Optional[float] ) ‚Äî The start of training.

              Log logs on the various objects watching training.

              Subclass and override this method to inject custom behavior.

                log_metrics

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.log_metrics < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer_pt_utils.py#L966

                ( split metrics )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.log_metrics.split split ( str ) ‚Äî Mode/split name: one of train , eval , test
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.log_metrics.metrics metrics ( dict[str, float] ) ‚Äî The metrics returned from train/evaluate/predictmetrics: metrics dict

              Log metrics in a specially formatted way.

              Under distributed environment this is done only for a process with rank 0.

              Notes on memory reports:

              In order to get memory usage report you need to install psutil. You can do that with pip install psutil.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.log_metrics.example

                Now when this method is run, you will see a report that will include:

                      Copied
                  init_mem_cpu_alloc_delta   =     1301MB
                  init_mem_cpu_peaked_delta  =      154MB
                  init_mem_gpu_alloc_delta   =      230MB
                  init_mem_gpu_peaked_delta  =        0MB
                  train_mem_cpu_alloc_delta  =     1345MB
                  train_mem_cpu_peaked_delta =        0MB
                  train_mem_gpu_alloc_delta  =      693MB
                  train_mem_gpu_peaked_delta =        7MB

              Understanding the reports:

                * the first segment, e.g., train__, tells you which stage the metrics are for. Reports starting with init_ will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the __init__ will be reported along with the eval_ metrics.
                * the third segment, is either cpu or gpu, tells you whether it‚Äôs the general RAM or the gpu0 memory metric.
                * *_alloc_delta - is the difference in the used/allocated memory counter between the end and the start of the stage - it can be negative if a function released more memory than it allocated.
                * *_peaked_delta - is any extra memory that was consumed and then freed - relative to the current allocated memory counter - it is never negative. When you look at the metrics of any stage you add up alloc_delta + peaked_delta and you know how much memory was needed to complete that stage.

              The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more memory than the rest since it stores the gradient and optimizer states for all participating GPUs. Perhaps in the future these reports will evolve to measure those too.

              The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the memory shared with other processes. It is important to note that it does not include swapped out memory, so the reports could be imprecise.

              The CPU peak memory is measured using a sampling thread. Due to python‚Äôs GIL it may miss some of the peak memory if that thread didn‚Äôt get a chance to run when the highest memory was used. Therefore this report can be less than reality. Using tracemalloc would have reported the exact peak memory, but it doesn‚Äôt report memory allocations outside of python. So if some C++ CUDA extension allocated its own memory it won‚Äôt be reported. And therefore it was dropped in favor of the memory sampling approach, which reads the current process memory usage.

              The GPU allocated and peak memory reporting is done with torch.cuda.memory_allocated() and torch.cuda.max_memory_allocated(). This metric reports only ‚Äúdeltas‚Äù for pytorch-specific allocations, as torch.cuda memory management system doesn‚Äôt track any memory allocated outside of pytorch. For example, the very first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.

              Note that this tracker doesn‚Äôt account for memory allocations outside of Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer ‚Äôs __init__, train, evaluate and predict calls.

              Because evaluation calls may happen during train, we can‚Äôt handle nested invocations because torch.cuda.max_memory_allocated is a single counter, so if it gets reset by a nested eval call, train‚Äôs tracker will report incorrect info. If this pytorch issue: https://github.com/pytorch/pytorch/issues/16266 gets resolved it will be possible to change this class to be re-entrant. Until then we will only track the outer level of train, evaluate and predict methods. Which means that if eval is called during train, it‚Äôs the latter that will account for its memory usage and that of the former.

              This also means that if any other tool that is used along the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer calls torch.cuda.reset_peak_memory_stats, the gpu peak memory stats could be invalid. And the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer will disrupt the normal behavior of any such tools that rely on calling torch.cuda.reset_peak_memory_stats themselves.

              For best performance you may want to consider turning the memory profiling off for production runs.

                metrics_format

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.metrics_format < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer_pt_utils.py#L940

                ( metrics : dict ) ‚Üí metrics ( dict[str, float] )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.metrics_format.metrics metrics ( dict[str, float] ) ‚Äî The metrics returned from train/evaluate/predict

                    Returns

                    metrics (dict[str, float])

                  The reformatted metrics

              Reformat Trainer metrics values to a human-readable format.

                num_examples

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.num_examples < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1749

                ( dataloader : DataLoader )

              Helper to get number of samples in a ~torch.utils.data.DataLoader by accessing its dataset. When dataloader.dataset does not exist or has no length, estimates as best it can

                num_tokens

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.num_tokens < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L1763

                ( train_dl : DataLoader max_steps : typing.Optional[int] = None )

              Helper to get number of tokens in a ~torch.utils.data.DataLoader by enumerating dataloader.

                pop_callback

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.pop_callback < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L867

                ( callback ) ‚Üí TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.pop_callback.callback callback ( type or [`~transformers.TrainerCallback]`) ‚Äî A TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback class or an instance of a TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback . In the first case, will pop the first member of that class found in the list of callbacks.

                    Returns

                    TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback

                  The callback removed, if found.

              Remove a callback from the current list of TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback and returns it.

              If the callback is not found, returns None (and no error is raised).

                predict

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.predict < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L4235

                ( test_dataset : Dataset ignore_keys : typing.Optional[list[str]] = None metric_key_prefix : str = 'test' )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.predict.test_dataset test_dataset ( Dataset ) ‚Äî Dataset to run the predictions on. If it is an datasets.Dataset , columns not accepted by the model.forward() method are automatically removed. Has to implement the method __len__
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.predict.ignore_keys ignore_keys ( list[str] , optional ) ‚Äî A list of keys in the output of your model (if it is a dictionary) that should be ignored when gathering predictions.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.predict.metric_key_prefix metric_key_prefix ( str , optional , defaults to "test" ) ‚Äî An optional prefix to be used as the metrics key prefix. For example the metrics ‚Äúbleu‚Äù will be named ‚Äútest_bleu‚Äù if the prefix is ‚Äútest‚Äù (default)

              Run prediction and returns predictions and potential metrics.

              Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method will also return metrics, like in evaluate().

                If your predictions or labels have different sequence length (for instance because you‚Äôre doing dynamic padding in a token classification task) the predictions will be padded (on the right) to allow for concatenation into one array. The padding index is -100.

              Returns: NamedTuple A namedtuple with the following keys:

                * predictions (np.ndarray): The predictions on test_dataset.
                * label_ids (np.ndarray, optional): The labels (if the dataset contained some).
                * metrics (dict[str, float], optional): The potential dictionary of metrics (if the dataset contained labels).

                prediction_loop

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.prediction_loop < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L4907

                ( dataloader : DataLoader description : str prediction_loss_only : typing.Optional[bool] = None ignore_keys : typing.Optional[list[str]] = None metric_key_prefix : str = 'eval' )

              Prediction/evaluation loop, shared by Trainer.evaluate() and Trainer.predict().

              Works both with or without labels.

                prediction_step

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.prediction_step < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L4533

                ( model : Module inputs : dict prediction_loss_only : bool ignore_keys : typing.Optional[list[str]] = None ) ‚Üí tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.prediction_step.model model ( nn.Module ) ‚Äî The model to evaluate.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.prediction_step.inputs inputs ( dict[str, Union[torch.Tensor, Any]] ) ‚Äî The inputs and targets of the model.

                      The dictionary will be unpacked before being fed to the model. Most models expect the targets under the argument labels. Check your model‚Äôs documentation for all accepted arguments.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.prediction_step.prediction_loss_only prediction_loss_only ( bool ) ‚Äî Whether or not to return the loss only.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.prediction_step.ignore_keys ignore_keys ( list[str] , optional ) ‚Äî A list of keys in the output of your model (if it is a dictionary) that should be ignored when gathering predictions.

                    Returns

                    tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]

                  A tuple with the loss, logits and labels (each being optional).

              Perform an evaluation step on model using inputs.

              Subclass and override to inject custom behavior.

                propagate_args_to_deepspeed

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.propagate_args_to_deepspeed < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L5261

                ( auto_find_batch_size = False )

              Sets values in the deepspeed plugin based on the Trainer args

                push_to_hub

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.push_to_hub < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L4823

                ( commit_message : typing.Optional[str] = 'End of training' blocking : bool = True token : typing.Optional[str] = None revision : typing.Optional[str] = None **kwargs )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.push_to_hub.commit_message commit_message ( str , optional , defaults to "End of training" ) ‚Äî Message to commit while pushing.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.push_to_hub.blocking blocking ( bool , optional , defaults to True ) ‚Äî Whether the function should return only when the git push has finished.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.push_to_hub.token token ( str , optional , defaults to None ) ‚Äî Token with write permission to overwrite Trainer‚Äôs original args.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.push_to_hub.revision revision ( str , optional ) ‚Äî The git revision to commit from. Defaults to the head of the ‚Äúmain‚Äù branch.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.push_to_hub.kwargs kwargs ( dict[str, Any] , optional ) ‚Äî Additional keyword arguments passed along to create_model_card(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.create_model_card .

              Upload self.model and self.processing_class to the ü§ó model hub on the repo self.args.hub_model_id.

                remove_callback

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.remove_callback < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L883

                ( callback )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.remove_callback.callback callback ( type or [`~transformers.TrainerCallback]`) ‚Äî A TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback class or an instance of a TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback . In the first case, will remove the first member of that class found in the list of callbacks.

              Remove a callback from the current list of TrainerCallback: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback#transformers.TrainerCallback .

                save_metrics

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_metrics < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer_pt_utils.py#L1056

                ( split metrics combined = True )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_metrics.split split ( str ) ‚Äî Mode/split name: one of train , eval , test , all
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_metrics.metrics metrics ( dict[str, float] ) ‚Äî The metrics returned from train/evaluate/predict
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_metrics.combined combined ( bool , optional , defaults to True ) ‚Äî Creates combined metrics by updating all_results.json with metrics of this call

              Save metrics into a json file for that split, e.g. train_results.json.

              Under distributed environment this is done only for a process with rank 0.

              To understand the metrics please read the docstring of log_metrics(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.log_metrics . The only difference is that raw unformatted numbers are saved in the current method.

                save_model

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_model < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L3892

                ( output_dir : typing.Optional[str] = None _internal_call : bool = False )

              Will save the model, so you can reload it using from_pretrained().

              Will only save from the main process.

                save_state

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_state < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer_pt_utils.py#L1094

                ( )

              Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model.

              Under distributed environment this is done only for a process with rank 0.

                set_initial_training_values

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.set_initial_training_values < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L5339

                ( args : TrainingArguments dataloader : DataLoader total_train_batch_size : int )

              Calculates and returns the following values:

                * num_train_epochs
                * num_update_steps_per_epoch
                * num_examples
                * num_train_samples
                * epoch_based
                * len_dataloader
                * max_steps

                train

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.train < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L2100

                ( resume_from_checkpoint : typing.Union[str, bool, NoneType] = None trial : typing.Union[ForwardRef('optuna.Trial'), dict[str, typing.Any], NoneType] = None ignore_keys_for_eval : typing.Optional[list[str]] = None **kwargs )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.train.resume_from_checkpoint resume_from_checkpoint ( str or bool , optional ) ‚Äî If a str , local path to a saved checkpoint as saved by a previous instance of Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer . If a bool and equals True , load the last checkpoint in args.output_dir as saved by a previous instance of Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer . If present, training will resume from the model/optimizer/scheduler states loaded here.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.train.trial trial ( optuna.Trial or dict[str, Any] , optional ) ‚Äî The trial run or the hyperparameter dictionary for hyperparameter search.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.train.ignore_keys_for_eval ignore_keys_for_eval ( list[str] , optional ) ‚Äî A list of keys in the output of your model (if it is a dictionary) that should be ignored when gathering predictions for evaluation during the training.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.train.kwargs kwargs ( dict[str, Any] , optional ) ‚Äî Additional keyword arguments used to hide deprecated arguments

              Main training entry point.

                training_step

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.training_step < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer.py#L3716

                ( model : Module inputs : dict num_items_in_batch : typing.Optional[torch.Tensor] = None ) ‚Üí torch.Tensor

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.training_step.model model ( nn.Module ) ‚Äî The model to train.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.training_step.inputs inputs ( dict[str, Union[torch.Tensor, Any]] ) ‚Äî The inputs and targets of the model.

                      The dictionary will be unpacked before being fed to the model. Most models expect the targets under the argument labels. Check your model‚Äôs documentation for all accepted arguments.

                    Returns

                    torch.Tensor

                  The tensor with training loss on this batch.

              Perform a training step on a batch of inputs.

              Subclass and override to inject custom behavior.

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer Seq2SeqTrainer

              class transformers. Seq2SeqTrainer

              : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer_seq2seq.py#L53

              ( model : typing.Union[ForwardRef('PreTrainedModel'), torch.nn.modules.module.Module] = None args : TrainingArguments = None data_collator : typing.Optional[ForwardRef('DataCollator')] = None train_dataset : typing.Union[torch.utils.data.dataset.Dataset, ForwardRef('IterableDataset'), ForwardRef('datasets.Dataset'), NoneType] = None eval_dataset : typing.Union[torch.utils.data.dataset.Dataset, dict[str, torch.utils.data.dataset.Dataset], NoneType] = None processing_class : typing.Union[ForwardRef('PreTrainedTokenizerBase'), ForwardRef('BaseImageProcessor'), ForwardRef('FeatureExtractionMixin'), ForwardRef('ProcessorMixin'), NoneType] = None model_init : typing.Optional[typing.Callable[[], ForwardRef('PreTrainedModel')]] = None compute_loss_func : typing.Optional[typing.Callable] = None compute_metrics : typing.Optional[typing.Callable[[ForwardRef('EvalPrediction')], dict]] = None callbacks : typing.Optional[list['TrainerCallback']] = None optimizers : tuple = (None, None) preprocess_logits_for_metrics : typing.Optional[typing.Callable[[torch.Tensor, torch.Tensor], torch.Tensor]] = None )

                evaluate

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.evaluate < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer_seq2seq.py#L137

                ( eval_dataset : typing.Optional[torch.utils.data.dataset.Dataset] = None ignore_keys : typing.Optional[list[str]] = None metric_key_prefix : str = 'eval' **gen_kwargs )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.evaluate.eval_dataset eval_dataset ( Dataset , optional ) ‚Äî Pass a dataset if you wish to override self.eval_dataset . If it is an Dataset: https://huggingface.co/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset , columns not accepted by the model.forward() method are automatically removed. It must implement the __len__ method.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.evaluate.ignore_keys ignore_keys ( list[str] , optional ) ‚Äî A list of keys in the output of your model (if it is a dictionary) that should be ignored when gathering predictions.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.evaluate.metric_key_prefix metric_key_prefix ( str , optional , defaults to "eval" ) ‚Äî An optional prefix to be used as the metrics key prefix. For example the metrics ‚Äúbleu‚Äù will be named ‚Äúeval_bleu‚Äù if the prefix is "eval" (default)
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.evaluate.max_length max_length ( int , optional ) ‚Äî The maximum target length to use when predicting with the generate method.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.evaluate.num_beams num_beams ( int , optional ) ‚Äî Number of beams for beam search that will be used when predicting with the generate method. 1 means no beam search.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.evaluate.gen_kwargs gen_kwargs ‚Äî Additional generate specific kwargs.

              Run evaluation and returns metrics.

              The calling script will be responsible for providing a method to compute metrics, as they are task-dependent (pass it to the init compute_metrics argument).

              You can also subclass and override this method to inject custom behavior.

                predict

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.predict < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/trainer_seq2seq.py#L193

                ( test_dataset : Dataset ignore_keys : typing.Optional[list[str]] = None metric_key_prefix : str = 'test' **gen_kwargs )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.predict.test_dataset test_dataset ( Dataset ) ‚Äî Dataset to run the predictions on. If it is a Dataset: https://huggingface.co/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset , columns not accepted by the model.forward() method are automatically removed. Has to implement the method __len__
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.predict.ignore_keys ignore_keys ( list[str] , optional ) ‚Äî A list of keys in the output of your model (if it is a dictionary) that should be ignored when gathering predictions.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.predict.metric_key_prefix metric_key_prefix ( str , optional , defaults to "eval" ) ‚Äî An optional prefix to be used as the metrics key prefix. For example the metrics ‚Äúbleu‚Äù will be named ‚Äúeval_bleu‚Äù if the prefix is "eval" (default)
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.predict.max_length max_length ( int , optional ) ‚Äî The maximum target length to use when predicting with the generate method.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.predict.num_beams num_beams ( int , optional ) ‚Äî Number of beams for beam search that will be used when predicting with the generate method. 1 means no beam search.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer.predict.gen_kwargs gen_kwargs ‚Äî Additional generate specific kwargs.

              Run prediction and returns predictions and potential metrics.

              Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method will also return metrics, like in evaluate().

                If your predictions or labels have different sequence lengths (for instance because you‚Äôre doing dynamic padding in a token classification task) the predictions will be padded (on the right) to allow for concatenation into one array. The padding index is -100.

              Returns: NamedTuple A namedtuple with the following keys:

                * predictions (np.ndarray): The predictions on test_dataset.
                * label_ids (np.ndarray, optional): The labels (if the dataset contained some).
                * metrics (dict[str, float], optional): The potential dictionary of metrics (if the dataset contained labels).

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments TrainingArguments

              class transformers. TrainingArguments

              : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L210

              ( output_dir : typing.Optional[str] = None overwrite_output_dir : bool = False do_train : bool = False do_eval : bool = False do_predict : bool = False eval_strategy : typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'no' prediction_loss_only : bool = False per_device_train_batch_size : int = 8 per_device_eval_batch_size : int = 8 per_gpu_train_batch_size : typing.Optional[int] = None per_gpu_eval_batch_size : typing.Optional[int] = None gradient_accumulation_steps : int = 1 eval_accumulation_steps : typing.Optional[int] = None eval_delay : typing.Optional[float] = 0 torch_empty_cache_steps : typing.Optional[int] = None learning_rate : float = 5e-05 weight_decay : float = 0.0 adam_beta1 : float = 0.9 adam_beta2 : float = 0.999 adam_epsilon : float = 1e-08 max_grad_norm : float = 1.0 num_train_epochs : float = 3.0 max_steps : int = -1 lr_scheduler_type : typing.Union[transformers.trainer_utils.SchedulerType, str] = 'linear' lr_scheduler_kwargs : typing.Union[dict[str, typing.Any], str, NoneType] = <factory> warmup_ratio : float = 0.0 warmup_steps : int = 0 log_level : str = 'passive' log_level_replica : str = 'warning' log_on_each_node : bool = True logging_dir : typing.Optional[str] = None logging_strategy : typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps' logging_first_step : bool = False logging_steps : float = 500 logging_nan_inf_filter : bool = True save_strategy : typing.Union[transformers.trainer_utils.SaveStrategy, str] = 'steps' save_steps : float = 500 save_total_limit : typing.Optional[int] = None save_safetensors : typing.Optional[bool] = True save_on_each_node : bool = False save_only_model : bool = False restore_callback_states_from_checkpoint : bool = False no_cuda : bool = False use_cpu : bool = False use_mps_device : bool = False seed : int = 42 data_seed : typing.Optional[int] = None jit_mode_eval : bool = False use_ipex : bool = False bf16 : bool = False fp16 : bool = False fp16_opt_level : str = 'O1' half_precision_backend : str = 'auto' bf16_full_eval : bool = False fp16_full_eval : bool = False tf32 : typing.Optional[bool] = None local_rank : int = -1 ddp_backend : typing.Optional[str] = None tpu_num_cores : typing.Optional[int] = None tpu_metrics_debug : bool = False debug : typing.Union[str, list[transformers.debug_utils.DebugOption]] = '' dataloader_drop_last : bool = False eval_steps : typing.Optional[float] = None dataloader_num_workers : int = 0 dataloader_prefetch_factor : typing.Optional[int] = None past_index : int = -1 run_name : typing.Optional[str] = None disable_tqdm : typing.Optional[bool] = None remove_unused_columns : typing.Optional[bool] = True label_names : typing.Optional[list[str]] = None load_best_model_at_end : typing.Optional[bool] = False metric_for_best_model : typing.Optional[str] = None greater_is_better : typing.Optional[bool] = None ignore_data_skip : bool = False fsdp : typing.Union[list[transformers.trainer_utils.FSDPOption], str, NoneType] = '' fsdp_min_num_params : int = 0 fsdp_config : typing.Union[dict[str, typing.Any], str, NoneType] = None fsdp_transformer_layer_cls_to_wrap : typing.Optional[str] = None accelerator_config : typing.Union[dict, str, NoneType] = None deepspeed : typing.Union[dict, str, NoneType] = None label_smoothing_factor : float = 0.0 optim : typing.Union[transformers.training_args.OptimizerNames, str] = 'adamw_torch' optim_args : typing.Optional[str] = None adafactor : bool = False group_by_length : bool = False length_column_name : typing.Optional[str] = 'length' report_to : typing.Union[NoneType, str, list[str]] = None ddp_find_unused_parameters : typing.Optional[bool] = None ddp_bucket_cap_mb : typing.Optional[int] = None ddp_broadcast_buffers : typing.Optional[bool] = None dataloader_pin_memory : bool = True dataloader_persistent_workers : bool = False skip_memory_metrics : bool = True use_legacy_prediction_loop : bool = False push_to_hub : bool = False resume_from_checkpoint : typing.Optional[str] = None hub_model_id : typing.Optional[str] = None hub_strategy : typing.Union[transformers.trainer_utils.HubStrategy, str] = 'every_save' hub_token : typing.Optional[str] = None hub_private_repo : typing.Optional[bool] = None hub_always_push : bool = False hub_revision : typing.Optional[str] = None gradient_checkpointing : bool = False gradient_checkpointing_kwargs : typing.Union[dict[str, typing.Any], str, NoneType] = None include_inputs_for_metrics : bool = False include_for_metrics : list = <factory> eval_do_concat_batches : bool = True fp16_backend : str = 'auto' push_to_hub_model_id : typing.Optional[str] = None push_to_hub_organization : typing.Optional[str] = None push_to_hub_token : typing.Optional[str] = None mp_parameters : str = '' auto_find_batch_size : bool = False full_determinism : bool = False torchdynamo : typing.Optional[str] = None ray_scope : typing.Optional[str] = 'last' ddp_timeout : int = 1800 torch_compile : bool = False torch_compile_backend : typing.Optional[str] = None torch_compile_mode : typing.Optional[str] = None include_tokens_per_second : typing.Optional[bool] = False include_num_input_tokens_seen : typing.Optional[bool] = False neftune_noise_alpha : typing.Optional[float] = None optim_target_modules : typing.Union[NoneType, str, list[str]] = None batch_eval_metrics : bool = False eval_on_start : bool = False use_liger_kernel : typing.Optional[bool] = False liger_kernel_config : typing.Optional[dict[str, bool]] = None eval_use_gather_object : typing.Optional[bool] = False average_tokens_across_devices : typing.Optional[bool] = False )

                  Expand 118 parameters

                Parameters

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.output_dir output_dir ( str , optional , defaults to "trainer_output" ) ‚Äî The output directory where the model predictions and checkpoints will be written.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.overwrite_output_dir overwrite_output_dir ( bool , optional , defaults to False ) ‚Äî If True , overwrite the content of the output directory. Use this to continue training if output_dir points to a checkpoint directory.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.do_train do_train ( bool , optional , defaults to False ) ‚Äî Whether to run training or not. This argument is not directly used by Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer , it‚Äôs intended to be used by your training/evaluation scripts instead. See the example scripts: https://github.com/huggingface/transformers/tree/main/examples for more details.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.do_eval do_eval ( bool , optional ) ‚Äî Whether to run evaluation on the validation set or not. Will be set to True if eval_strategy is different from "no" . This argument is not directly used by Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer , it‚Äôs intended to be used by your training/evaluation scripts instead. See the example scripts: https://github.com/huggingface/transformers/tree/main/examples for more details.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.do_predict do_predict ( bool , optional , defaults to False ) ‚Äî Whether to run predictions on the test set or not. This argument is not directly used by Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer , it‚Äôs intended to be used by your training/evaluation scripts instead. See the example scripts: https://github.com/huggingface/transformers/tree/main/examples for more details.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.eval_strategy eval_strategy ( str or IntervalStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.IntervalStrategy , optional , defaults to "no" ) ‚Äî The evaluation strategy to adopt during training. Possible values are:

                      + "no": No evaluation is done during training.
                      + "steps": Evaluation is done (and logged) every eval_steps.
                      + "epoch": Evaluation is done at the end of each epoch.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.prediction_loss_only prediction_loss_only ( bool , optional , defaults to False ) ‚Äî When performing evaluation and generating predictions, only returns the loss.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.per_device_train_batch_size per_device_train_batch_size ( int , optional , defaults to 8) ‚Äî The batch size per device accelerator core/CPU for training.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.per_device_eval_batch_size per_device_eval_batch_size ( int , optional , defaults to 8) ‚Äî The batch size per device accelerator core/CPU for evaluation.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.gradient_accumulation_steps gradient_accumulation_steps ( int , optional , defaults to 1) ‚Äî Number of updates steps to accumulate the gradients for, before performing a backward/update pass.

                      When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging, evaluation, save will be conducted every gradient_accumulation_steps * xxx_step training examples.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.eval_accumulation_steps eval_accumulation_steps ( int , optional ) ‚Äî Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If left unset, the whole predictions are accumulated on the device accelerator before being moved to the CPU (faster but requires more memory).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.eval_delay eval_delay ( float , optional ) ‚Äî Number of epochs or steps to wait for before the first evaluation can be performed, depending on the eval_strategy.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.torch_empty_cache_steps torch_empty_cache_steps ( int , optional ) ‚Äî Number of steps to wait before calling torch.<device>.empty_cache() . If left unset or set to None, cache will not be emptied.

                      This can help avoid CUDA out-of-memory errors by lowering peak VRAM usage at a cost of about 10% slower performance: https://github.com/huggingface/transformers/issues/31372 .

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.learning_rate learning_rate ( float , optional , defaults to 5e-5) ‚Äî The initial learning rate for AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.weight_decay weight_decay ( float , optional , defaults to 0) ‚Äî The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.adam_beta1 adam_beta1 ( float , optional , defaults to 0.9) ‚Äî The beta1 hyperparameter for the AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.adam_beta2 adam_beta2 ( float , optional , defaults to 0.999) ‚Äî The beta2 hyperparameter for the AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.adam_epsilon adam_epsilon ( float , optional , defaults to 1e-8) ‚Äî The epsilon hyperparameter for the AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.max_grad_norm max_grad_norm ( float , optional , defaults to 1.0) ‚Äî Maximum gradient norm (for gradient clipping).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.num_train_epochs(float, num_train_epochs(float, optional , defaults to 3.0) ‚Äî Total number of training epochs to perform (if not an integer, will perform the decimal part percents of the last epoch before stopping training).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.max_steps max_steps ( int , optional , defaults to -1) ‚Äî If set to a positive number, the total number of training steps to perform. Overrides num_train_epochs . For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until max_steps is reached.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.lr_scheduler_type lr_scheduler_type ( str or SchedulerType: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/optimizer_schedules#transformers.SchedulerType , optional , defaults to "linear" ) ‚Äî The scheduler type to use. See the documentation of SchedulerType: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/optimizer_schedules#transformers.SchedulerType for all possible values.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.lr_scheduler_kwargs lr_scheduler_kwargs (‚Äòdict‚Äô, optional , defaults to {}) ‚Äî The extra arguments for the lr_scheduler. See the documentation of each scheduler for possible values.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.warmup_ratio warmup_ratio ( float , optional , defaults to 0.0) ‚Äî Ratio of total training steps used for a linear warmup from 0 to learning_rate .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.warmup_steps warmup_steps ( int , optional , defaults to 0) ‚Äî Number of steps used for a linear warmup from 0 to learning_rate . Overrides any effect of warmup_ratio .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.log_level log_level ( str , optional , defaults to passive ) ‚Äî Logger log level to use on the main process. Possible choices are the log levels as strings: ‚Äòdebug‚Äô, ‚Äòinfo‚Äô, ‚Äòwarning‚Äô, ‚Äòerror‚Äô and ‚Äòcritical‚Äô, plus a ‚Äòpassive‚Äô level which doesn‚Äôt set anything and keeps the current log level for the Transformers library (which will be "warning" by default).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.log_level_replica log_level_replica ( str , optional , defaults to "warning" ) ‚Äî Logger log level to use on replicas. Same choices as log_level ‚Äù
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.log_on_each_node log_on_each_node ( bool , optional , defaults to True ) ‚Äî In multinode distributed training, whether to log using log_level once per node, or only on the main node.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.logging_dir logging_dir ( str , optional ) ‚Äî TensorBoard: https://www.tensorflow.org/tensorboard log directory. Will default to *output_dir/runs/ CURRENT_DATETIME_HOSTNAME* .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.logging_strategy logging_strategy ( str or IntervalStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.IntervalStrategy , optional , defaults to "steps" ) ‚Äî The logging strategy to adopt during training. Possible values are:

                      + "no": No logging is done during training.
                      + "epoch": Logging is done at the end of each epoch.
                      + "steps": Logging is done every logging_steps.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.logging_first_step logging_first_step ( bool , optional , defaults to False ) ‚Äî Whether to log the first global_step or not.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.logging_steps logging_steps ( int or float , optional , defaults to 500) ‚Äî Number of update steps between two logs if logging_strategy="steps" . Should be an integer or a float in range [0,1) . If smaller than 1, will be interpreted as ratio of total training steps.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.logging_nan_inf_filter logging_nan_inf_filter ( bool , optional , defaults to True ) ‚Äî Whether to filter nan and inf losses for logging. If set to True the loss of every step that is nan or inf is filtered and the average loss of the current logging window is taken instead.

                      logging_nan_inf_filter only influences the logging of loss values, it does not change the behavior the gradient is computed or applied to the model.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.save_strategy save_strategy ( str or SaveStrategy , optional , defaults to "steps" ) ‚Äî The checkpoint save strategy to adopt during training. Possible values are:

                      + "no": No save is done during training.
                      + "epoch": Save is done at the end of each epoch.
                      + "steps": Save is done every save_steps.
                      + "best": Save is done whenever a new best_metric is achieved.

                    If "epoch" or "steps" is chosen, saving will also be performed at the very end of training, always.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.save_steps save_steps ( int or float , optional , defaults to 500) ‚Äî Number of updates steps before two checkpoint saves if save_strategy="steps" . Should be an integer or a float in range [0,1) . If smaller than 1, will be interpreted as ratio of total training steps.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.save_total_limit save_total_limit ( int , optional ) ‚Äî If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in output_dir . When load_best_model_at_end is enabled, the ‚Äúbest‚Äù checkpoint according to metric_for_best_model will always be retained in addition to the most recent ones. For example, for save_total_limit=5 and load_best_model_at_end , the four last checkpoints will always be retained alongside the best model. When save_total_limit=1 and load_best_model_at_end , it is possible that two checkpoints are saved: the last one and the best one (if they are different).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.save_safetensors save_safetensors ( bool , optional , defaults to True ) ‚Äî Use safetensors: https://huggingface.co/docs/safetensors saving and loading for state dicts instead of default torch.load and torch.save .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.save_on_each_node save_on_each_node ( bool , optional , defaults to False ) ‚Äî When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on the main one.

                    This should not be activated when the different nodes use the same storage as the files will be saved with the same names for each node.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.save_only_model save_only_model ( bool , optional , defaults to False ) ‚Äî When checkpointing, whether to only save the model, or also the optimizer, scheduler & rng state. Note that when this is true, you won‚Äôt be able to resume training from checkpoint. This enables you to save storage by not storing the optimizer, scheduler & rng state. You can only load the model using from_pretrained with this option set to True .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.restore_callback_states_from_checkpoint restore_callback_states_from_checkpoint ( bool , optional , defaults to False ) ‚Äî Whether to restore the callback states from the checkpoint. If True , will override callbacks passed to the Trainer if they exist in the checkpoint.‚Äù
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.use_cpu use_cpu ( bool , optional , defaults to False ) ‚Äî Whether or not to use cpu. If set to False, we will use cuda or mps device if available.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.seed seed ( int , optional , defaults to 42) ‚Äî Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the ~Trainer.model_init function to instantiate the model if it has some randomly initialized parameters.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.data_seed data_seed ( int , optional ) ‚Äî Random seed to be used with data samplers. If not set, random generators for data sampling will use the same seed as seed . This can be used to ensure reproducibility of data sampling, independent of the model seed.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.jit_mode_eval jit_mode_eval ( bool , optional , defaults to False ) ‚Äî Whether or not to use PyTorch jit trace for inference.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.use_ipex use_ipex ( bool , optional , defaults to False ) ‚Äî Use Intel extension for PyTorch when it is available. IPEX installation: https://github.com/intel/intel-extension-for-pytorch .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.bf16 bf16 ( bool , optional , defaults to False ) ‚Äî Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher NVIDIA architecture or Intel XPU or using CPU (use_cpu) or Ascend NPU. This is an experimental API and it may change.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.fp16 fp16 ( bool , optional , defaults to False ) ‚Äî Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.fp16_opt_level fp16_opt_level ( str , optional , defaults to ‚ÄòO1‚Äô) ‚Äî For fp16 training, Apex AMP optimization level selected in [‚ÄòO0‚Äô, ‚ÄòO1‚Äô, ‚ÄòO2‚Äô, and ‚ÄòO3‚Äô]. See details on the Apex documentation: https://nvidia.github.io/apex/amp .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.fp16_backend fp16_backend ( str , optional , defaults to "auto" ) ‚Äî This argument is deprecated. Use half_precision_backend instead.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.half_precision_backend half_precision_backend ( str , optional , defaults to "auto" ) ‚Äî The backend to use for mixed precision training. Must be one of "auto", "apex", "cpu_amp" . "auto" will use CPU/CUDA AMP or APEX depending on the PyTorch version detected, while the other choices will force the requested backend.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.bf16_full_eval bf16_full_eval ( bool , optional , defaults to False ) ‚Äî Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm metric values. This is an experimental API and it may change.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.fp16_full_eval fp16_full_eval ( bool , optional , defaults to False ) ‚Äî Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm metric values.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.tf32 tf32 ( bool , optional ) ‚Äî Whether to enable the TF32 mode, available in Ampere and newer GPU architectures. The default value depends on PyTorch‚Äôs version default of torch.backends.cuda.matmul.allow_tf32 . For more details please refer to the TF32: https://huggingface.co/docs/transformers/perf_train_gpu_one#tf32 documentation. This is an experimental API and it may change.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.local_rank local_rank ( int , optional , defaults to -1) ‚Äî Rank of the process during distributed training.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.ddp_backend ddp_backend ( str , optional ) ‚Äî The backend to use for distributed training. Must be one of "nccl" , "mpi" , "ccl" , "gloo" , "hccl" .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.tpu_num_cores tpu_num_cores ( int , optional ) ‚Äî When training on TPU, the number of TPU cores (automatically passed by launcher script).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.dataloader_drop_last dataloader_drop_last ( bool , optional , defaults to False ) ‚Äî Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size) or not.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.eval_steps eval_steps ( int or float , optional ) ‚Äî Number of update steps between two evaluations if eval_strategy="steps" . Will default to the same value as logging_steps if not set. Should be an integer or a float in range [0,1) . If smaller than 1, will be interpreted as ratio of total training steps.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.dataloader_num_workers dataloader_num_workers ( int , optional , defaults to 0) ‚Äî Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the main process.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.past_index past_index ( int , optional , defaults to -1) ‚Äî Some models like TransformerXL: https://huggingface.co/docs/transformers/v4.53.1/en/model_doc/transformerxl or XLNet: https://huggingface.co/docs/transformers/v4.53.1/en/model_doc/xlnet can make use of the past hidden states for their predictions. If this argument is set to a positive int, the Trainer will use the corresponding output (usually index 2) as the past state and feed it to the model at the next training step under the keyword argument mems .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.run_name run_name ( str , optional , defaults to output_dir ) ‚Äî A descriptor for the run. Typically used for wandb: https://www.wandb.com/ , mlflow: https://www.mlflow.org/ , comet: https://www.comet.com/site and swanlab: https://swanlab.cn logging. If not specified, will be the same as output_dir .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.disable_tqdm disable_tqdm ( bool , optional ) ‚Äî Whether or not to disable the tqdm progress bars and table of metrics produced by ~notebook.NotebookTrainingTracker in Jupyter Notebooks. Will default to True if the logging level is set to warn or lower (default), False otherwise.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.remove_unused_columns remove_unused_columns ( bool , optional , defaults to True ) ‚Äî Whether or not to automatically remove the columns unused by the model forward method.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.label_names label_names ( list[str] , optional ) ‚Äî The list of keys in your dictionary of inputs that correspond to the labels.

                    Will eventually default to the list of argument names accepted by the model that contain the word ‚Äúlabel‚Äù, except if the model used is one of the XxxForQuestionAnswering in which case it will also include the ["start_positions", "end_positions"] keys.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.load_best_model_at_end load_best_model_at_end ( bool , optional , defaults to False ) ‚Äî Whether or not to load the best model found during training at the end of training. When this option is enabled, the best checkpoint will always be saved. See save_total_limit: https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments.save_total_limit for more.

                      When set to True, the parameters save_strategy needs to be the same as eval_strategy, and in the case it is ‚Äústeps‚Äù, save_steps must be a round multiple of eval_steps.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.metric_for_best_model metric_for_best_model ( str , optional ) ‚Äî Use in conjunction with load_best_model_at_end to specify the metric to use to compare two different models. Must be the name of a metric returned by the evaluation with or without the prefix "eval_" .

                    If not specified, this will default to "loss" when either load_best_model_at_end == True or lr_scheduler_type == SchedulerType.REDUCE_ON_PLATEAU (to use the evaluation loss).

                    If you set this value, greater_is_better will default to True unless the name ends with ‚Äúloss‚Äù. Don‚Äôt forget to set it to False if your metric is better when lower.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.greater_is_better greater_is_better ( bool , optional ) ‚Äî Use in conjunction with load_best_model_at_end and metric_for_best_model to specify if better models should have a greater metric or not. Will default to:

                      + True if metric_for_best_model is set to a value that doesn‚Äôt end in "loss".
                      + False if metric_for_best_model is not set, or set to a value that ends in "loss".
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.ignore_data_skip ignore_data_skip ( bool , optional , defaults to False ) ‚Äî When resuming training, whether or not to skip the epochs and batches to get the data loading at the same stage as in the previous training. If set to True , the training will begin faster (as that skipping step can take a long time) but will not yield the same results as the interrupted training would have.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.fsdp fsdp ( bool , str or list of FSDPOption , optional , defaults to '' ) ‚Äî Use PyTorch Distributed Parallel Training (in distributed training only).

                    A list of options along the following:

                      + "full_shard": Shard parameters, gradients and optimizer states.
                      + "shard_grad_op": Shard optimizer states and gradients.
                      + "hybrid_shard": Apply FULL_SHARD within a node, and replicate parameters across nodes.
                      + "hybrid_shard_zero2": Apply SHARD_GRAD_OP within a node, and replicate parameters across nodes.
                      + "offload": Offload parameters and gradients to CPUs (only compatible with "full_shard" and "shard_grad_op").
                      + "auto_wrap": Automatically recursively wrap layers with FSDP using default_auto_wrap_policy.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.fsdp_config fsdp_config ( str or dict , optional ) ‚Äî Config to be used with fsdp (Pytorch Distributed Parallel Training). The value is either a location of fsdp json config file (e.g., fsdp_config.json ) or an already loaded json file as dict .

                    A List of config and its options:

                      + min_num_params (int, optional, defaults to 0): FSDP‚Äôs minimum number of parameters for Default Auto Wrapping. (useful only when fsdp field is passed).

                      + transformer_layer_cls_to_wrap (list[str], optional): List of transformer layer class names (case-sensitive) to wrap, e.g, BertLayer, GPTJBlock, T5Block ‚Ä¶ (useful only when fsdp flag is passed).

                      + backward_prefetch (str, optional) FSDP‚Äôs backward prefetch mode. Controls when to prefetch next set of parameters (useful only when fsdp field is passed).

                        A list of options along the following:

                          o "backward_pre" : Prefetches the next set of parameters before the current set of parameter‚Äôs gradient computation.
                          o "backward_post" : This prefetches the next set of parameters after the current set of parameter‚Äôs gradient computation.

                      + forward_prefetch (bool, optional, defaults to False) FSDP‚Äôs forward prefetch mode (useful only when fsdp field is passed). If "True", then FSDP explicitly prefetches the next upcoming all-gather while executing in the forward pass.

                      + limit_all_gathers (bool, optional, defaults to False) FSDP‚Äôs limit_all_gathers (useful only when fsdp field is passed). If "True", FSDP explicitly synchronizes the CPU thread to prevent too many in-flight all-gathers.

                      + use_orig_params (bool, optional, defaults to True) If "True", allows non-uniform requires_grad during init, which means support for interspersed frozen and trainable parameters. Useful in cases such as parameter-efficient fine-tuning. Please refer this [blog](https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019: https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019

                      + sync_module_states (bool, optional, defaults to True) If "True", each individually wrapped FSDP unit will broadcast module parameters from rank 0 to ensure they are the same across all ranks after initialization

                      + cpu_ram_efficient_loading (bool, optional, defaults to False) If "True", only the first process loads the pretrained model checkpoint while all other processes have empty weights. When this setting as "True", sync_module_states also must to be "True", otherwise all the processes except the main process would have random weights leading to unexpected behaviour during training.

                      + activation_checkpointing (bool, optional, defaults to False): If "True", activation checkpointing is a technique to reduce memory usage by clearing activations of certain layers and recomputing them during a backward pass. Effectively, this trades extra computation time for reduced memory usage.

                      + xla (bool, optional, defaults to False): Whether to use PyTorch/XLA Fully Sharded Data Parallel Training. This is an experimental feature and its API may evolve in the future.

                      + xla_fsdp_settings (dict, optional) The value is a dictionary which stores the XLA FSDP wrapping parameters.

                        For a complete list of options, please see here: https://github.com/pytorch/xla/blob/master/torch_xla/distributed/fsdp/xla_fully_sharded_data_parallel.py .

                      + xla_fsdp_grad_ckpt (bool, optional, defaults to False): Will use gradient checkpointing over each nested XLA FSDP wrapped layer. This setting can only be used when the xla flag is set to true, and an auto wrapping policy is specified through fsdp_min_num_params or fsdp_transformer_layer_cls_to_wrap.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.deepspeed deepspeed ( str or dict , optional ) ‚Äî Use Deepspeed: https://github.com/deepspeedai/DeepSpeed . This is an experimental feature and its API may evolve in the future. The value is either the location of DeepSpeed json config file (e.g., ds_config.json ) or an already loaded json file as a dict ‚Äù

                      If enabling any Zero-init, make sure that your model is not initialized until *after* initializing the `TrainingArguments`, else it will not be applied.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.accelerator_config accelerator_config ( str , dict , or AcceleratorConfig , optional ) ‚Äî Config to be used with the internal Accelerator implementation. The value is either a location of accelerator json config file (e.g., accelerator_config.json ), an already loaded json file as dict , or an instance of AcceleratorConfig .

                    A list of config and its options:

                      + split_batches (bool, optional, defaults to False): Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If True the actual batch size used will be the same on any kind of distributed processes, but it must be a round multiple of the num_processes you are using. If False, actual batch size used will be the one set in your script multiplied by the number of processes.
                      + dispatch_batches (bool, optional): If set to True, the dataloader prepared by the Accelerator is only iterated through on the main process and then the batches are split and broadcast to each process. Will default to True for DataLoader whose underlying dataset is an IterableDataset, False otherwise.
                      + even_batches (bool, optional, defaults to True): If set to True, in cases where the total batch size across all processes does not exactly divide the dataset, samples at the start of the dataset will be duplicated so the batch can be divided equally among all workers.
                      + use_seedable_sampler (bool, optional, defaults to True): Whether or not use a fully seedable random sampler (accelerate.data_loader.SeedableRandomSampler). Ensures training results are fully reproducible using a different sampling technique. While seed-to-seed results may differ, on average the differences are negligible when using multiple different seeds to compare. Should also be ran with ~utils.set_seed for the best results.
                      + use_configured_state (bool, optional, defaults to False): Whether or not to use a pre-configured AcceleratorState or PartialState defined before calling TrainingArguments. If True, an Accelerator or PartialState must be initialized. Note that by doing so, this could lead to issues with hyperparameter tuning.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.label_smoothing_factor label_smoothing_factor ( float , optional , defaults to 0.0) ‚Äî The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded labels are changed from 0s and 1s to label_smoothing_factor/num_labels and 1 - label_smoothing_factor + label_smoothing_factor/num_labels respectively.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.debug debug ( str or list of DebugOption , optional , defaults to "" ) ‚Äî Enable one or more debug features. This is an experimental feature.

                    Possible options are:

                      + "underflow_overflow": detects overflow in model‚Äôs input/outputs and reports the last frames that led to the event
                      + "tpu_metrics_debug": print debug metrics on TPU

                    The options should be separated by whitespaces.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.optim optim ( str or training_args.OptimizerNames , optional , defaults to "adamw_torch" ) ‚Äî The optimizer to use, such as ‚Äúadamw_torch‚Äù, ‚Äúadamw_torch_fused‚Äù, ‚Äúadamw_apex_fused‚Äù, ‚Äúadamw_anyprecision‚Äù, ‚Äúadafactor‚Äù. See OptimizerNames in training_args.py: https://github.com/huggingface/transformers/blob/main/src/transformers/training_args.py for a full list of optimizers.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.optim_args optim_args ( str , optional ) ‚Äî Optional arguments that are supplied to optimizers such as AnyPrecisionAdamW, AdEMAMix, and GaLore.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.group_by_length group_by_length ( bool , optional , defaults to False ) ‚Äî Whether or not to group together samples of roughly the same length in the training dataset (to minimize padding applied and be more efficient). Only useful if applying dynamic padding.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.length_column_name length_column_name ( str , optional , defaults to "length" ) ‚Äî Column name for precomputed lengths. If the column exists, grouping by length will use these values rather than computing them on train startup. Ignored unless group_by_length is True and the dataset is an instance of Dataset .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.report_to report_to ( str or list[str] , optional , defaults to "all" ) ‚Äî The list of integrations to report the results and logs to. Supported platforms are "azure_ml" , "clearml" , "codecarbon" , "comet_ml" , "dagshub" , "dvclive" , "flyte" , "mlflow" , "neptune" , "swanlab" , "tensorboard" , and "wandb" . Use "all" to report to all integrations installed, "none" for no integrations.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.ddp_find_unused_parameters ddp_find_unused_parameters ( bool , optional ) ‚Äî When using distributed training, the value of the flag find_unused_parameters passed to DistributedDataParallel . Will default to False if gradient checkpointing is used, True otherwise.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.ddp_bucket_cap_mb ddp_bucket_cap_mb ( int , optional ) ‚Äî When using distributed training, the value of the flag bucket_cap_mb passed to DistributedDataParallel .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.ddp_broadcast_buffers ddp_broadcast_buffers ( bool , optional ) ‚Äî When using distributed training, the value of the flag broadcast_buffers passed to DistributedDataParallel . Will default to False if gradient checkpointing is used, True otherwise.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.dataloader_pin_memory dataloader_pin_memory ( bool , optional , defaults to True ) ‚Äî Whether you want to pin memory in data loaders or not. Will default to True .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.dataloader_persistent_workers dataloader_persistent_workers ( bool , optional , defaults to False ) ‚Äî If True, the data loader will not shut down the worker processes after a dataset has been consumed once. This allows to maintain the workers Dataset instances alive. Can potentially speed up training, but will increase RAM usage. Will default to False .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.dataloader_prefetch_factor dataloader_prefetch_factor ( int , optional ) ‚Äî Number of batches loaded in advance by each worker. 2 means there will be a total of 2 * num_workers batches prefetched across all workers.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.skip_memory_metrics skip_memory_metrics ( bool , optional , defaults to True ) ‚Äî Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows down the training and evaluation speed.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.push_to_hub push_to_hub ( bool , optional , defaults to False ) ‚Äî Whether or not to push the model to the Hub every time the model is saved. If this is activated, output_dir will begin a git directory synced with the repo (determined by hub_model_id ) and the content will be pushed each time a save is triggered (depending on your save_strategy ). Calling save_model(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_model will also trigger a push.

                      If output_dir exists, it needs to be a local clone of the repository to which the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer will be pushed.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.resume_from_checkpoint resume_from_checkpoint ( str , optional ) ‚Äî The path to a folder with a valid checkpoint for your model. This argument is not directly used by Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer , it‚Äôs intended to be used by your training/evaluation scripts instead. See the example scripts: https://github.com/huggingface/transformers/tree/main/examples for more details.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.hub_model_id hub_model_id ( str , optional ) ‚Äî The name of the repository to keep in sync with the local output_dir . It can be a simple model ID in which case the model will be pushed in your namespace. Otherwise it should be the whole repository name, for instance "user_name/model" , which allows you to push to an organization you are a member of with "organization_name/model" . Will default to user_name/output_dir_name with output_dir_name being the name of output_dir .

                    Will default to the name of output_dir.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.hub_strategy hub_strategy ( str or HubStrategy , optional , defaults to "every_save" ) ‚Äî Defines the scope of what is pushed to the Hub and when. Possible values are:

                      + "end": push the model, its configuration, the processing class e.g. tokenizer (if passed along to the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer ) and a draft of a model card when the save_model(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_model method is called.
                      + "every_save": push the model, its configuration, the processing class e.g. tokenizer (if passed along to the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer ) and a draft of a model card each time there is a model save. The pushes are asynchronous to not block training, and in case the save are very frequent, a new push is only attempted if the previous one is finished. A last push is made with the final model at the end of training.
                      + "checkpoint": like "every_save" but the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to resume training easily with trainer.train(resume_from_checkpoint="last-checkpoint").
                      + "all_checkpoints": like "checkpoint" but all checkpoints are pushed like they appear in the output folder (so you will get one checkpoint folder per folder in your final repository)
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.hub_token hub_token ( str , optional ) ‚Äî The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with huggingface-cli login .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.hub_private_repo hub_private_repo ( bool , optional ) ‚Äî Whether to make the repo private. If None (default), the repo will be public unless the organization‚Äôs default is private. This value is ignored if the repo already exists.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.hub_always_push hub_always_push ( bool , optional , defaults to False ) ‚Äî Unless this is True , the Trainer will skip pushing a checkpoint when the previous push is not finished.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.hub_revision hub_revision ( str , optional ) ‚Äî The revision to use when pushing to the Hub. Can be a branch name, a tag, or a commit hash.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.gradient_checkpointing gradient_checkpointing ( bool , optional , defaults to False ) ‚Äî If True, use gradient checkpointing to save memory at the expense of slower backward pass.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.gradient_checkpointing_kwargs gradient_checkpointing_kwargs ( dict , optional , defaults to None ) ‚Äî Key word arguments to be passed to the gradient_checkpointing_enable method.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.include_inputs_for_metrics include_inputs_for_metrics ( bool , optional , defaults to False ) ‚Äî This argument is deprecated. Use include_for_metrics instead, e.g, include_for_metrics = ["inputs"] .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.include_for_metrics include_for_metrics ( list[str] , optional , defaults to [] ) ‚Äî Include additional data in the compute_metrics function if needed for metrics computation. Possible options to add to include_for_metrics list:

                      + "inputs": Input data passed to the model, intended for calculating input dependent metrics.
                      + "loss": Loss values computed during evaluation, intended for calculating loss dependent metrics.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.eval_do_concat_batches eval_do_concat_batches ( bool , optional , defaults to True ) ‚Äî Whether to recursively concat inputs/losses/labels/predictions across batches. If False , will instead store them as lists, with each batch kept separate.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.auto_find_batch_size auto_find_batch_size ( bool , optional , defaults to False ) ‚Äî Whether to find a batch size that will fit into memory automatically through exponential decay, avoiding CUDA Out-of-Memory errors. Requires accelerate to be installed ( pip install accelerate )
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.full_determinism full_determinism ( bool , optional , defaults to False ) ‚Äî If True , enable_full_determinism(): https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.enable_full_determinism is called instead of set_seed(): https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.set_seed to ensure reproducible results in distributed training. Important: this will negatively impact the performance, so only use it for debugging.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.torchdynamo torchdynamo ( str , optional ) ‚Äî If set, the backend compiler for TorchDynamo. Possible choices are "eager" , "aot_eager" , "inductor" , "nvfuser" , "aot_nvfuser" , "aot_cudagraphs" , "ofi" , "fx2trt" , "onnxrt" and "ipex" .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.ray_scope ray_scope ( str , optional , defaults to "last" ) ‚Äî The scope to use when doing hyperparameter search with Ray. By default, "last" will be used. Ray will then use the last checkpoint of all trials, compare those, and select the best one. However, other options are also available. See the Ray documentation: https://docs.ray.io/en/latest/tune/api_docs/analysis.html#ray.tune.ExperimentAnalysis.get_best_trial for more options.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.ddp_timeout ddp_timeout ( int , optional , defaults to 1800) ‚Äî The timeout for torch.distributed.init_process_group calls, used to avoid GPU socket timeouts when performing slow operations in distributed runnings. Please refer the [PyTorch documentation] (https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group: https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group ) for more information.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.use_mps_device use_mps_device ( bool , optional , defaults to False ) ‚Äî This argument is deprecated. mps device will be used if it is available similar to cuda device.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.torch_compile torch_compile ( bool , optional , defaults to False ) ‚Äî Whether or not to compile the model using PyTorch 2.0 torch.compile: https://pytorch.org/get-started/pytorch-2.0/ .

                    This will use the best defaults for the torch.compile API: https://pytorch.org/docs/stable/generated/torch.compile.html?highlight=torch+compile#torch.compile . You can customize the defaults with the argument torch_compile_backend and torch_compile_mode but we don‚Äôt guarantee any of them will work as the support is progressively rolled in in PyTorch.

                    This flag and the whole compile API is experimental and subject to change in future releases.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.torch_compile_backend torch_compile_backend ( str , optional ) ‚Äî The backend to use in torch.compile . If set to any value, torch_compile will be set to True .

                    Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.

                    This flag is experimental and subject to change in future releases.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.torch_compile_mode torch_compile_mode ( str , optional ) ‚Äî The mode to use in torch.compile . If set to any value, torch_compile will be set to True .

                    Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.

                    This flag is experimental and subject to change in future releases.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.include_tokens_per_second include_tokens_per_second ( bool , optional ) ‚Äî Whether or not to compute the number of tokens per second per device for training speed metrics.

                    This will iterate over the entire training dataloader once beforehand,

                    and will slow down the entire process.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.include_num_input_tokens_seen include_num_input_tokens_seen ( bool , optional ) ‚Äî Whether or not to track the number of input tokens seen throughout training.

                    May be slower in distributed training as gather operations must be called.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.neftune_noise_alpha neftune_noise_alpha ( Optional[float] ) ‚Äî If not None , this will activate NEFTune noise embeddings. This can drastically improve model performance for instruction fine-tuning. Check out the original paper: https://huggingface.co/papers/2310.05914 and the original code: https://github.com/neelsjain/NEFTune . Support transformers PreTrainedModel and also PeftModel from peft. The original paper used values in the range [5.0, 15.0].
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.optim_target_modules optim_target_modules ( Union[str, list[str]] , optional ) ‚Äî The target modules to optimize, i.e. the module names that you would like to train. Currently used for the GaLore algorithm (https://huggingface.co/papers/2403.03507: https://huggingface.co/papers/2403.03507 ) and APOLLO algorithm (https://huggingface.co/papers/2412.05270: https://huggingface.co/papers/2412.05270 ). See GaLore implementation (https://github.com/jiaweizzhao/GaLore: https://github.com/jiaweizzhao/GaLore ) and APOLLO implementation (https://github.com/zhuhanqing/APOLLO: https://github.com/zhuhanqing/APOLLO ) for more details. You need to make sure to pass a valid GaLore or APOLLO optimizer, e.g., one of: ‚Äúapollo_adamw‚Äù, ‚Äúgalore_adamw‚Äù, ‚Äúgalore_adamw_8bit‚Äù, ‚Äúgalore_adafactor‚Äù and make sure that the target modules are nn.Linear modules only.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.batch_eval_metrics batch_eval_metrics ( Optional[bool] , defaults to False ) ‚Äî If set to True , evaluation will call compute_metrics at the end of each batch to accumulate statistics rather than saving all eval logits in memory. When set to True , you must pass a compute_metrics function that takes a boolean argument compute_result , which when passed True , will trigger the final global summary statistics from the batch-level summary statistics you‚Äôve accumulated over the evaluation set.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.eval_on_start eval_on_start ( bool , optional , defaults to False ) ‚Äî Whether to perform a evaluation step (sanity check) before the training to ensure the validation steps works correctly.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.eval_use_gather_object eval_use_gather_object ( bool , optional , defaults to False ) ‚Äî Whether to run recursively gather object in a nested list/tuple/dictionary of objects from all devices. This should only be enabled if users are not just returning tensors, and this is actively discouraged by PyTorch.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.use_liger_kernel use_liger_kernel ( bool , optional , defaults to False ) ‚Äî Whether enable Liger: https://github.com/linkedin/Liger-Kernel Kernel for LLM model training. It can effectively increase multi-GPU training throughput by ~20% and reduces memory usage by ~60%, works out of the box with flash attention, PyTorch FSDP, and Microsoft DeepSpeed. Currently, it supports llama, mistral, mixtral and gemma models.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.liger_kernel_config liger_kernel_config ( Optional[dict] , optional ) ‚Äî Configuration to be used for Liger Kernel. When use_liger_kernel=True, this dict is passed as keyword arguments to the _apply_liger_kernel_to_instance function, which specifies which kernels to apply. Available options vary by model but typically include: ‚Äòrope‚Äô, ‚Äòswiglu‚Äô, ‚Äòcross_entropy‚Äô, ‚Äòfused_linear_cross_entropy‚Äô, ‚Äòrms_norm‚Äô, etc. If None , use the default kernel configurations.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.average_tokens_across_devices average_tokens_across_devices ( bool , optional , defaults to False ) ‚Äî Whether or not to average tokens across devices. If enabled, will use all_reduce to synchronize num_tokens_in_batch for precise loss calculation. Reference: https://github.com/huggingface/transformers/issues/34242: https://github.com/huggingface/transformers/issues/34242

            TrainingArguments is the subset of the arguments we use in our example scripts which relate to the training loop itself.

            Using HfArgumentParser: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.HfArgumentParser we can turn this class into argparse: https://docs.python.org/3/library/argparse#module-argparse arguments that can be specified on the command line.

                get_process_log_level

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.get_process_log_level < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2426

                ( )

              Returns the log level to be used depending on whether this process is the main process of node 0, main process of node non-0, or a non-main process.

              For the main process the log level defaults to the logging level set (logging.WARNING if you didn‚Äôt do anything) unless overridden by log_level argument.

              For the replica processes the log level defaults to logging.WARNING unless overridden by log_level_replica argument.

              The choice between the main and replica process settings is made according to the return value of should_log.

                get_warmup_steps

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.get_warmup_steps < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2515

                ( num_training_steps : int )

              Get number of steps used for a linear warmup.

                main_process_first

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.main_process_first < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2464

                ( local = True desc = 'work' )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.main_process_first.local local ( bool , optional , defaults to True ) ‚Äî if True first means process of rank 0 of each node if False first means process of rank 0 of node rank 0 In multi-node environment with a shared filesystem you most likely will want to use local=False so that only the main process of the first node will do the processing. If however, the filesystem is not shared, then the main process of each node will need to do the processing, which is the default behavior.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.main_process_first.desc desc ( str , optional , defaults to "work" ) ‚Äî a work description to be used in debug logs

              A context manager for torch distributed environment where on needs to do something on the main process, while blocking replicas, and when it‚Äôs finished releasing the replicas.

              One such use is for datasets‚Äôs map feature which to be efficient should be run once on the main process, which upon completion saves a cached version of results and which then automatically gets loaded by the replicas.

                set_dataloader

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L3053

                ( train_batch_size : int = 8 eval_batch_size : int = 8 drop_last : bool = False num_workers : int = 0 pin_memory : bool = True persistent_workers : bool = False prefetch_factor : typing.Optional[int] = None auto_find_batch_size : bool = False ignore_data_skip : bool = False sampler_seed : typing.Optional[int] = None )

                    Expand 8 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader.drop_last drop_last ( bool , optional , defaults to False ) ‚Äî Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size) or not.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader.num_workers num_workers ( int , optional , defaults to 0) ‚Äî Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the main process.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader.pin_memory pin_memory ( bool , optional , defaults to True ) ‚Äî Whether you want to pin memory in data loaders or not. Will default to True .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader.persistent_workers persistent_workers ( bool , optional , defaults to False ) ‚Äî If True, the data loader will not shut down the worker processes after a dataset has been consumed once. This allows to maintain the workers Dataset instances alive. Can potentially speed up training, but will increase RAM usage. Will default to False .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader.prefetch_factor prefetch_factor ( int , optional ) ‚Äî Number of batches loaded in advance by each worker. 2 means there will be a total of 2 * num_workers batches prefetched across all workers.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader.auto_find_batch_size auto_find_batch_size ( bool , optional , defaults to False ) ‚Äî Whether to find a batch size that will fit into memory automatically through exponential decay, avoiding CUDA Out-of-Memory errors. Requires accelerate to be installed ( pip install accelerate )
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader.ignore_data_skip ignore_data_skip ( bool , optional , defaults to False ) ‚Äî When resuming training, whether or not to skip the epochs and batches to get the data loading at the same stage as in the previous training. If set to True , the training will begin faster (as that skipping step can take a long time) but will not yield the same results as the interrupted training would have.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader.sampler_seed sampler_seed ( int , optional ) ‚Äî Random seed to be used with data samplers. If not set, random generators for data sampling will use the same seed as self.seed . This can be used to ensure reproducibility of data sampling, independent of the model seed.

              A method that regroups all arguments linked to the dataloaders creation.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_dataloader.example

                Example:

                      Copied
                  >>> from transformers import TrainingArguments
                  
                  >>> args = TrainingArguments("working_dir")
                  >>> args = args.set_dataloader(train_batch_size=16, eval_batch_size=64)
                  >>> args.per_device_train_batch_size
                  16

                set_evaluate

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_evaluate < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2658

                ( strategy : typing.Union[str, transformers.trainer_utils.IntervalStrategy] = 'no' steps : int = 500 batch_size : int = 8 accumulation_steps : typing.Optional[int] = None delay : typing.Optional[float] = None loss_only : bool = False jit_mode : bool = False )

                    Expand 7 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_evaluate.strategy strategy ( str or IntervalStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.IntervalStrategy , optional , defaults to "no" ) ‚Äî The evaluation strategy to adopt during training. Possible values are:

                        + "no": No evaluation is done during training.
                        + "steps": Evaluation is done (and logged) every steps.
                        + "epoch": Evaluation is done at the end of each epoch.

                      Setting a strategy different from "no" will set self.do_eval to True.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_evaluate.steps steps ( int , optional , defaults to 500) ‚Äî Number of update steps between two evaluations if strategy="steps" .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_evaluate.batch_size batch_size ( int optional , defaults to 8) ‚Äî The batch size per device (GPU/TPU core/CPU‚Ä¶) used for evaluation.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_evaluate.accumulation_steps accumulation_steps ( int , optional ) ‚Äî Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If left unset, the whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster but requires more memory).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_evaluate.delay delay ( float , optional ) ‚Äî Number of epochs or steps to wait for before the first evaluation can be performed, depending on the eval_strategy.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_evaluate.loss_only loss_only ( bool , optional , defaults to False ) ‚Äî Ignores all outputs except the loss.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_evaluate.jit_mode jit_mode ( bool , optional ) ‚Äî Whether or not to use PyTorch jit trace for inference.

              A method that regroups all arguments linked to evaluation.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_evaluate.example

                Example:

                      Copied
                  >>> from transformers import TrainingArguments
                  
                  >>> args = TrainingArguments("working_dir")
                  >>> args = args.set_evaluate(strategy="steps", steps=100)
                  >>> args.eval_steps
                  100

                set_logging

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2808

                ( strategy : typing.Union[str, transformers.trainer_utils.IntervalStrategy] = 'steps' steps : int = 500 report_to : typing.Union[str, list[str]] = 'none' level : str = 'passive' first_step : bool = False nan_inf_filter : bool = False on_each_node : bool = False replica_level : str = 'passive' )

                    Expand 8 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging.strategy strategy ( str or IntervalStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.IntervalStrategy , optional , defaults to "steps" ) ‚Äî The logging strategy to adopt during training. Possible values are:

                        + "no": No logging is done during training.
                        + "epoch": Logging is done at the end of each epoch.
                        + "steps": Logging is done every logging_steps.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging.steps steps ( int , optional , defaults to 500) ‚Äî Number of update steps between two logs if strategy="steps" .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging.level level ( str , optional , defaults to "passive" ) ‚Äî Logger log level to use on the main process. Possible choices are the log levels as strings: "debug" , "info" , "warning" , "error" and "critical" , plus a "passive" level which doesn‚Äôt set anything and lets the application set the level.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging.report_to report_to ( str or list[str] , optional , defaults to "all" ) ‚Äî The list of integrations to report the results and logs to. Supported platforms are "azure_ml" , "clearml" , "codecarbon" , "comet_ml" , "dagshub" , "dvclive" , "flyte" , "mlflow" , "neptune" , "swanlab" , "tensorboard" , and "wandb" . Use "all" to report to all integrations installed, "none" for no integrations.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging.first_step first_step ( bool , optional , defaults to False ) ‚Äî Whether to log and evaluate the first global_step or not.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging.nan_inf_filter nan_inf_filter ( bool , optional , defaults to True ) ‚Äî Whether to filter nan and inf losses for logging. If set to True the loss of every step that is nan or inf is filtered and the average loss of the current logging window is taken instead.

                        nan_inf_filter only influences the logging of loss values, it does not change the behavior the gradient is computed or applied to the model.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging.on_each_node on_each_node ( bool , optional , defaults to True ) ‚Äî In multinode distributed training, whether to log using log_level once per node, or only on the main node.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging.replica_level replica_level ( str , optional , defaults to "passive" ) ‚Äî Logger log level to use on replicas. Same choices as log_level

              A method that regroups all arguments linked to logging.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_logging.example

                Example:

                      Copied
                  >>> from transformers import TrainingArguments
                  
                  >>> args = TrainingArguments("working_dir")
                  >>> args = args.set_logging(strategy="steps", steps=100)
                  >>> args.logging_steps
                  100

                set_lr_scheduler

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_lr_scheduler < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L3008

                ( name : typing.Union[str, transformers.trainer_utils.SchedulerType] = 'linear' num_epochs : float = 3.0 max_steps : int = -1 warmup_ratio : float = 0 warmup_steps : int = 0 )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_lr_scheduler.name name ( str or SchedulerType: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/optimizer_schedules#transformers.SchedulerType , optional , defaults to "linear" ) ‚Äî The scheduler type to use. See the documentation of SchedulerType: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/optimizer_schedules#transformers.SchedulerType for all possible values.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_lr_scheduler.num_epochs(float, num_epochs(float, optional , defaults to 3.0) ‚Äî Total number of training epochs to perform (if not an integer, will perform the decimal part percents of the last epoch before stopping training).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_lr_scheduler.max_steps max_steps ( int , optional , defaults to -1) ‚Äî If set to a positive number, the total number of training steps to perform. Overrides num_train_epochs . For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until max_steps is reached.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_lr_scheduler.warmup_ratio warmup_ratio ( float , optional , defaults to 0.0) ‚Äî Ratio of total training steps used for a linear warmup from 0 to learning_rate .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_lr_scheduler.warmup_steps warmup_steps ( int , optional , defaults to 0) ‚Äî Number of steps used for a linear warmup from 0 to learning_rate . Overrides any effect of warmup_ratio .

              A method that regroups all arguments linked to the learning rate scheduler and its hyperparameters.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_lr_scheduler.example

                Example:

                      Copied
                  >>> from transformers import TrainingArguments
                  
                  >>> args = TrainingArguments("working_dir")
                  >>> args = args.set_lr_scheduler(name="cosine", warmup_ratio=0.05)
                  >>> args.warmup_ratio
                  0.05

                set_optimizer

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_optimizer < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2957

                ( name : typing.Union[str, transformers.training_args.OptimizerNames] = 'adamw_torch' learning_rate : float = 5e-05 weight_decay : float = 0 beta1 : float = 0.9 beta2 : float = 0.999 epsilon : float = 1e-08 args : typing.Optional[str] = None )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_optimizer.name name ( str or training_args.OptimizerNames , optional , defaults to "adamw_torch" ) ‚Äî The optimizer to use: "adamw_torch" , "adamw_torch_fused" , "adamw_apex_fused" , "adamw_anyprecision" or "adafactor" .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_optimizer.learning_rate learning_rate ( float , optional , defaults to 5e-5) ‚Äî The initial learning rate.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_optimizer.weight_decay weight_decay ( float , optional , defaults to 0) ‚Äî The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_optimizer.beta1 beta1 ( float , optional , defaults to 0.9) ‚Äî The beta1 hyperparameter for the adam optimizer or its variants.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_optimizer.beta2 beta2 ( float , optional , defaults to 0.999) ‚Äî The beta2 hyperparameter for the adam optimizer or its variants.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_optimizer.epsilon epsilon ( float , optional , defaults to 1e-8) ‚Äî The epsilon hyperparameter for the adam optimizer or its variants.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_optimizer.args args ( str , optional ) ‚Äî Optional arguments that are supplied to AnyPrecisionAdamW (only useful when optim="adamw_anyprecision" ).

              A method that regroups all arguments linked to the optimizer and its hyperparameters.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_optimizer.example

                Example:

                      Copied
                  >>> from transformers import TrainingArguments
                  
                  >>> args = TrainingArguments("working_dir")
                  >>> args = args.set_optimizer(name="adamw_torch", beta1=0.8)
                  >>> args.optim
                  'adamw_torch'

                set_push_to_hub

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_push_to_hub < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2883

                ( model_id : str strategy : typing.Union[str, transformers.trainer_utils.HubStrategy] = 'every_save' token : typing.Optional[str] = None private_repo : typing.Optional[bool] = None always_push : bool = False revision : typing.Optional[str] = None )

                    Expand 6 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_push_to_hub.model_id model_id ( str ) ‚Äî The name of the repository to keep in sync with the local output_dir . It can be a simple model ID in which case the model will be pushed in your namespace. Otherwise it should be the whole repository name, for instance "user_name/model" , which allows you to push to an organization you are a member of with "organization_name/model" .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_push_to_hub.strategy strategy ( str or HubStrategy , optional , defaults to "every_save" ) ‚Äî Defines the scope of what is pushed to the Hub and when. Possible values are:

                        + "end": push the model, its configuration, the processing_class e.g. tokenizer (if passed along to the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer ) and a draft of a model card when the save_model(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_model method is called.
                        + "every_save": push the model, its configuration, the processing_class e.g. tokenizer (if passed along to the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer ) and a draft of a model card each time there is a model save. The pushes are asynchronous to not block training, and in case the save are very frequent, a new push is only attempted if the previous one is finished. A last push is made with the final model at the end of training.
                        + "checkpoint": like "every_save" but the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to resume training easily with trainer.train(resume_from_checkpoint="last-checkpoint").
                        + "all_checkpoints": like "checkpoint" but all checkpoints are pushed like they appear in the output folder (so you will get one checkpoint folder per folder in your final repository)
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_push_to_hub.token token ( str , optional ) ‚Äî The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with huggingface-cli login .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_push_to_hub.private_repo private_repo ( bool , optional , defaults to False ) ‚Äî Whether to make the repo private. If None (default), the repo will be public unless the organization‚Äôs default is private. This value is ignored if the repo already exists.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_push_to_hub.always_push always_push ( bool , optional , defaults to False ) ‚Äî Unless this is True , the Trainer will skip pushing a checkpoint when the previous push is not finished.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_push_to_hub.revision revision ( str , optional ) ‚Äî The revision to use when pushing to the Hub. Can be a branch name, a tag, or a commit hash.

              A method that regroups all arguments linked to synchronizing checkpoints with the Hub.

                Calling this method will set self.push_to_hub to True, which means the output_dir will begin a git directory synced with the repo (determined by model_id) and the content will be pushed each time a save is triggered (depending on your self.save_strategy). Calling save_model(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_model will also trigger a push.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_push_to_hub.example

                Example:

                      Copied
                  >>> from transformers import TrainingArguments
                  
                  >>> args = TrainingArguments("working_dir")
                  >>> args = args.set_push_to_hub("me/awesome-model")
                  >>> args.hub_model_id
                  'me/awesome-model'

                set_save

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_save < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2759

                ( strategy : typing.Union[str, transformers.trainer_utils.IntervalStrategy] = 'steps' steps : int = 500 total_limit : typing.Optional[int] = None on_each_node : bool = False )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_save.strategy strategy ( str or IntervalStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.IntervalStrategy , optional , defaults to "steps" ) ‚Äî The checkpoint save strategy to adopt during training. Possible values are:

                        + "no": No save is done during training.
                        + "epoch": Save is done at the end of each epoch.
                        + "steps": Save is done every save_steps.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_save.steps steps ( int , optional , defaults to 500) ‚Äî Number of updates steps before two checkpoint saves if strategy="steps" .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_save.total_limit total_limit ( int , optional ) ‚Äî If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in output_dir .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_save.on_each_node on_each_node ( bool , optional , defaults to False ) ‚Äî When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on the main one.

                      This should not be activated when the different nodes use the same storage as the files will be saved with the same names for each node.

              A method that regroups all arguments linked to checkpoint saving.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_save.example

                Example:

                      Copied
                  >>> from transformers import TrainingArguments
                  
                  >>> args = TrainingArguments("working_dir")
                  >>> args = args.set_save(strategy="steps", steps=100)
                  >>> args.save_steps
                  100

                set_testing

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_testing < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2719

                ( batch_size : int = 8 loss_only : bool = False jit_mode : bool = False )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_testing.batch_size batch_size ( int optional , defaults to 8) ‚Äî The batch size per device (GPU/TPU core/CPU‚Ä¶) used for testing.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_testing.loss_only loss_only ( bool , optional , defaults to False ) ‚Äî Ignores all outputs except the loss.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_testing.jit_mode jit_mode ( bool , optional ) ‚Äî Whether or not to use PyTorch jit trace for inference.

              A method that regroups all basic arguments linked to testing on a held-out dataset.

                Calling this method will automatically set self.do_predict to True.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_testing.example

                Example:

                      Copied
                  >>> from transformers import TrainingArguments
                  
                  >>> args = TrainingArguments("working_dir")
                  >>> args = args.set_testing(batch_size=32)
                  >>> args.per_device_eval_batch_size
                  32

                set_training

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2583

                ( learning_rate : float = 5e-05 batch_size : int = 8 weight_decay : float = 0 num_epochs : float = 3 max_steps : int = -1 gradient_accumulation_steps : int = 1 seed : int = 42 gradient_checkpointing : bool = False )

                    Expand 8 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training.learning_rate learning_rate ( float , optional , defaults to 5e-5) ‚Äî The initial learning rate for the optimizer.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training.batch_size batch_size ( int optional , defaults to 8) ‚Äî The batch size per device (GPU/TPU core/CPU‚Ä¶) used for training.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training.weight_decay weight_decay ( float , optional , defaults to 0) ‚Äî The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in the optimizer.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training.num_train_epochs(float, num_train_epochs(float, optional , defaults to 3.0) ‚Äî Total number of training epochs to perform (if not an integer, will perform the decimal part percents of the last epoch before stopping training).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training.max_steps max_steps ( int , optional , defaults to -1) ‚Äî If set to a positive number, the total number of training steps to perform. Overrides num_train_epochs . For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until max_steps is reached.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training.gradient_accumulation_steps gradient_accumulation_steps ( int , optional , defaults to 1) ‚Äî Number of updates steps to accumulate the gradients for, before performing a backward/update pass.

                        When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging, evaluation, save will be conducted every gradient_accumulation_steps * xxx_step training examples.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training.seed seed ( int , optional , defaults to 42) ‚Äî Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the ~Trainer.model_init function to instantiate the model if it has some randomly initialized parameters.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training.gradient_checkpointing gradient_checkpointing ( bool , optional , defaults to False ) ‚Äî If True, use gradient checkpointing to save memory at the expense of slower backward pass.

              A method that regroups all basic arguments linked to the training.

                Calling this method will automatically set self.do_train to True.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.set_training.example

                Example:

                      Copied
                  >>> from transformers import TrainingArguments
                  
                  >>> args = TrainingArguments("working_dir")
                  >>> args = args.set_training(learning_rate=1e-4, batch_size=32)
                  >>> args.learning_rate
                  1e-4

                to_dict

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.to_dict < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2536

                ( )

              Serializes this instance while replace Enum by their values (for JSON serialization support). It obfuscates the token values by removing their value.

                to_json_string

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.to_json_string < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2563

                ( )

              Serializes this instance to a JSON string.

                to_sanitized_dict

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments.to_sanitized_dict < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args.py#L2569

                ( )

              Sanitized serialization to use with TensorBoard‚Äôs hparams

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments Seq2SeqTrainingArguments

              class transformers. Seq2SeqTrainingArguments

              : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args_seq2seq.py#L28

              ( output_dir : typing.Optional[str] = None overwrite_output_dir : bool = False do_train : bool = False do_eval : bool = False do_predict : bool = False eval_strategy : typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'no' prediction_loss_only : bool = False per_device_train_batch_size : int = 8 per_device_eval_batch_size : int = 8 per_gpu_train_batch_size : typing.Optional[int] = None per_gpu_eval_batch_size : typing.Optional[int] = None gradient_accumulation_steps : int = 1 eval_accumulation_steps : typing.Optional[int] = None eval_delay : typing.Optional[float] = 0 torch_empty_cache_steps : typing.Optional[int] = None learning_rate : float = 5e-05 weight_decay : float = 0.0 adam_beta1 : float = 0.9 adam_beta2 : float = 0.999 adam_epsilon : float = 1e-08 max_grad_norm : float = 1.0 num_train_epochs : float = 3.0 max_steps : int = -1 lr_scheduler_type : typing.Union[transformers.trainer_utils.SchedulerType, str] = 'linear' lr_scheduler_kwargs : typing.Union[dict[str, typing.Any], str, NoneType] = <factory> warmup_ratio : float = 0.0 warmup_steps : int = 0 log_level : str = 'passive' log_level_replica : str = 'warning' log_on_each_node : bool = True logging_dir : typing.Optional[str] = None logging_strategy : typing.Union[transformers.trainer_utils.IntervalStrategy, str] = 'steps' logging_first_step : bool = False logging_steps : float = 500 logging_nan_inf_filter : bool = True save_strategy : typing.Union[transformers.trainer_utils.SaveStrategy, str] = 'steps' save_steps : float = 500 save_total_limit : typing.Optional[int] = None save_safetensors : typing.Optional[bool] = True save_on_each_node : bool = False save_only_model : bool = False restore_callback_states_from_checkpoint : bool = False no_cuda : bool = False use_cpu : bool = False use_mps_device : bool = False seed : int = 42 data_seed : typing.Optional[int] = None jit_mode_eval : bool = False use_ipex : bool = False bf16 : bool = False fp16 : bool = False fp16_opt_level : str = 'O1' half_precision_backend : str = 'auto' bf16_full_eval : bool = False fp16_full_eval : bool = False tf32 : typing.Optional[bool] = None local_rank : int = -1 ddp_backend : typing.Optional[str] = None tpu_num_cores : typing.Optional[int] = None tpu_metrics_debug : bool = False debug : typing.Union[str, list[transformers.debug_utils.DebugOption]] = '' dataloader_drop_last : bool = False eval_steps : typing.Optional[float] = None dataloader_num_workers : int = 0 dataloader_prefetch_factor : typing.Optional[int] = None past_index : int = -1 run_name : typing.Optional[str] = None disable_tqdm : typing.Optional[bool] = None remove_unused_columns : typing.Optional[bool] = True label_names : typing.Optional[list[str]] = None load_best_model_at_end : typing.Optional[bool] = False metric_for_best_model : typing.Optional[str] = None greater_is_better : typing.Optional[bool] = None ignore_data_skip : bool = False fsdp : typing.Union[list[transformers.trainer_utils.FSDPOption], str, NoneType] = '' fsdp_min_num_params : int = 0 fsdp_config : typing.Union[dict[str, typing.Any], str, NoneType] = None fsdp_transformer_layer_cls_to_wrap : typing.Optional[str] = None accelerator_config : typing.Union[dict, str, NoneType] = None deepspeed : typing.Union[dict, str, NoneType] = None label_smoothing_factor : float = 0.0 optim : typing.Union[transformers.training_args.OptimizerNames, str] = 'adamw_torch' optim_args : typing.Optional[str] = None adafactor : bool = False group_by_length : bool = False length_column_name : typing.Optional[str] = 'length' report_to : typing.Union[NoneType, str, list[str]] = None ddp_find_unused_parameters : typing.Optional[bool] = None ddp_bucket_cap_mb : typing.Optional[int] = None ddp_broadcast_buffers : typing.Optional[bool] = None dataloader_pin_memory : bool = True dataloader_persistent_workers : bool = False skip_memory_metrics : bool = True use_legacy_prediction_loop : bool = False push_to_hub : bool = False resume_from_checkpoint : typing.Optional[str] = None hub_model_id : typing.Optional[str] = None hub_strategy : typing.Union[transformers.trainer_utils.HubStrategy, str] = 'every_save' hub_token : typing.Optional[str] = None hub_private_repo : typing.Optional[bool] = None hub_always_push : bool = False hub_revision : typing.Optional[str] = None gradient_checkpointing : bool = False gradient_checkpointing_kwargs : typing.Union[dict[str, typing.Any], str, NoneType] = None include_inputs_for_metrics : bool = False include_for_metrics : list = <factory> eval_do_concat_batches : bool = True fp16_backend : str = 'auto' push_to_hub_model_id : typing.Optional[str] = None push_to_hub_organization : typing.Optional[str] = None push_to_hub_token : typing.Optional[str] = None mp_parameters : str = '' auto_find_batch_size : bool = False full_determinism : bool = False torchdynamo : typing.Optional[str] = None ray_scope : typing.Optional[str] = 'last' ddp_timeout : int = 1800 torch_compile : bool = False torch_compile_backend : typing.Optional[str] = None torch_compile_mode : typing.Optional[str] = None include_tokens_per_second : typing.Optional[bool] = False include_num_input_tokens_seen : typing.Optional[bool] = False neftune_noise_alpha : typing.Optional[float] = None optim_target_modules : typing.Union[NoneType, str, list[str]] = None batch_eval_metrics : bool = False eval_on_start : bool = False use_liger_kernel : typing.Optional[bool] = False liger_kernel_config : typing.Optional[dict[str, bool]] = None eval_use_gather_object : typing.Optional[bool] = False average_tokens_across_devices : typing.Optional[bool] = False sortish_sampler : bool = False predict_with_generate : bool = False generation_max_length : typing.Optional[int] = None generation_num_beams : typing.Optional[int] = None generation_config : typing.Union[str, pathlib.Path, transformers.generation.configuration_utils.GenerationConfig, NoneType] = None )

                  Expand 122 parameters

                Parameters

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.output_dir output_dir ( str , optional , defaults to "trainer_output" ) ‚Äî The output directory where the model predictions and checkpoints will be written.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.overwrite_output_dir overwrite_output_dir ( bool , optional , defaults to False ) ‚Äî If True , overwrite the content of the output directory. Use this to continue training if output_dir points to a checkpoint directory.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.do_train do_train ( bool , optional , defaults to False ) ‚Äî Whether to run training or not. This argument is not directly used by Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer , it‚Äôs intended to be used by your training/evaluation scripts instead. See the example scripts: https://github.com/huggingface/transformers/tree/main/examples for more details.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.do_eval do_eval ( bool , optional ) ‚Äî Whether to run evaluation on the validation set or not. Will be set to True if eval_strategy is different from "no" . This argument is not directly used by Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer , it‚Äôs intended to be used by your training/evaluation scripts instead. See the example scripts: https://github.com/huggingface/transformers/tree/main/examples for more details.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.do_predict do_predict ( bool , optional , defaults to False ) ‚Äî Whether to run predictions on the test set or not. This argument is not directly used by Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer , it‚Äôs intended to be used by your training/evaluation scripts instead. See the example scripts: https://github.com/huggingface/transformers/tree/main/examples for more details.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.eval_strategy eval_strategy ( str or IntervalStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.IntervalStrategy , optional , defaults to "no" ) ‚Äî The evaluation strategy to adopt during training. Possible values are:

                      + "no": No evaluation is done during training.
                      + "steps": Evaluation is done (and logged) every eval_steps.
                      + "epoch": Evaluation is done at the end of each epoch.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.prediction_loss_only prediction_loss_only ( bool , optional , defaults to False ) ‚Äî When performing evaluation and generating predictions, only returns the loss.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.per_device_train_batch_size per_device_train_batch_size ( int , optional , defaults to 8) ‚Äî The batch size per device accelerator core/CPU for training.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.per_device_eval_batch_size per_device_eval_batch_size ( int , optional , defaults to 8) ‚Äî The batch size per device accelerator core/CPU for evaluation.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.gradient_accumulation_steps gradient_accumulation_steps ( int , optional , defaults to 1) ‚Äî Number of updates steps to accumulate the gradients for, before performing a backward/update pass.

                      When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging, evaluation, save will be conducted every gradient_accumulation_steps * xxx_step training examples.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.eval_accumulation_steps eval_accumulation_steps ( int , optional ) ‚Äî Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If left unset, the whole predictions are accumulated on the device accelerator before being moved to the CPU (faster but requires more memory).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.eval_delay eval_delay ( float , optional ) ‚Äî Number of epochs or steps to wait for before the first evaluation can be performed, depending on the eval_strategy.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.torch_empty_cache_steps torch_empty_cache_steps ( int , optional ) ‚Äî Number of steps to wait before calling torch.<device>.empty_cache() . If left unset or set to None, cache will not be emptied.

                      This can help avoid CUDA out-of-memory errors by lowering peak VRAM usage at a cost of about 10% slower performance: https://github.com/huggingface/transformers/issues/31372 .

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.learning_rate learning_rate ( float , optional , defaults to 5e-5) ‚Äî The initial learning rate for AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.weight_decay weight_decay ( float , optional , defaults to 0) ‚Äî The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.adam_beta1 adam_beta1 ( float , optional , defaults to 0.9) ‚Äî The beta1 hyperparameter for the AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.adam_beta2 adam_beta2 ( float , optional , defaults to 0.999) ‚Äî The beta2 hyperparameter for the AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.adam_epsilon adam_epsilon ( float , optional , defaults to 1e-8) ‚Äî The epsilon hyperparameter for the AdamW optimizer.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.max_grad_norm max_grad_norm ( float , optional , defaults to 1.0) ‚Äî Maximum gradient norm (for gradient clipping).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.num_train_epochs(float, num_train_epochs(float, optional , defaults to 3.0) ‚Äî Total number of training epochs to perform (if not an integer, will perform the decimal part percents of the last epoch before stopping training).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.max_steps max_steps ( int , optional , defaults to -1) ‚Äî If set to a positive number, the total number of training steps to perform. Overrides num_train_epochs . For a finite dataset, training is reiterated through the dataset (if all data is exhausted) until max_steps is reached.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.lr_scheduler_type lr_scheduler_type ( str or SchedulerType: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/optimizer_schedules#transformers.SchedulerType , optional , defaults to "linear" ) ‚Äî The scheduler type to use. See the documentation of SchedulerType: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/optimizer_schedules#transformers.SchedulerType for all possible values.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.lr_scheduler_kwargs lr_scheduler_kwargs (‚Äòdict‚Äô, optional , defaults to {}) ‚Äî The extra arguments for the lr_scheduler. See the documentation of each scheduler for possible values.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.warmup_ratio warmup_ratio ( float , optional , defaults to 0.0) ‚Äî Ratio of total training steps used for a linear warmup from 0 to learning_rate .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.warmup_steps warmup_steps ( int , optional , defaults to 0) ‚Äî Number of steps used for a linear warmup from 0 to learning_rate . Overrides any effect of warmup_ratio .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.log_level log_level ( str , optional , defaults to passive ) ‚Äî Logger log level to use on the main process. Possible choices are the log levels as strings: ‚Äòdebug‚Äô, ‚Äòinfo‚Äô, ‚Äòwarning‚Äô, ‚Äòerror‚Äô and ‚Äòcritical‚Äô, plus a ‚Äòpassive‚Äô level which doesn‚Äôt set anything and keeps the current log level for the Transformers library (which will be "warning" by default).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.log_level_replica log_level_replica ( str , optional , defaults to "warning" ) ‚Äî Logger log level to use on replicas. Same choices as log_level ‚Äù
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.log_on_each_node log_on_each_node ( bool , optional , defaults to True ) ‚Äî In multinode distributed training, whether to log using log_level once per node, or only on the main node.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.logging_dir logging_dir ( str , optional ) ‚Äî TensorBoard: https://www.tensorflow.org/tensorboard log directory. Will default to *output_dir/runs/ CURRENT_DATETIME_HOSTNAME* .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.logging_strategy logging_strategy ( str or IntervalStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.IntervalStrategy , optional , defaults to "steps" ) ‚Äî The logging strategy to adopt during training. Possible values are:

                      + "no": No logging is done during training.
                      + "epoch": Logging is done at the end of each epoch.
                      + "steps": Logging is done every logging_steps.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.logging_first_step logging_first_step ( bool , optional , defaults to False ) ‚Äî Whether to log the first global_step or not.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.logging_steps logging_steps ( int or float , optional , defaults to 500) ‚Äî Number of update steps between two logs if logging_strategy="steps" . Should be an integer or a float in range [0,1) . If smaller than 1, will be interpreted as ratio of total training steps.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.logging_nan_inf_filter logging_nan_inf_filter ( bool , optional , defaults to True ) ‚Äî Whether to filter nan and inf losses for logging. If set to True the loss of every step that is nan or inf is filtered and the average loss of the current logging window is taken instead.

                      logging_nan_inf_filter only influences the logging of loss values, it does not change the behavior the gradient is computed or applied to the model.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.save_strategy save_strategy ( str or SaveStrategy , optional , defaults to "steps" ) ‚Äî The checkpoint save strategy to adopt during training. Possible values are:

                      + "no": No save is done during training.
                      + "epoch": Save is done at the end of each epoch.
                      + "steps": Save is done every save_steps.
                      + "best": Save is done whenever a new best_metric is achieved.

                    If "epoch" or "steps" is chosen, saving will also be performed at the very end of training, always.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.save_steps save_steps ( int or float , optional , defaults to 500) ‚Äî Number of updates steps before two checkpoint saves if save_strategy="steps" . Should be an integer or a float in range [0,1) . If smaller than 1, will be interpreted as ratio of total training steps.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.save_total_limit save_total_limit ( int , optional ) ‚Äî If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in output_dir . When load_best_model_at_end is enabled, the ‚Äúbest‚Äù checkpoint according to metric_for_best_model will always be retained in addition to the most recent ones. For example, for save_total_limit=5 and load_best_model_at_end , the four last checkpoints will always be retained alongside the best model. When save_total_limit=1 and load_best_model_at_end , it is possible that two checkpoints are saved: the last one and the best one (if they are different).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.save_safetensors save_safetensors ( bool , optional , defaults to True ) ‚Äî Use safetensors: https://huggingface.co/docs/safetensors saving and loading for state dicts instead of default torch.load and torch.save .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.save_on_each_node save_on_each_node ( bool , optional , defaults to False ) ‚Äî When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on the main one.

                    This should not be activated when the different nodes use the same storage as the files will be saved with the same names for each node.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.save_only_model save_only_model ( bool , optional , defaults to False ) ‚Äî When checkpointing, whether to only save the model, or also the optimizer, scheduler & rng state. Note that when this is true, you won‚Äôt be able to resume training from checkpoint. This enables you to save storage by not storing the optimizer, scheduler & rng state. You can only load the model using from_pretrained with this option set to True .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.restore_callback_states_from_checkpoint restore_callback_states_from_checkpoint ( bool , optional , defaults to False ) ‚Äî Whether to restore the callback states from the checkpoint. If True , will override callbacks passed to the Trainer if they exist in the checkpoint.‚Äù
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.use_cpu use_cpu ( bool , optional , defaults to False ) ‚Äî Whether or not to use cpu. If set to False, we will use cuda or mps device if available.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.seed seed ( int , optional , defaults to 42) ‚Äî Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the ~Trainer.model_init function to instantiate the model if it has some randomly initialized parameters.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.data_seed data_seed ( int , optional ) ‚Äî Random seed to be used with data samplers. If not set, random generators for data sampling will use the same seed as seed . This can be used to ensure reproducibility of data sampling, independent of the model seed.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.jit_mode_eval jit_mode_eval ( bool , optional , defaults to False ) ‚Äî Whether or not to use PyTorch jit trace for inference.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.use_ipex use_ipex ( bool , optional , defaults to False ) ‚Äî Use Intel extension for PyTorch when it is available. IPEX installation: https://github.com/intel/intel-extension-for-pytorch .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.bf16 bf16 ( bool , optional , defaults to False ) ‚Äî Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher NVIDIA architecture or Intel XPU or using CPU (use_cpu) or Ascend NPU. This is an experimental API and it may change.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.fp16 fp16 ( bool , optional , defaults to False ) ‚Äî Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.fp16_opt_level fp16_opt_level ( str , optional , defaults to ‚ÄòO1‚Äô) ‚Äî For fp16 training, Apex AMP optimization level selected in [‚ÄòO0‚Äô, ‚ÄòO1‚Äô, ‚ÄòO2‚Äô, and ‚ÄòO3‚Äô]. See details on the Apex documentation: https://nvidia.github.io/apex/amp .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.fp16_backend fp16_backend ( str , optional , defaults to "auto" ) ‚Äî This argument is deprecated. Use half_precision_backend instead.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.half_precision_backend half_precision_backend ( str , optional , defaults to "auto" ) ‚Äî The backend to use for mixed precision training. Must be one of "auto", "apex", "cpu_amp" . "auto" will use CPU/CUDA AMP or APEX depending on the PyTorch version detected, while the other choices will force the requested backend.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.bf16_full_eval bf16_full_eval ( bool , optional , defaults to False ) ‚Äî Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm metric values. This is an experimental API and it may change.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.fp16_full_eval fp16_full_eval ( bool , optional , defaults to False ) ‚Äî Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm metric values.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.tf32 tf32 ( bool , optional ) ‚Äî Whether to enable the TF32 mode, available in Ampere and newer GPU architectures. The default value depends on PyTorch‚Äôs version default of torch.backends.cuda.matmul.allow_tf32 . For more details please refer to the TF32: https://huggingface.co/docs/transformers/perf_train_gpu_one#tf32 documentation. This is an experimental API and it may change.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.local_rank local_rank ( int , optional , defaults to -1) ‚Äî Rank of the process during distributed training.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.ddp_backend ddp_backend ( str , optional ) ‚Äî The backend to use for distributed training. Must be one of "nccl" , "mpi" , "ccl" , "gloo" , "hccl" .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.tpu_num_cores tpu_num_cores ( int , optional ) ‚Äî When training on TPU, the number of TPU cores (automatically passed by launcher script).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.dataloader_drop_last dataloader_drop_last ( bool , optional , defaults to False ) ‚Äî Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size) or not.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.eval_steps eval_steps ( int or float , optional ) ‚Äî Number of update steps between two evaluations if eval_strategy="steps" . Will default to the same value as logging_steps if not set. Should be an integer or a float in range [0,1) . If smaller than 1, will be interpreted as ratio of total training steps.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.dataloader_num_workers dataloader_num_workers ( int , optional , defaults to 0) ‚Äî Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the main process.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.past_index past_index ( int , optional , defaults to -1) ‚Äî Some models like TransformerXL: https://huggingface.co/docs/transformers/v4.53.1/en/model_doc/transformerxl or XLNet: https://huggingface.co/docs/transformers/v4.53.1/en/model_doc/xlnet can make use of the past hidden states for their predictions. If this argument is set to a positive int, the Trainer will use the corresponding output (usually index 2) as the past state and feed it to the model at the next training step under the keyword argument mems .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.run_name run_name ( str , optional , defaults to output_dir ) ‚Äî A descriptor for the run. Typically used for wandb: https://www.wandb.com/ , mlflow: https://www.mlflow.org/ , comet: https://www.comet.com/site and swanlab: https://swanlab.cn logging. If not specified, will be the same as output_dir .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.disable_tqdm disable_tqdm ( bool , optional ) ‚Äî Whether or not to disable the tqdm progress bars and table of metrics produced by ~notebook.NotebookTrainingTracker in Jupyter Notebooks. Will default to True if the logging level is set to warn or lower (default), False otherwise.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.remove_unused_columns remove_unused_columns ( bool , optional , defaults to True ) ‚Äî Whether or not to automatically remove the columns unused by the model forward method.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.label_names label_names ( list[str] , optional ) ‚Äî The list of keys in your dictionary of inputs that correspond to the labels.

                    Will eventually default to the list of argument names accepted by the model that contain the word ‚Äúlabel‚Äù, except if the model used is one of the XxxForQuestionAnswering in which case it will also include the ["start_positions", "end_positions"] keys.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.load_best_model_at_end load_best_model_at_end ( bool , optional , defaults to False ) ‚Äî Whether or not to load the best model found during training at the end of training. When this option is enabled, the best checkpoint will always be saved. See save_total_limit: https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments.save_total_limit for more.

                      When set to True, the parameters save_strategy needs to be the same as eval_strategy, and in the case it is ‚Äústeps‚Äù, save_steps must be a round multiple of eval_steps.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.metric_for_best_model metric_for_best_model ( str , optional ) ‚Äî Use in conjunction with load_best_model_at_end to specify the metric to use to compare two different models. Must be the name of a metric returned by the evaluation with or without the prefix "eval_" .

                    If not specified, this will default to "loss" when either load_best_model_at_end == True or lr_scheduler_type == SchedulerType.REDUCE_ON_PLATEAU (to use the evaluation loss).

                    If you set this value, greater_is_better will default to True unless the name ends with ‚Äúloss‚Äù. Don‚Äôt forget to set it to False if your metric is better when lower.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.greater_is_better greater_is_better ( bool , optional ) ‚Äî Use in conjunction with load_best_model_at_end and metric_for_best_model to specify if better models should have a greater metric or not. Will default to:

                      + True if metric_for_best_model is set to a value that doesn‚Äôt end in "loss".
                      + False if metric_for_best_model is not set, or set to a value that ends in "loss".
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.ignore_data_skip ignore_data_skip ( bool , optional , defaults to False ) ‚Äî When resuming training, whether or not to skip the epochs and batches to get the data loading at the same stage as in the previous training. If set to True , the training will begin faster (as that skipping step can take a long time) but will not yield the same results as the interrupted training would have.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.fsdp fsdp ( bool , str or list of FSDPOption , optional , defaults to '' ) ‚Äî Use PyTorch Distributed Parallel Training (in distributed training only).

                    A list of options along the following:

                      + "full_shard": Shard parameters, gradients and optimizer states.
                      + "shard_grad_op": Shard optimizer states and gradients.
                      + "hybrid_shard": Apply FULL_SHARD within a node, and replicate parameters across nodes.
                      + "hybrid_shard_zero2": Apply SHARD_GRAD_OP within a node, and replicate parameters across nodes.
                      + "offload": Offload parameters and gradients to CPUs (only compatible with "full_shard" and "shard_grad_op").
                      + "auto_wrap": Automatically recursively wrap layers with FSDP using default_auto_wrap_policy.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.fsdp_config fsdp_config ( str or dict , optional ) ‚Äî Config to be used with fsdp (Pytorch Distributed Parallel Training). The value is either a location of fsdp json config file (e.g., fsdp_config.json ) or an already loaded json file as dict .

                    A List of config and its options:

                      + min_num_params (int, optional, defaults to 0): FSDP‚Äôs minimum number of parameters for Default Auto Wrapping. (useful only when fsdp field is passed).

                      + transformer_layer_cls_to_wrap (list[str], optional): List of transformer layer class names (case-sensitive) to wrap, e.g, BertLayer, GPTJBlock, T5Block ‚Ä¶ (useful only when fsdp flag is passed).

                      + backward_prefetch (str, optional) FSDP‚Äôs backward prefetch mode. Controls when to prefetch next set of parameters (useful only when fsdp field is passed).

                        A list of options along the following:

                          o "backward_pre" : Prefetches the next set of parameters before the current set of parameter‚Äôs gradient computation.
                          o "backward_post" : This prefetches the next set of parameters after the current set of parameter‚Äôs gradient computation.

                      + forward_prefetch (bool, optional, defaults to False) FSDP‚Äôs forward prefetch mode (useful only when fsdp field is passed). If "True", then FSDP explicitly prefetches the next upcoming all-gather while executing in the forward pass.

                      + limit_all_gathers (bool, optional, defaults to False) FSDP‚Äôs limit_all_gathers (useful only when fsdp field is passed). If "True", FSDP explicitly synchronizes the CPU thread to prevent too many in-flight all-gathers.

                      + use_orig_params (bool, optional, defaults to True) If "True", allows non-uniform requires_grad during init, which means support for interspersed frozen and trainable parameters. Useful in cases such as parameter-efficient fine-tuning. Please refer this [blog](https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019: https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019

                      + sync_module_states (bool, optional, defaults to True) If "True", each individually wrapped FSDP unit will broadcast module parameters from rank 0 to ensure they are the same across all ranks after initialization

                      + cpu_ram_efficient_loading (bool, optional, defaults to False) If "True", only the first process loads the pretrained model checkpoint while all other processes have empty weights. When this setting as "True", sync_module_states also must to be "True", otherwise all the processes except the main process would have random weights leading to unexpected behaviour during training.

                      + activation_checkpointing (bool, optional, defaults to False): If "True", activation checkpointing is a technique to reduce memory usage by clearing activations of certain layers and recomputing them during a backward pass. Effectively, this trades extra computation time for reduced memory usage.

                      + xla (bool, optional, defaults to False): Whether to use PyTorch/XLA Fully Sharded Data Parallel Training. This is an experimental feature and its API may evolve in the future.

                      + xla_fsdp_settings (dict, optional) The value is a dictionary which stores the XLA FSDP wrapping parameters.

                        For a complete list of options, please see here: https://github.com/pytorch/xla/blob/master/torch_xla/distributed/fsdp/xla_fully_sharded_data_parallel.py .

                      + xla_fsdp_grad_ckpt (bool, optional, defaults to False): Will use gradient checkpointing over each nested XLA FSDP wrapped layer. This setting can only be used when the xla flag is set to true, and an auto wrapping policy is specified through fsdp_min_num_params or fsdp_transformer_layer_cls_to_wrap.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.deepspeed deepspeed ( str or dict , optional ) ‚Äî Use Deepspeed: https://github.com/deepspeedai/DeepSpeed . This is an experimental feature and its API may evolve in the future. The value is either the location of DeepSpeed json config file (e.g., ds_config.json ) or an already loaded json file as a dict ‚Äù

                      If enabling any Zero-init, make sure that your model is not initialized until *after* initializing the `TrainingArguments`, else it will not be applied.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.accelerator_config accelerator_config ( str , dict , or AcceleratorConfig , optional ) ‚Äî Config to be used with the internal Accelerator implementation. The value is either a location of accelerator json config file (e.g., accelerator_config.json ), an already loaded json file as dict , or an instance of AcceleratorConfig .

                    A list of config and its options:

                      + split_batches (bool, optional, defaults to False): Whether or not the accelerator should split the batches yielded by the dataloaders across the devices. If True the actual batch size used will be the same on any kind of distributed processes, but it must be a round multiple of the num_processes you are using. If False, actual batch size used will be the one set in your script multiplied by the number of processes.
                      + dispatch_batches (bool, optional): If set to True, the dataloader prepared by the Accelerator is only iterated through on the main process and then the batches are split and broadcast to each process. Will default to True for DataLoader whose underlying dataset is an IterableDataset, False otherwise.
                      + even_batches (bool, optional, defaults to True): If set to True, in cases where the total batch size across all processes does not exactly divide the dataset, samples at the start of the dataset will be duplicated so the batch can be divided equally among all workers.
                      + use_seedable_sampler (bool, optional, defaults to True): Whether or not use a fully seedable random sampler (accelerate.data_loader.SeedableRandomSampler). Ensures training results are fully reproducible using a different sampling technique. While seed-to-seed results may differ, on average the differences are negligible when using multiple different seeds to compare. Should also be ran with ~utils.set_seed for the best results.
                      + use_configured_state (bool, optional, defaults to False): Whether or not to use a pre-configured AcceleratorState or PartialState defined before calling TrainingArguments. If True, an Accelerator or PartialState must be initialized. Note that by doing so, this could lead to issues with hyperparameter tuning.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.label_smoothing_factor label_smoothing_factor ( float , optional , defaults to 0.0) ‚Äî The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded labels are changed from 0s and 1s to label_smoothing_factor/num_labels and 1 - label_smoothing_factor + label_smoothing_factor/num_labels respectively.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.debug debug ( str or list of DebugOption , optional , defaults to "" ) ‚Äî Enable one or more debug features. This is an experimental feature.

                    Possible options are:

                      + "underflow_overflow": detects overflow in model‚Äôs input/outputs and reports the last frames that led to the event
                      + "tpu_metrics_debug": print debug metrics on TPU

                    The options should be separated by whitespaces.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.optim optim ( str or training_args.OptimizerNames , optional , defaults to "adamw_torch" ) ‚Äî The optimizer to use, such as ‚Äúadamw_torch‚Äù, ‚Äúadamw_torch_fused‚Äù, ‚Äúadamw_apex_fused‚Äù, ‚Äúadamw_anyprecision‚Äù, ‚Äúadafactor‚Äù. See OptimizerNames in training_args.py: https://github.com/huggingface/transformers/blob/main/src/transformers/training_args.py for a full list of optimizers.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.optim_args optim_args ( str , optional ) ‚Äî Optional arguments that are supplied to optimizers such as AnyPrecisionAdamW, AdEMAMix, and GaLore.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.group_by_length group_by_length ( bool , optional , defaults to False ) ‚Äî Whether or not to group together samples of roughly the same length in the training dataset (to minimize padding applied and be more efficient). Only useful if applying dynamic padding.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.length_column_name length_column_name ( str , optional , defaults to "length" ) ‚Äî Column name for precomputed lengths. If the column exists, grouping by length will use these values rather than computing them on train startup. Ignored unless group_by_length is True and the dataset is an instance of Dataset .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.report_to report_to ( str or list[str] , optional , defaults to "all" ) ‚Äî The list of integrations to report the results and logs to. Supported platforms are "azure_ml" , "clearml" , "codecarbon" , "comet_ml" , "dagshub" , "dvclive" , "flyte" , "mlflow" , "neptune" , "swanlab" , "tensorboard" , and "wandb" . Use "all" to report to all integrations installed, "none" for no integrations.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.ddp_find_unused_parameters ddp_find_unused_parameters ( bool , optional ) ‚Äî When using distributed training, the value of the flag find_unused_parameters passed to DistributedDataParallel . Will default to False if gradient checkpointing is used, True otherwise.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.ddp_bucket_cap_mb ddp_bucket_cap_mb ( int , optional ) ‚Äî When using distributed training, the value of the flag bucket_cap_mb passed to DistributedDataParallel .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.ddp_broadcast_buffers ddp_broadcast_buffers ( bool , optional ) ‚Äî When using distributed training, the value of the flag broadcast_buffers passed to DistributedDataParallel . Will default to False if gradient checkpointing is used, True otherwise.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.dataloader_pin_memory dataloader_pin_memory ( bool , optional , defaults to True ) ‚Äî Whether you want to pin memory in data loaders or not. Will default to True .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.dataloader_persistent_workers dataloader_persistent_workers ( bool , optional , defaults to False ) ‚Äî If True, the data loader will not shut down the worker processes after a dataset has been consumed once. This allows to maintain the workers Dataset instances alive. Can potentially speed up training, but will increase RAM usage. Will default to False .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.dataloader_prefetch_factor dataloader_prefetch_factor ( int , optional ) ‚Äî Number of batches loaded in advance by each worker. 2 means there will be a total of 2 * num_workers batches prefetched across all workers.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.skip_memory_metrics skip_memory_metrics ( bool , optional , defaults to True ) ‚Äî Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows down the training and evaluation speed.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.push_to_hub push_to_hub ( bool , optional , defaults to False ) ‚Äî Whether or not to push the model to the Hub every time the model is saved. If this is activated, output_dir will begin a git directory synced with the repo (determined by hub_model_id ) and the content will be pushed each time a save is triggered (depending on your save_strategy ). Calling save_model(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_model will also trigger a push.

                      If output_dir exists, it needs to be a local clone of the repository to which the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer will be pushed.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.resume_from_checkpoint resume_from_checkpoint ( str , optional ) ‚Äî The path to a folder with a valid checkpoint for your model. This argument is not directly used by Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer , it‚Äôs intended to be used by your training/evaluation scripts instead. See the example scripts: https://github.com/huggingface/transformers/tree/main/examples for more details.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.hub_model_id hub_model_id ( str , optional ) ‚Äî The name of the repository to keep in sync with the local output_dir . It can be a simple model ID in which case the model will be pushed in your namespace. Otherwise it should be the whole repository name, for instance "user_name/model" , which allows you to push to an organization you are a member of with "organization_name/model" . Will default to user_name/output_dir_name with output_dir_name being the name of output_dir .

                    Will default to the name of output_dir.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.hub_strategy hub_strategy ( str or HubStrategy , optional , defaults to "every_save" ) ‚Äî Defines the scope of what is pushed to the Hub and when. Possible values are:

                      + "end": push the model, its configuration, the processing class e.g. tokenizer (if passed along to the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer ) and a draft of a model card when the save_model(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer.save_model method is called.
                      + "every_save": push the model, its configuration, the processing class e.g. tokenizer (if passed along to the Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Trainer ) and a draft of a model card each time there is a model save. The pushes are asynchronous to not block training, and in case the save are very frequent, a new push is only attempted if the previous one is finished. A last push is made with the final model at the end of training.
                      + "checkpoint": like "every_save" but the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to resume training easily with trainer.train(resume_from_checkpoint="last-checkpoint").
                      + "all_checkpoints": like "checkpoint" but all checkpoints are pushed like they appear in the output folder (so you will get one checkpoint folder per folder in your final repository)
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.hub_token hub_token ( str , optional ) ‚Äî The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with huggingface-cli login .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.hub_private_repo hub_private_repo ( bool , optional ) ‚Äî Whether to make the repo private. If None (default), the repo will be public unless the organization‚Äôs default is private. This value is ignored if the repo already exists.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.hub_always_push hub_always_push ( bool , optional , defaults to False ) ‚Äî Unless this is True , the Trainer will skip pushing a checkpoint when the previous push is not finished.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.hub_revision hub_revision ( str , optional ) ‚Äî The revision to use when pushing to the Hub. Can be a branch name, a tag, or a commit hash.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.gradient_checkpointing gradient_checkpointing ( bool , optional , defaults to False ) ‚Äî If True, use gradient checkpointing to save memory at the expense of slower backward pass.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.gradient_checkpointing_kwargs gradient_checkpointing_kwargs ( dict , optional , defaults to None ) ‚Äî Key word arguments to be passed to the gradient_checkpointing_enable method.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.include_inputs_for_metrics include_inputs_for_metrics ( bool , optional , defaults to False ) ‚Äî This argument is deprecated. Use include_for_metrics instead, e.g, include_for_metrics = ["inputs"] .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.include_for_metrics include_for_metrics ( list[str] , optional , defaults to [] ) ‚Äî Include additional data in the compute_metrics function if needed for metrics computation. Possible options to add to include_for_metrics list:

                      + "inputs": Input data passed to the model, intended for calculating input dependent metrics.
                      + "loss": Loss values computed during evaluation, intended for calculating loss dependent metrics.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.eval_do_concat_batches eval_do_concat_batches ( bool , optional , defaults to True ) ‚Äî Whether to recursively concat inputs/losses/labels/predictions across batches. If False , will instead store them as lists, with each batch kept separate.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.auto_find_batch_size auto_find_batch_size ( bool , optional , defaults to False ) ‚Äî Whether to find a batch size that will fit into memory automatically through exponential decay, avoiding CUDA Out-of-Memory errors. Requires accelerate to be installed ( pip install accelerate )
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.full_determinism full_determinism ( bool , optional , defaults to False ) ‚Äî If True , enable_full_determinism(): https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.enable_full_determinism is called instead of set_seed(): https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.set_seed to ensure reproducible results in distributed training. Important: this will negatively impact the performance, so only use it for debugging.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.torchdynamo torchdynamo ( str , optional ) ‚Äî If set, the backend compiler for TorchDynamo. Possible choices are "eager" , "aot_eager" , "inductor" , "nvfuser" , "aot_nvfuser" , "aot_cudagraphs" , "ofi" , "fx2trt" , "onnxrt" and "ipex" .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.ray_scope ray_scope ( str , optional , defaults to "last" ) ‚Äî The scope to use when doing hyperparameter search with Ray. By default, "last" will be used. Ray will then use the last checkpoint of all trials, compare those, and select the best one. However, other options are also available. See the Ray documentation: https://docs.ray.io/en/latest/tune/api_docs/analysis.html#ray.tune.ExperimentAnalysis.get_best_trial for more options.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.ddp_timeout ddp_timeout ( int , optional , defaults to 1800) ‚Äî The timeout for torch.distributed.init_process_group calls, used to avoid GPU socket timeouts when performing slow operations in distributed runnings. Please refer the [PyTorch documentation] (https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group: https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group ) for more information.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.use_mps_device use_mps_device ( bool , optional , defaults to False ) ‚Äî This argument is deprecated. mps device will be used if it is available similar to cuda device.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.torch_compile torch_compile ( bool , optional , defaults to False ) ‚Äî Whether or not to compile the model using PyTorch 2.0 torch.compile: https://pytorch.org/get-started/pytorch-2.0/ .

                    This will use the best defaults for the torch.compile API: https://pytorch.org/docs/stable/generated/torch.compile.html?highlight=torch+compile#torch.compile . You can customize the defaults with the argument torch_compile_backend and torch_compile_mode but we don‚Äôt guarantee any of them will work as the support is progressively rolled in in PyTorch.

                    This flag and the whole compile API is experimental and subject to change in future releases.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.torch_compile_backend torch_compile_backend ( str , optional ) ‚Äî The backend to use in torch.compile . If set to any value, torch_compile will be set to True .

                    Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.

                    This flag is experimental and subject to change in future releases.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.torch_compile_mode torch_compile_mode ( str , optional ) ‚Äî The mode to use in torch.compile . If set to any value, torch_compile will be set to True .

                    Refer to the PyTorch doc for possible values and note that they may change across PyTorch versions.

                    This flag is experimental and subject to change in future releases.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.include_tokens_per_second include_tokens_per_second ( bool , optional ) ‚Äî Whether or not to compute the number of tokens per second per device for training speed metrics.

                    This will iterate over the entire training dataloader once beforehand,

                    and will slow down the entire process.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.include_num_input_tokens_seen include_num_input_tokens_seen ( bool , optional ) ‚Äî Whether or not to track the number of input tokens seen throughout training.

                    May be slower in distributed training as gather operations must be called.

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.neftune_noise_alpha neftune_noise_alpha ( Optional[float] ) ‚Äî If not None , this will activate NEFTune noise embeddings. This can drastically improve model performance for instruction fine-tuning. Check out the original paper: https://huggingface.co/papers/2310.05914 and the original code: https://github.com/neelsjain/NEFTune . Support transformers PreTrainedModel and also PeftModel from peft. The original paper used values in the range [5.0, 15.0].
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.optim_target_modules optim_target_modules ( Union[str, list[str]] , optional ) ‚Äî The target modules to optimize, i.e. the module names that you would like to train. Currently used for the GaLore algorithm (https://huggingface.co/papers/2403.03507: https://huggingface.co/papers/2403.03507 ) and APOLLO algorithm (https://huggingface.co/papers/2412.05270: https://huggingface.co/papers/2412.05270 ). See GaLore implementation (https://github.com/jiaweizzhao/GaLore: https://github.com/jiaweizzhao/GaLore ) and APOLLO implementation (https://github.com/zhuhanqing/APOLLO: https://github.com/zhuhanqing/APOLLO ) for more details. You need to make sure to pass a valid GaLore or APOLLO optimizer, e.g., one of: ‚Äúapollo_adamw‚Äù, ‚Äúgalore_adamw‚Äù, ‚Äúgalore_adamw_8bit‚Äù, ‚Äúgalore_adafactor‚Äù and make sure that the target modules are nn.Linear modules only.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.batch_eval_metrics batch_eval_metrics ( Optional[bool] , defaults to False ) ‚Äî If set to True , evaluation will call compute_metrics at the end of each batch to accumulate statistics rather than saving all eval logits in memory. When set to True , you must pass a compute_metrics function that takes a boolean argument compute_result , which when passed True , will trigger the final global summary statistics from the batch-level summary statistics you‚Äôve accumulated over the evaluation set.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.eval_on_start eval_on_start ( bool , optional , defaults to False ) ‚Äî Whether to perform a evaluation step (sanity check) before the training to ensure the validation steps works correctly.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.eval_use_gather_object eval_use_gather_object ( bool , optional , defaults to False ) ‚Äî Whether to run recursively gather object in a nested list/tuple/dictionary of objects from all devices. This should only be enabled if users are not just returning tensors, and this is actively discouraged by PyTorch.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.use_liger_kernel use_liger_kernel ( bool , optional , defaults to False ) ‚Äî Whether enable Liger: https://github.com/linkedin/Liger-Kernel Kernel for LLM model training. It can effectively increase multi-GPU training throughput by ~20% and reduces memory usage by ~60%, works out of the box with flash attention, PyTorch FSDP, and Microsoft DeepSpeed. Currently, it supports llama, mistral, mixtral and gemma models.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.liger_kernel_config liger_kernel_config ( Optional[dict] , optional ) ‚Äî Configuration to be used for Liger Kernel. When use_liger_kernel=True, this dict is passed as keyword arguments to the _apply_liger_kernel_to_instance function, which specifies which kernels to apply. Available options vary by model but typically include: ‚Äòrope‚Äô, ‚Äòswiglu‚Äô, ‚Äòcross_entropy‚Äô, ‚Äòfused_linear_cross_entropy‚Äô, ‚Äòrms_norm‚Äô, etc. If None , use the default kernel configurations.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.average_tokens_across_devices average_tokens_across_devices ( bool , optional , defaults to False ) ‚Äî Whether or not to average tokens across devices. If enabled, will use all_reduce to synchronize num_tokens_in_batch for precise loss calculation. Reference: https://github.com/huggingface/transformers/issues/34242: https://github.com/huggingface/transformers/issues/34242
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.predict_with_generate predict_with_generate ( bool , optional , defaults to False ) ‚Äî Whether to use generate to calculate generative metrics (ROUGE, BLEU).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.generation_max_length generation_max_length ( int , optional ) ‚Äî The max_length to use on each evaluation loop when predict_with_generate=True . Will default to the max_length value of the model configuration.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.generation_num_beams generation_num_beams ( int , optional ) ‚Äî The num_beams to use on each evaluation loop when predict_with_generate=True . Will default to the num_beams value of the model configuration.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.generation_config generation_config ( str or Path or GenerationConfig: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/text_generation#transformers.GenerationConfig , optional ) ‚Äî Allows to load a GenerationConfig: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/text_generation#transformers.GenerationConfig from the from_pretrained method. This can be either:

                      + a string, the model id of a pretrained model configuration hosted inside a model repo on huggingface.co.
                      + a path to a directory containing a configuration file saved using the save_pretrained(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/text_generation#transformers.GenerationConfig.save_pretrained method, e.g., ./my_model_directory/.
                      + a GenerationConfig: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/text_generation#transformers.GenerationConfig object.

            TrainingArguments is the subset of the arguments we use in our example scripts which relate to the training loop itself.

            Using HfArgumentParser: https://huggingface.co/docs/transformers/v4.53.1/en/internal/trainer_utils#transformers.HfArgumentParser we can turn this class into argparse: https://docs.python.org/3/library/argparse#module-argparse arguments that can be specified on the command line.

                to_dict

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments.to_dict < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/training_args_seq2seq.py#L80

                ( )

              Serializes this instance while replace Enum by their values and GenerationConfig by dictionaries (for JSON serialization support). It obfuscates the token values by removing their value.

          < > Update on GitHub: https://github.com/huggingface/transformers/blob/main/docs/source/en/main_classes/trainer.md

            ‚ÜêTokenizer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer DeepSpeed‚Üí: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/deepspeed
        Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#trainer Trainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#api-reference ][ transformers.Trainer Seq2SeqTrainer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainer TrainingArguments: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.TrainingArguments Seq2SeqTrainingArguments: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments