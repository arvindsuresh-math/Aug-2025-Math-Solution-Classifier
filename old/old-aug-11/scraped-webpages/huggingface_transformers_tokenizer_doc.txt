        Hugging Face: https://huggingface.co/
        * Models: https://huggingface.co/models
        * Datasets: https://huggingface.co/datasets
        * Spaces: https://huggingface.co/spaces
          * Community
        * Docs: https://huggingface.co/docs
        * Enterprise: https://huggingface.co/enterprise
        * Pricing: https://huggingface.co/pricing
        * 
        * 
        * Log In: https://huggingface.co/login
        * Sign Up: https://huggingface.co/join

              Transformers documentation

                Tokenizer

              Transformers

              üè° View all docsAWS Trainium & InferentiaAccelerateArgillaAutoTrainBitsandbytesChat UIDataset viewerDatasetsDeploying on AWSDiffusersDistilabelEvaluateGradioHubHub Python LibraryHuggingface.jsInference Endpoints (dedicated)Inference ProvidersLeRobotLeaderboardsLightevalMicrosoft AzureOptimumPEFTSafetensorsSentence TransformersTRLTasksText Embeddings InferenceText Generation InferenceTokenizersTransformersTransformers.jssmolagentstimm
              Search documentation
              mainv4.53.3v4.52.3v4.51.3v4.50.0v4.49.0v4.48.2v4.47.1v4.46.3v4.45.2v4.44.2v4.43.4v4.42.4v4.41.2v4.40.2v4.39.3v4.38.2v4.37.2v4.36.1v4.35.2v4.34.1v4.33.3v4.32.1v4.31.0v4.30.0v4.29.1v4.28.1v4.27.2v4.26.1v4.25.1v4.24.0v4.23.1v4.22.2v4.21.3v4.20.1v4.19.4v4.18.0v4.17.0v4.16.2v4.15.0v4.14.1v4.13.0v4.12.5v4.11.3v4.10.1v4.9.2v4.8.2v4.7.0v4.6.0v4.5.1v4.4.2v4.3.3v4.2.2v4.1.1v4.0.1v3.5.1v3.4.0v3.3.1v3.2.0v3.1.0v3.0.2v2.11.0v2.10.0v2.9.1v2.8.0v2.7.0v2.6.0v2.5.1v2.4.1v2.3.0v2.2.2v2.1.1v2.0.0v1.2.0v1.1.0v1.0.0doc-builder-htmlARDEENESFRHIITJAKOPTTETRZH
              : https://github.com/huggingface/transformers
              Get started
            Transformers : https://huggingface.co/docs/transformers/v4.53.1/en/index Installation : https://huggingface.co/docs/transformers/v4.53.1/en/installation Quickstart : https://huggingface.co/docs/transformers/v4.53.1/en/quicktour
              Base classes
              Inference
              Training
              Quantization
              Export to production
              Resources
              Contribute
              API
                Main Classes
              Auto Classes : https://huggingface.co/docs/transformers/v4.53.1/en/model_doc/auto Backbones : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/backbones Callbacks : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/callback Configuration : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/configuration Data Collator : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/data_collator Keras callbacks : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/keras_callbacks Logging : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/logging Models : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model Text Generation : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/text_generation ONNX : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/onnx Optimization : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/optimizer_schedules Model outputs : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/output PEFT : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/peft Pipelines : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/pipelines Processors : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/processors Quantization : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/quantization Tokenizer : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer Trainer : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer DeepSpeed : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/deepspeed ExecuTorch : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/executorch Feature Extractor : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/feature_extractor Image Processor : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/image_processor Video Processor : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/video_processor
                Models
                Internal helpers
                Reference
          You are viewing v4.53.1 version. A newer version v4.53.3: https://huggingface.co/docs/transformers/v4.53.3/main_classes/tokenizer is available.
              Join the Hugging Face community

            and get access to the augmented documentation experience

                  Collaborate on models, datasets and Spaces
                  Faster examples with accelerated inference
                  Switch between documentation themes
              Sign Up: https://huggingface.co/join

              to get started

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#tokenizer Tokenizer

          A tokenizer is in charge of preparing the inputs for a model. The library contains tokenizers for all the models. Most of the tokenizers are available in two flavors: a full python implementation and a ‚ÄúFast‚Äù implementation based on the Rust library ü§ó Tokenizers: https://github.com/huggingface/tokenizers . The ‚ÄúFast‚Äù implementations allows:

           1. a significant speed-up in particular when doing batched tokenization and
           2. additional methods to map between the original string (character and words) and the token space (e.g. getting the index of the token comprising a given character or the span of characters corresponding to a given token).

          The base classes PreTrainedTokenizer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer and PreTrainedTokenizerFast: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast implement the common methods for encoding string inputs in model inputs (see below) and instantiating/saving python and ‚ÄúFast‚Äù tokenizers either from a local file or directory or from a pretrained tokenizer provided by the library (downloaded from HuggingFace‚Äôs AWS S3 repository). They both rely on PreTrainedTokenizerBase: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase that contains the common methods, and SpecialTokensMixin: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.SpecialTokensMixin .

          PreTrainedTokenizer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer and PreTrainedTokenizerFast: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast thus implement the main methods for using all the tokenizers:

            * Tokenizing (splitting strings in sub-word token strings), converting tokens strings to ids and back, and encoding/decoding (i.e., tokenizing and converting to integers).
            * Adding new tokens to the vocabulary in a way that is independent of the underlying structure (BPE, SentencePiece‚Ä¶).
            * Managing special tokens (like mask, beginning-of-sentence, etc.): adding them, assigning them to attributes in the tokenizer for easy access and making sure they are not split during tokenization.

          BatchEncoding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding holds the output of the PreTrainedTokenizerBase: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase ‚Äôs encoding methods (__call__, encode_plus and batch_encode_plus) and is derived from a Python dictionary. When the tokenizer is a pure python tokenizer, this class behaves just like a standard python dictionary and holds the various model inputs computed by these methods (input_ids, attention_mask‚Ä¶). When the tokenizer is a ‚ÄúFast‚Äù tokenizer (i.e., backed by HuggingFace tokenizers library: https://github.com/huggingface/tokenizers ), this class provides in addition several advanced alignment methods which can be used to map between the original string (character and words) and the token space (e.g., getting the index of the token comprising a given character or the span of characters corresponding to a given token).

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#multimodal-tokenizer Multimodal Tokenizer

          Apart from that each tokenizer can be a ‚Äúmultimodal‚Äù tokenizer which means that the tokenizer will hold all relevant special tokens as part of tokenizer attributes for easier access. For example, if the tokenizer is loaded from a vision-language model like LLaVA, you will be able to access tokenizer.image_token_id to obtain the special image token used as a placeholder.

          To enable extra special tokens for any type of tokenizer, you have to add the following lines and save the tokenizer. Extra special tokens do not have to be modality related and can ne anything that the model often needs access to. In the below code, tokenizer at output_dir will have direct access to three more special tokens.

                Copied
            vision_tokenizer = AutoTokenizer.from_pretrained(
                "llava-hf/llava-1.5-7b-hf",
                extra_special_tokens={"image_token": "<image>", "boi_token": "<image_start>", "eoi_token": "<image_end>"}
            )
            print(vision_tokenizer.image_token, vision_tokenizer.image_token_id)
            ("<image>", 32000)

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer PreTrainedTokenizer

              class transformers. PreTrainedTokenizer

              : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils.py#L406

              ( **kwargs )

                  Expand 15 parameters

                Parameters

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.model_max_length model_max_length ( int , optional ) ‚Äî The maximum length (in number of tokens) for the inputs to the transformer model. When the tokenizer is loaded with from_pretrained(): https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.from_pretrained , this will be set to the value stored for the associated model in max_model_input_sizes (see above). If no value is provided, will default to VERY_LARGE_INTEGER ( int(1e30) ).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.padding_side padding_side ( str , optional ) ‚Äî The side on which the model should have padding applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is picked from the class attribute of the same name.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.truncation_side truncation_side ( str , optional ) ‚Äî The side on which the model should have truncation applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is picked from the class attribute of the same name.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.chat_template chat_template ( str , optional ) ‚Äî A Jinja template string that will be used to format lists of chat messages. See https://huggingface.co/docs/transformers/chat_templating: https://huggingface.co/docs/transformers/chat_templating for a full description.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.model_input_names model_input_names ( list[string] , optional ) ‚Äî The list of inputs accepted by the forward pass of the model (like "token_type_ids" or "attention_mask" ). Default value is picked from the class attribute of the same name.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.bos_token bos_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing the beginning of a sentence. Will be associated to self.bos_token and self.bos_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.eos_token eos_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing the end of a sentence. Will be associated to self.eos_token and self.eos_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.unk_token unk_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing an out-of-vocabulary token. Will be associated to self.unk_token and self.unk_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.sep_token sep_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token separating two different sentences in the same input (used by BERT for instance). Will be associated to self.sep_token and self.sep_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.pad_token pad_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token used to make arrays of tokens the same size for batching purpose. Will then be ignored by attention mechanisms or loss computation. Will be associated to self.pad_token and self.pad_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.cls_token cls_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing the class of the input (used by BERT for instance). Will be associated to self.cls_token and self.cls_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.mask_token mask_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing a masked token (used by masked-language modeling pretraining objectives, like BERT). Will be associated to self.mask_token and self.mask_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.additional_special_tokens additional_special_tokens (tuple or list of str or tokenizers.AddedToken , optional ) ‚Äî A tuple or a list of additional special tokens. Add them here to ensure they are skipped when decoding with skip_special_tokens is set to True. If they are not part of the vocabulary, they will be added at the end of the vocabulary.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.clean_up_tokenization_spaces clean_up_tokenization_spaces ( bool , optional , defaults to True ) ‚Äî Whether or not the model should cleanup the spaces that were added when splitting the input text during the tokenization process.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.split_special_tokens split_special_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not the special tokens should be split during the tokenization process. Passing will affect the internal state of the tokenizer. The default behavior is to not split special tokens. This means that if <s> is the bos_token , then tokenizer.tokenize("<s>") = ['<s> ]. Otherwise, if split_special_tokens=True , then tokenizer.tokenize("<s>") will be give ['<','s', '>'] .

            Base class for all slow tokenizers.

            Inherits from PreTrainedTokenizerBase: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase .

            Handle all the shared methods for tokenization and special tokens as well as methods downloading/caching/loading pretrained tokenizers as well as adding tokens to the vocabulary.

            This class also contain the added tokens in a unified way on top of all tokenizers so we don‚Äôt have to handle the specific vocabulary augmentation methods of the various underlying dictionary structures (BPE, sentencepiece‚Ä¶).

            Class attributes (overridden by derived classes)

              * vocab_files_names (dict[str, str]) ‚Äî A dictionary with, as keys, the __init__ keyword name of each vocabulary file required by the model, and as associated values, the filename for saving the associated file (string).
              * pretrained_vocab_files_map (dict[str, dict[str, str]]) ‚Äî A dictionary of dictionaries, with the high-level keys being the __init__ keyword name of each vocabulary file required by the model, the low-level being the short-cut-names of the pretrained models with, as associated values, the url to the associated pretrained vocabulary file.
              * model_input_names (list[str]) ‚Äî A list of inputs expected in the forward pass of the model.
              * padding_side (str) ‚Äî The default value for the side on which the model should have padding applied. Should be 'right' or 'left'.
              * truncation_side (str) ‚Äî The default value for the side on which the model should have truncation applied. Should be 'right' or 'left'.

                __call__

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__ < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L2772

                ( text : typing.Union[str, list[str], list[list[str]], NoneType] = None text_pair : typing.Union[str, list[str], list[list[str]], NoneType] = None text_target : typing.Union[str, list[str], list[list[str]], NoneType] = None text_pair_target : typing.Union[str, list[str], list[list[str]], NoneType] = None add_special_tokens : bool = True padding : typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation : typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy, NoneType] = None max_length : typing.Optional[int] = None stride : int = 0 is_split_into_words : bool = False pad_to_multiple_of : typing.Optional[int] = None padding_side : typing.Optional[str] = None return_tensors : typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None return_token_type_ids : typing.Optional[bool] = None return_attention_mask : typing.Optional[bool] = None return_overflowing_tokens : bool = False return_special_tokens_mask : bool = False return_offsets_mapping : bool = False return_length : bool = False verbose : bool = True **kwargs ) ‚Üí BatchEncoding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding

                    Expand 21 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.text text ( str , list[str] , list[list[str]] , optional ) ‚Äî The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.text_pair text_pair ( str , list[str] , list[list[str]] , optional ) ‚Äî The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.text_target text_target ( str , list[str] , list[list[str]] , optional ) ‚Äî The sequence or batch of sequences to be encoded as target texts. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.text_pair_target text_pair_target ( str , list[str] , list[list[str]] , optional ) ‚Äî The sequence or batch of sequences to be encoded as target texts. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.add_special_tokens add_special_tokens ( bool , optional , defaults to True ) ‚Äî Whether or not to add special tokens when encoding the sequences. This will use the underlying PretrainedTokenizerBase.build_inputs_with_special_tokens function, which defines which tokens are automatically added to the input ids. This is useful if you want to add bos or eos tokens automatically.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.padding padding ( bool , str or PaddingStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.utils.PaddingStrategy , optional , defaults to False ) ‚Äî Activates and controls padding. Accepts the following values:

                        + True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence is provided).
                        + 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided.
                        + False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.truncation truncation ( bool , str or TruncationStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy , optional , defaults to False ) ‚Äî Activates and controls truncation. Accepts the following values:

                        + True or 'longest_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will truncate token by token, removing a token from the longest sequence in the pair if a pair of sequences (or a batch of pairs) is provided.
                        + 'only_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
                        + 'only_second': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
                        + False or 'do_not_truncate' (default): No truncation (i.e., can output batch with sequence lengths greater than the model maximum admissible input size).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.max_length max_length ( int , optional ) ‚Äî Controls the maximum length to use by one of the truncation/padding parameters.

                      If left unset or set to None, this will use the predefined model maximum length if a maximum length is required by one of the truncation/padding parameters. If the model has no specific maximum input length (like XLNet) truncation/padding to a maximum length will be deactivated.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.stride stride ( int , optional , defaults to 0) ‚Äî If set to a number along with max_length , the overflowing tokens returned when return_overflowing_tokens=True will contain some tokens from the end of the truncated sequence returned to provide some overlap between truncated and overflowing sequences. The value of this argument defines the number of overlapping tokens.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.is_split_into_words is_split_into_words ( bool , optional , defaults to False ) ‚Äî Whether or not the input is already pre-tokenized (e.g., split into words). If set to True , the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.pad_to_multiple_of pad_to_multiple_of ( int , optional ) ‚Äî If set will pad the sequence to a multiple of the provided value. Requires padding to be activated. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.padding_side padding_side ( str , optional ) ‚Äî The side on which the model should have padding applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is picked from the class attribute of the same name.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.return_tensors return_tensors ( str or TensorType: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.TensorType , optional ) ‚Äî If set, will return tensors instead of list of python integers. Acceptable values are:

                        + 'tf': Return TensorFlow tf.constant objects.
                        + 'pt': Return PyTorch torch.Tensor objects.
                        + 'np': Return Numpy np.ndarray objects.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.return_token_type_ids return_token_type_ids ( bool , optional ) ‚Äî Whether to return token type IDs. If left to the default, will return the token type IDs according to the specific tokenizer‚Äôs default, defined by the return_outputs attribute.

                      What are token type IDs?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#token-type-ids

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.return_attention_mask return_attention_mask ( bool , optional ) ‚Äî Whether to return the attention mask. If left to the default, will return the attention mask according to the specific tokenizer‚Äôs default, defined by the return_outputs attribute.

                      What are attention masks?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#attention-mask

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.return_overflowing_tokens return_overflowing_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not to return overflowing token sequences. If a pair of sequences of input ids (or a batch of pairs) is provided with truncation_strategy = longest_first or True , an error is raised instead of returning overflowing tokens.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.return_special_tokens_mask return_special_tokens_mask ( bool , optional , defaults to False ) ‚Äî Whether or not to return special tokens mask information.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.return_offsets_mapping return_offsets_mapping ( bool , optional , defaults to False ) ‚Äî Whether or not to return (char_start, char_end) for each token.

                      This is only available on fast tokenizers inheriting from PreTrainedTokenizerFast: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast , if using Python‚Äôs tokenizer, this method will raise NotImplementedError.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.return_length return_length ( bool , optional , defaults to False ) ‚Äî Whether or not to return the lengths of the encoded inputs.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.verbose verbose ( bool , optional , defaults to True ) ‚Äî Whether or not to print more information and warnings.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.__call__.*kwargs * *kwargs ‚Äî passed to the self.tokenize() method

                    Returns

                    BatchEncoding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding

                  A BatchEncoding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding with the following fields:

                    * input_ids ‚Äî List of token ids to be fed to a model.

                      What are input IDs?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#input-ids

                    * token_type_ids ‚Äî List of token type ids to be fed to a model (when return_token_type_ids=True or if ‚Äútoken_type_ids‚Äù is in self.model_input_names).

                      What are token type IDs?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#token-type-ids

                    * attention_mask ‚Äî List of indices specifying which tokens should be attended to by the model (when return_attention_mask=True or if ‚Äúattention_mask‚Äù is in self.model_input_names).

                      What are attention masks?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#attention-mask

                    * overflowing_tokens ‚Äî List of overflowing tokens sequences (when a max_length is specified and return_overflowing_tokens=True).

                    * num_truncated_tokens ‚Äî Number of tokens truncated (when a max_length is specified and return_overflowing_tokens=True).

                    * special_tokens_mask ‚Äî List of 0s and 1s, with 1 specifying added special tokens and 0 specifying regular sequence tokens (when add_special_tokens=True and return_special_tokens_mask=True).

                    * length ‚Äî The length of the inputs (when return_length=True)

              Main method to tokenize and prepare for the model one or several sequence(s) or one or several pair(s) of sequences.

                add_tokens

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.add_tokens < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L995

                ( new_tokens : typing.Union[str, tokenizers.AddedToken, collections.abc.Sequence[typing.Union[str, tokenizers.AddedToken]]] special_tokens : bool = False ) ‚Üí int

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.add_tokens.new_tokens new_tokens ( str , tokenizers.AddedToken or a sequence of str or tokenizers.AddedToken ) ‚Äî Tokens are only added if they are not already in the vocabulary. tokenizers.AddedToken wraps a string token to let you personalize its behavior: whether this token should only match against a single word, whether this token should strip all potential whitespaces on the left side, whether this token should strip all potential whitespaces on the right side, etc.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.add_tokens.special_tokens special_tokens ( bool , optional , defaults to False ) ‚Äî Can be used to specify if the token is a special token. This mostly change the normalization behavior (special tokens like CLS or [MASK] are usually not lower-cased for instance).

                      See details for tokenizers.AddedToken in HuggingFace tokenizers library.

                    Returns

                    int

                  Number of tokens added to the vocabulary.

              Add a list of new tokens to the tokenizer class. If the new tokens are not in the vocabulary, they are added to it with indices starting from length of the current vocabulary and will be isolated before the tokenization algorithm is applied. Added tokens and tokens from the vocabulary of the tokenization algorithm are therefore not treated in the same way.

              Note, when adding new tokens to the vocabulary, you should make sure to also resize the token embedding matrix of the model so that its embedding matrix matches the tokenizer.

              In order to do that, please use the resize_token_embeddings(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model#transformers.PreTrainedModel.resize_token_embeddings method.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.add_tokens.example

                Examples:

                      Copied
                  # Let's see how to increase the vocabulary of Bert model and tokenizer
                  tokenizer = BertTokenizerFast.from_pretrained("google-bert/bert-base-uncased")
                  model = BertModel.from_pretrained("google-bert/bert-base-uncased")
                  
                  num_added_toks = tokenizer.add_tokens(["new_tok1", "my_new-tok2"])
                  print("We have added", num_added_toks, "tokens")
                  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e., the length of the tokenizer.
                  model.resize_token_embeddings(len(tokenizer))

                add_special_tokens

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.add_special_tokens < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L891

                ( special_tokens_dict : dict replace_additional_special_tokens = True ) ‚Üí int

                    Expand 2 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.add_special_tokens.special_tokens_dict special_tokens_dict (dictionary str to str , tokenizers.AddedToken , or Sequence[Union[str, AddedToken]] ) ‚Äî Keys should be in the list of predefined special attributes: [ bos_token , eos_token , unk_token , sep_token , pad_token , cls_token , mask_token , additional_special_tokens ].

                      Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the unk_token to them).

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.add_special_tokens.replace_additional_special_tokens replace_additional_special_tokens ( bool , optional ,, defaults to True ) ‚Äî If True , the existing list of additional special tokens will be replaced by the list provided in special_tokens_dict . Otherwise, self._special_tokens_map["additional_special_tokens"] is just extended. In the former case, the tokens will NOT be removed from the tokenizer‚Äôs full vocabulary - they are only being flagged as non-special tokens. Remember, this only affects which tokens are skipped during decoding, not the added_tokens_encoder and added_tokens_decoder . This means that the previous additional_special_tokens are still added tokens, and will not be split by the model.

                    Returns

                    int

                  Number of tokens added to the vocabulary.

              Add a dictionary of special tokens (eos, pad, cls, etc.) to the encoder and link them to class attributes. If special tokens are NOT in the vocabulary, they are added to it (indexed starting from the last index of the current vocabulary).

              When adding new tokens to the vocabulary, you should make sure to also resize the token embedding matrix of the model so that its embedding matrix matches the tokenizer.

              In order to do that, please use the resize_token_embeddings(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model#transformers.PreTrainedModel.resize_token_embeddings method.

              Using add_special_tokens will ensure your special tokens can be used in several ways:

                * Special tokens can be skipped when decoding using skip_special_tokens = True.
                * Special tokens are carefully handled by the tokenizer (they are never split), similar to AddedTokens.
                * You can easily refer to special tokens using tokenizer class attributes like tokenizer.cls_token. This makes it easy to develop model-agnostic training and fine-tuning scripts.

              When possible, special tokens are already registered for provided pretrained models (for instance BertTokenizer: https://huggingface.co/docs/transformers/v4.53.1/en/model_doc/bert#transformers.BertTokenizer cls_token is already registered to be '[CLS]' and XLM‚Äôs one is also registered to be '</s>').

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.add_special_tokens.example

                Examples:

                      Copied
                  # Let's see how to add a new classification token to GPT-2
                  tokenizer = GPT2Tokenizer.from_pretrained("openai-community/gpt2")
                  model = GPT2Model.from_pretrained("openai-community/gpt2")
                  
                  special_tokens_dict = {"cls_token": "<CLS>"}
                  
                  num_added_toks = tokenizer.add_special_tokens(special_tokens_dict)
                  print("We have added", num_added_toks, "tokens")
                  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e., the length of the tokenizer.
                  model.resize_token_embeddings(len(tokenizer))
                  
                  assert tokenizer.cls_token == "<CLS>"

                apply_chat_template

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L1519

                ( conversation : typing.Union[list[dict[str, str]], list[list[dict[str, str]]]] tools : typing.Optional[list[typing.Union[dict, typing.Callable]]] = None documents : typing.Optional[list[dict[str, str]]] = None chat_template : typing.Optional[str] = None add_generation_prompt : bool = False continue_final_message : bool = False tokenize : bool = True padding : typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation : bool = False max_length : typing.Optional[int] = None return_tensors : typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None return_dict : bool = False return_assistant_tokens_mask : bool = False tokenizer_kwargs : typing.Optional[dict[str, typing.Any]] = None **kwargs ) ‚Üí Union[list[int], Dict]

                    Expand 15 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.conversation conversation (Union[list[dict[str, str]], list[list[dict[str, str]]]]) ‚Äî A list of dicts with ‚Äúrole‚Äù and ‚Äúcontent‚Äù keys, representing the chat history so far.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.tools tools ( list[Union[Dict, Callable]] , optional ) ‚Äî A list of tools (callable functions) that will be accessible to the model. If the template does not support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema, giving the name, description and argument types for the tool. See our chat templating guide: https://huggingface.co/docs/transformers/main/en/chat_templating#automated-function-conversion-for-tool-use for more information.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.documents documents ( list[dict[str, str]] , optional ) ‚Äî A list of dicts representing documents that will be accessible to the model if it is performing RAG (retrieval-augmented generation). If the template does not support RAG, this argument will have no effect. We recommend that each document should be a dict containing ‚Äútitle‚Äù and ‚Äútext‚Äù keys. Please see the RAG section of the chat templating guide: https://huggingface.co/docs/transformers/main/en/chat_templating#arguments-for-RAG for examples of passing documents with chat templates.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.chat_template chat_template ( str , optional ) ‚Äî A Jinja template to use for this conversion. It is usually not necessary to pass anything to this argument, as the model‚Äôs template will be used by default.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.add_generation_prompt add_generation_prompt (bool, optional ) ‚Äî If this is set, a prompt with the token(s) that indicate the start of an assistant message will be appended to the formatted output. This is useful when you want to generate a response from the model. Note that this argument will be passed to the chat template, and so it must be supported in the template for this argument to have any effect.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.continue_final_message continue_final_message (bool, optional ) ‚Äî If this is set, the chat will be formatted so that the final message in the chat is open-ended, without any EOS tokens. The model will continue this message rather than starting a new one. This allows you to ‚Äúprefill‚Äù part of the model‚Äôs response for it. Cannot be used at the same time as add_generation_prompt .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.tokenize tokenize ( bool , defaults to True ) ‚Äî Whether to tokenize the output. If False , the output will be a string.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.padding padding ( bool , str or PaddingStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.utils.PaddingStrategy , optional , defaults to False ) ‚Äî Select a strategy to pad the returned sequences (according to the model‚Äôs padding side and padding index) among:

                        + True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence if provided).
                        + 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided.
                        + False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.truncation truncation ( bool , defaults to False ) ‚Äî Whether to truncate sequences at the maximum length. Has no effect if tokenize is False .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.max_length max_length ( int , optional ) ‚Äî Maximum length (in tokens) to use for padding or truncation. Has no effect if tokenize is False . If not specified, the tokenizer‚Äôs max_length attribute will be used as a default.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.return_tensors return_tensors ( str or TensorType: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.TensorType , optional ) ‚Äî If set, will return tensors of a particular framework. Has no effect if tokenize is False . Acceptable values are:

                        + 'tf': Return TensorFlow tf.Tensor objects.
                        + 'pt': Return PyTorch torch.Tensor objects.
                        + 'np': Return NumPy np.ndarray objects.
                        + 'jax': Return JAX jnp.ndarray objects.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.return_dict return_dict ( bool , defaults to False ) ‚Äî Whether to return a dictionary with named outputs. Has no effect if tokenize is False .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.tokenizer_kwargs tokenizer_kwargs ( dict[str -- Any] , optional ): Additional kwargs to pass to the tokenizer.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.return_assistant_tokens_mask return_assistant_tokens_mask ( bool , defaults to False ) ‚Äî Whether to return a mask of the assistant generated tokens. For tokens generated by the assistant, the mask will contain 1. For user and system tokens, the mask will contain 0. This functionality is only available for chat templates that support it via the {% generation %} keyword.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.apply_chat_template.*kwargs * *kwargs ‚Äî Additional kwargs to pass to the template renderer. Will be accessible by the chat template.

                    Returns

                    Union[list[int], Dict]

                  A list of token ids representing the tokenized chat so far, including control tokens. This output is ready to pass to the model, either directly or via methods like generate(). If return_dict is set, will return a dict of tokenizer outputs instead.

              Converts a list of dictionaries with "role" and "content" keys to a list of token ids. This method is intended for use with chat models, and will read the tokenizer‚Äôs chat_template attribute to determine the format and control tokens to use when converting.

                batch_decode

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.batch_decode < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L3777

                ( sequences : typing.Union[list[int], list[list[int]], ForwardRef('np.ndarray'), ForwardRef('torch.Tensor'), ForwardRef('tf.Tensor')] skip_special_tokens : bool = False clean_up_tokenization_spaces : typing.Optional[bool] = None **kwargs ) ‚Üí list[str]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.batch_decode.sequences sequences ( Union[list[int], list[list[int]], np.ndarray, torch.Tensor, tf.Tensor] ) ‚Äî List of tokenized input ids. Can be obtained using the __call__ method.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.batch_decode.skip_special_tokens skip_special_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not to remove special tokens in the decoding.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.batch_decode.clean_up_tokenization_spaces clean_up_tokenization_spaces ( bool , optional ) ‚Äî Whether or not to clean up the tokenization spaces. If None , will default to self.clean_up_tokenization_spaces .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.batch_decode.kwargs kwargs (additional keyword arguments, optional ) ‚Äî Will be passed to the underlying model specific decode method.

                    Returns

                    list[str]

                  The list of decoded sentences.

              Convert a list of lists of token ids into a list of strings by calling decode.

                decode

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.decode < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L3811

                ( token_ids : typing.Union[int, list[int], ForwardRef('np.ndarray'), ForwardRef('torch.Tensor'), ForwardRef('tf.Tensor')] skip_special_tokens : bool = False clean_up_tokenization_spaces : typing.Optional[bool] = None **kwargs ) ‚Üí str

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.decode.token_ids token_ids ( Union[int, list[int], np.ndarray, torch.Tensor, tf.Tensor] ) ‚Äî List of tokenized input ids. Can be obtained using the __call__ method.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.decode.skip_special_tokens skip_special_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not to remove special tokens in the decoding.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.decode.clean_up_tokenization_spaces clean_up_tokenization_spaces ( bool , optional ) ‚Äî Whether or not to clean up the tokenization spaces. If None , will default to self.clean_up_tokenization_spaces .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.decode.kwargs kwargs (additional keyword arguments, optional ) ‚Äî Will be passed to the underlying model specific decode method.

                    Returns

                    str

                  The decoded sentence.

              Converts a sequence of ids in a string, using the tokenizer and vocabulary with options to remove special tokens and clean up tokenization spaces.

              Similar to doing self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids)).

                encode

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L2611

                ( text : typing.Union[str, list[str], list[int]] text_pair : typing.Union[str, list[str], list[int], NoneType] = None add_special_tokens : bool = True padding : typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation : typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy, NoneType] = None max_length : typing.Optional[int] = None stride : int = 0 padding_side : typing.Optional[str] = None return_tensors : typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None **kwargs ) ‚Üí list[int] , torch.Tensor , tf.Tensor or np.ndarray

                    Expand 12 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.text text ( str , list[str] or list[int] ) ‚Äî The first sequence to be encoded. This can be a string, a list of strings (tokenized string using the tokenize method) or a list of integers (tokenized string ids using the convert_tokens_to_ids method).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.text_pair text_pair ( str , list[str] or list[int] , optional ) ‚Äî Optional second sequence to be encoded. This can be a string, a list of strings (tokenized string using the tokenize method) or a list of integers (tokenized string ids using the convert_tokens_to_ids method).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.add_special_tokens add_special_tokens ( bool , optional , defaults to True ) ‚Äî Whether or not to add special tokens when encoding the sequences. This will use the underlying PretrainedTokenizerBase.build_inputs_with_special_tokens function, which defines which tokens are automatically added to the input ids. This is useful if you want to add bos or eos tokens automatically.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.padding padding ( bool , str or PaddingStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.utils.PaddingStrategy , optional , defaults to False ) ‚Äî Activates and controls padding. Accepts the following values:

                        + True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence is provided).
                        + 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided.
                        + False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.truncation truncation ( bool , str or TruncationStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy , optional , defaults to False ) ‚Äî Activates and controls truncation. Accepts the following values:

                        + True or 'longest_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will truncate token by token, removing a token from the longest sequence in the pair if a pair of sequences (or a batch of pairs) is provided.
                        + 'only_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
                        + 'only_second': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
                        + False or 'do_not_truncate' (default): No truncation (i.e., can output batch with sequence lengths greater than the model maximum admissible input size).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.max_length max_length ( int , optional ) ‚Äî Controls the maximum length to use by one of the truncation/padding parameters.

                      If left unset or set to None, this will use the predefined model maximum length if a maximum length is required by one of the truncation/padding parameters. If the model has no specific maximum input length (like XLNet) truncation/padding to a maximum length will be deactivated.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.stride stride ( int , optional , defaults to 0) ‚Äî If set to a number along with max_length , the overflowing tokens returned when return_overflowing_tokens=True will contain some tokens from the end of the truncated sequence returned to provide some overlap between truncated and overflowing sequences. The value of this argument defines the number of overlapping tokens.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.is_split_into_words is_split_into_words ( bool , optional , defaults to False ) ‚Äî Whether or not the input is already pre-tokenized (e.g., split into words). If set to True , the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.pad_to_multiple_of pad_to_multiple_of ( int , optional ) ‚Äî If set will pad the sequence to a multiple of the provided value. Requires padding to be activated. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.padding_side padding_side ( str , optional ) ‚Äî The side on which the model should have padding applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is picked from the class attribute of the same name.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.return_tensors return_tensors ( str or TensorType: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.TensorType , optional ) ‚Äî If set, will return tensors instead of list of python integers. Acceptable values are:

                        + 'tf': Return TensorFlow tf.constant objects.
                        + 'pt': Return PyTorch torch.Tensor objects.
                        + 'np': Return Numpy np.ndarray objects.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.encode.*kwargs * *kwargs ‚Äî Passed along to the .tokenize() method.

                    Returns

                    list[int], torch.Tensor, tf.Tensor or np.ndarray

                  The tokenized ids of the text.

              Converts a string to a sequence of ids (integer), using the tokenizer and vocabulary.

              Same as doing self.convert_tokens_to_ids(self.tokenize(text)).

                push_to_hub

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/utils/hub.py#L838

                ( repo_id : str use_temp_dir : typing.Optional[bool] = None commit_message : typing.Optional[str] = None private : typing.Optional[bool] = None token : typing.Union[bool, str, NoneType] = None max_shard_size : typing.Union[str, int, NoneType] = '5GB' create_pr : bool = False safe_serialization : bool = True revision : typing.Optional[str] = None commit_description : typing.Optional[str] = None tags : typing.Optional[list[str]] = None **deprecated_kwargs )

                    Expand 11 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.repo_id repo_id ( str ) ‚Äî The name of the repository you want to push your tokenizer to. It should contain your organization name when pushing to a given organization.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.use_temp_dir use_temp_dir ( bool , optional ) ‚Äî Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub. Will default to True if there is no directory named like repo_id , False otherwise.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.commit_message commit_message ( str , optional ) ‚Äî Message to commit while pushing. Will default to "Upload tokenizer" .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.private private ( bool , optional ) ‚Äî Whether to make the repo private. If None (default), the repo will be public unless the organization‚Äôs default is private. This value is ignored if the repo already exists.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.token token ( bool or str , optional ) ‚Äî The token to use as HTTP bearer authorization for remote files. If True , will use the token generated when running huggingface-cli login (stored in ~/.huggingface ). Will default to True if repo_url is not specified.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.max_shard_size max_shard_size ( int or str , optional , defaults to "5GB" ) ‚Äî Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size lower than this size. If expressed as a string, needs to be digits followed by a unit (like "5MB" ). We default it to "5GB" so that users can easily load models on free-tier Google Colab instances without any CPU OOM issues.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.create_pr create_pr ( bool , optional , defaults to False ) ‚Äî Whether or not to create a PR with the uploaded files or directly commit.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.safe_serialization safe_serialization ( bool , optional , defaults to True ) ‚Äî Whether or not to convert the model weights in safetensors format for safer serialization.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.revision revision ( str , optional ) ‚Äî Branch to push the uploaded files to.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.commit_description commit_description ( str , optional ) ‚Äî The description of the commit that will be created
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.tags tags ( list[str] , optional ) ‚Äî List of tags to push on the Hub.

              Upload the tokenizer files to the ü§ó Model Hub.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.push_to_hub.example

                Examples:

                      Copied
                  from transformers import AutoTokenizer
                  
                  tokenizer = AutoTokenizer.from_pretrained("google-bert/bert-base-cased")
                  
                  # Push the tokenizer to your namespace with the name "my-finetuned-bert".
                  tokenizer.push_to_hub("my-finetuned-bert")
                  
                  # Push the tokenizer to an organization with the name "my-finetuned-bert".
                  tokenizer.push_to_hub("huggingface/my-finetuned-bert")

                convert_ids_to_tokens

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.convert_ids_to_tokens < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils.py#L1042

                ( ids : typing.Union[int, list[int]] skip_special_tokens : bool = False ) ‚Üí str or list[str]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.convert_ids_to_tokens.ids ids ( int or list[int] ) ‚Äî The token id (or token ids) to convert to tokens.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.convert_ids_to_tokens.skip_special_tokens skip_special_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not to remove special tokens in the decoding.

                    Returns

                    str or list[str]

                  The decoded token(s).

              Converts a single index or a sequence of indices in a token or a sequence of tokens, using the vocabulary and added tokens.

                convert_tokens_to_ids

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.convert_tokens_to_ids < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils.py#L710

                ( tokens : typing.Union[str, list[str]] ) ‚Üí int or list[int]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.convert_tokens_to_ids.tokens tokens ( str or list[str] ) ‚Äî One or several token(s) to convert to token id(s).

                    Returns

                    int or list[int]

                  The token id or list of token ids.

              Converts a token string (or a sequence of tokens) in a single integer id (or a sequence of ids), using the vocabulary.

                get_added_vocab

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.get_added_vocab < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils.py#L487

                ( ) ‚Üí dict[str, int]

                    Returns

                    dict[str, int]

                  The added tokens.

              Returns the added tokens in the vocabulary as a dictionary of token to index. Results might be different from the fast call because for now we always add the tokens even if they are already in the vocabulary. This is something we should change.

                num_special_tokens_to_add

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.num_special_tokens_to_add < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils.py#L598

                ( pair : bool = False ) ‚Üí int

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.num_special_tokens_to_add.pair pair ( bool , optional , defaults to False ) ‚Äî Whether the number of added tokens should be computed in the case of a sequence pair or a single sequence.

                    Returns

                    int

                  Number of special tokens added to sequences.

              Returns the number of added tokens when encoding a sequence with special tokens.

                This encodes a dummy input and checks the number of added tokens, and is therefore not efficient. Do not put this inside your training loop.

                prepare_for_tokenization

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.prepare_for_tokenization < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils.py#L982

                ( text : str is_split_into_words : bool = False **kwargs ) ‚Üí tuple[str, dict[str, Any]]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.prepare_for_tokenization.text text ( str ) ‚Äî The text to prepare.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.prepare_for_tokenization.is_split_into_words is_split_into_words ( bool , optional , defaults to False ) ‚Äî Whether or not the input is already pre-tokenized (e.g., split into words). If set to True , the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.prepare_for_tokenization.kwargs kwargs ( dict[str, Any] , optional ) ‚Äî Keyword arguments to use for the tokenization.

                    Returns

                    tuple[str, dict[str, Any]]

                  The prepared text and the unused kwargs.

              Performs any necessary transformations before tokenization.

              This method should pop the arguments from kwargs and return the remaining kwargs as well. We test the kwargs at the end of the encoding process to be sure all the arguments have been used.

                tokenize

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.tokenize < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils.py#L621

                ( text : str **kwargs ) ‚Üí list[str]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.tokenize.text text ( str ) ‚Äî The sequence to be encoded.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizer.tokenize.*kwargs * *kwargs (additional keyword arguments) ‚Äî Passed along to the model-specific prepare_for_tokenization preprocessing method.

                    Returns

                    list[str]

                  The list of tokens.

              Converts a string into a sequence of tokens, using the tokenizer.

              Split in words for word-based vocabulary or sub-words for sub-word-based vocabularies (BPE/SentencePieces/WordPieces). Takes care of added tokens.

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast PreTrainedTokenizerFast

          The PreTrainedTokenizerFast: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast depend on the tokenizers: https://huggingface.co/docs/tokenizers library. The tokenizers obtained from the ü§ó tokenizers library can be loaded very simply into ü§ó transformers. Take a look at the Using tokenizers from ü§ó tokenizers: https://huggingface.co/docs/transformers/v4.53.1/en/fast_tokenizers page to understand how this is done.

              class transformers. PreTrainedTokenizerFast

              : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_fast.py#L81

              ( *args **kwargs )

                  Expand 17 parameters

                Parameters

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.model_max_length model_max_length ( int , optional ) ‚Äî The maximum length (in number of tokens) for the inputs to the transformer model. When the tokenizer is loaded with from_pretrained(): https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.from_pretrained , this will be set to the value stored for the associated model in max_model_input_sizes (see above). If no value is provided, will default to VERY_LARGE_INTEGER ( int(1e30) ).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.padding_side padding_side ( str , optional ) ‚Äî The side on which the model should have padding applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is picked from the class attribute of the same name.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.truncation_side truncation_side ( str , optional ) ‚Äî The side on which the model should have truncation applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is picked from the class attribute of the same name.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.chat_template chat_template ( str , optional ) ‚Äî A Jinja template string that will be used to format lists of chat messages. See https://huggingface.co/docs/transformers/chat_templating: https://huggingface.co/docs/transformers/chat_templating for a full description.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.model_input_names model_input_names ( list[string] , optional ) ‚Äî The list of inputs accepted by the forward pass of the model (like "token_type_ids" or "attention_mask" ). Default value is picked from the class attribute of the same name.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.bos_token bos_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing the beginning of a sentence. Will be associated to self.bos_token and self.bos_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.eos_token eos_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing the end of a sentence. Will be associated to self.eos_token and self.eos_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.unk_token unk_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing an out-of-vocabulary token. Will be associated to self.unk_token and self.unk_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.sep_token sep_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token separating two different sentences in the same input (used by BERT for instance). Will be associated to self.sep_token and self.sep_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.pad_token pad_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token used to make arrays of tokens the same size for batching purpose. Will then be ignored by attention mechanisms or loss computation. Will be associated to self.pad_token and self.pad_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.cls_token cls_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing the class of the input (used by BERT for instance). Will be associated to self.cls_token and self.cls_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.mask_token mask_token ( str or tokenizers.AddedToken , optional ) ‚Äî A special token representing a masked token (used by masked-language modeling pretraining objectives, like BERT). Will be associated to self.mask_token and self.mask_token_id .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.additional_special_tokens additional_special_tokens (tuple or list of str or tokenizers.AddedToken , optional ) ‚Äî A tuple or a list of additional special tokens. Add them here to ensure they are skipped when decoding with skip_special_tokens is set to True. If they are not part of the vocabulary, they will be added at the end of the vocabulary.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.clean_up_tokenization_spaces clean_up_tokenization_spaces ( bool , optional , defaults to True ) ‚Äî Whether or not the model should cleanup the spaces that were added when splitting the input text during the tokenization process.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.split_special_tokens split_special_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not the special tokens should be split during the tokenization process. Passing will affect the internal state of the tokenizer. The default behavior is to not split special tokens. This means that if <s> is the bos_token , then tokenizer.tokenize("<s>") = ['<s> ]. Otherwise, if split_special_tokens=True , then tokenizer.tokenize("<s>") will be give ['<','s', '>'] .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.tokenizer_object tokenizer_object ( tokenizers.Tokenizer ) ‚Äî A tokenizers.Tokenizer object from ü§ó tokenizers to instantiate from. See Using tokenizers from ü§ó tokenizers: https://huggingface.co/docs/transformers/v4.53.1/en/fast_tokenizers for more information.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.tokenizer_file tokenizer_file ( str ) ‚Äî A path to a local JSON file representing a previously serialized tokenizers.Tokenizer object from ü§ó tokenizers.

            Base class for all fast tokenizers (wrapping HuggingFace tokenizers library).

            Inherits from PreTrainedTokenizerBase: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase .

            Handles all the shared methods for tokenization and special tokens, as well as methods for downloading/caching/loading pretrained tokenizers, as well as adding tokens to the vocabulary.

            This class also contains the added tokens in a unified way on top of all tokenizers so we don‚Äôt have to handle the specific vocabulary augmentation methods of the various underlying dictionary structures (BPE, sentencepiece‚Ä¶).

            Class attributes (overridden by derived classes)

              * vocab_files_names (dict[str, str]) ‚Äî A dictionary with, as keys, the __init__ keyword name of each vocabulary file required by the model, and as associated values, the filename for saving the associated file (string).
              * pretrained_vocab_files_map (dict[str, dict[str, str]]) ‚Äî A dictionary of dictionaries, with the high-level keys being the __init__ keyword name of each vocabulary file required by the model, the low-level being the short-cut-names of the pretrained models with, as associated values, the url to the associated pretrained vocabulary file.
              * model_input_names (list[str]) ‚Äî A list of inputs expected in the forward pass of the model.
              * padding_side (str) ‚Äî The default value for the side on which the model should have padding applied. Should be 'right' or 'left'.
              * truncation_side (str) ‚Äî The default value for the side on which the model should have truncation applied. Should be 'right' or 'left'.

                __call__

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__ < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L2772

                ( text : typing.Union[str, list[str], list[list[str]], NoneType] = None text_pair : typing.Union[str, list[str], list[list[str]], NoneType] = None text_target : typing.Union[str, list[str], list[list[str]], NoneType] = None text_pair_target : typing.Union[str, list[str], list[list[str]], NoneType] = None add_special_tokens : bool = True padding : typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation : typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy, NoneType] = None max_length : typing.Optional[int] = None stride : int = 0 is_split_into_words : bool = False pad_to_multiple_of : typing.Optional[int] = None padding_side : typing.Optional[str] = None return_tensors : typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None return_token_type_ids : typing.Optional[bool] = None return_attention_mask : typing.Optional[bool] = None return_overflowing_tokens : bool = False return_special_tokens_mask : bool = False return_offsets_mapping : bool = False return_length : bool = False verbose : bool = True **kwargs ) ‚Üí BatchEncoding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding

                    Expand 21 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.text text ( str , list[str] , list[list[str]] , optional ) ‚Äî The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.text_pair text_pair ( str , list[str] , list[list[str]] , optional ) ‚Äî The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.text_target text_target ( str , list[str] , list[list[str]] , optional ) ‚Äî The sequence or batch of sequences to be encoded as target texts. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.text_pair_target text_pair_target ( str , list[str] , list[list[str]] , optional ) ‚Äî The sequence or batch of sequences to be encoded as target texts. Each sequence can be a string or a list of strings (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set is_split_into_words=True (to lift the ambiguity with a batch of sequences).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.add_special_tokens add_special_tokens ( bool , optional , defaults to True ) ‚Äî Whether or not to add special tokens when encoding the sequences. This will use the underlying PretrainedTokenizerBase.build_inputs_with_special_tokens function, which defines which tokens are automatically added to the input ids. This is useful if you want to add bos or eos tokens automatically.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.padding padding ( bool , str or PaddingStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.utils.PaddingStrategy , optional , defaults to False ) ‚Äî Activates and controls padding. Accepts the following values:

                        + True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence is provided).
                        + 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided.
                        + False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.truncation truncation ( bool , str or TruncationStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy , optional , defaults to False ) ‚Äî Activates and controls truncation. Accepts the following values:

                        + True or 'longest_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will truncate token by token, removing a token from the longest sequence in the pair if a pair of sequences (or a batch of pairs) is provided.
                        + 'only_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
                        + 'only_second': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
                        + False or 'do_not_truncate' (default): No truncation (i.e., can output batch with sequence lengths greater than the model maximum admissible input size).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.max_length max_length ( int , optional ) ‚Äî Controls the maximum length to use by one of the truncation/padding parameters.

                      If left unset or set to None, this will use the predefined model maximum length if a maximum length is required by one of the truncation/padding parameters. If the model has no specific maximum input length (like XLNet) truncation/padding to a maximum length will be deactivated.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.stride stride ( int , optional , defaults to 0) ‚Äî If set to a number along with max_length , the overflowing tokens returned when return_overflowing_tokens=True will contain some tokens from the end of the truncated sequence returned to provide some overlap between truncated and overflowing sequences. The value of this argument defines the number of overlapping tokens.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.is_split_into_words is_split_into_words ( bool , optional , defaults to False ) ‚Äî Whether or not the input is already pre-tokenized (e.g., split into words). If set to True , the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.pad_to_multiple_of pad_to_multiple_of ( int , optional ) ‚Äî If set will pad the sequence to a multiple of the provided value. Requires padding to be activated. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.padding_side padding_side ( str , optional ) ‚Äî The side on which the model should have padding applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is picked from the class attribute of the same name.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.return_tensors return_tensors ( str or TensorType: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.TensorType , optional ) ‚Äî If set, will return tensors instead of list of python integers. Acceptable values are:

                        + 'tf': Return TensorFlow tf.constant objects.
                        + 'pt': Return PyTorch torch.Tensor objects.
                        + 'np': Return Numpy np.ndarray objects.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.return_token_type_ids return_token_type_ids ( bool , optional ) ‚Äî Whether to return token type IDs. If left to the default, will return the token type IDs according to the specific tokenizer‚Äôs default, defined by the return_outputs attribute.

                      What are token type IDs?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#token-type-ids

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.return_attention_mask return_attention_mask ( bool , optional ) ‚Äî Whether to return the attention mask. If left to the default, will return the attention mask according to the specific tokenizer‚Äôs default, defined by the return_outputs attribute.

                      What are attention masks?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#attention-mask

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.return_overflowing_tokens return_overflowing_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not to return overflowing token sequences. If a pair of sequences of input ids (or a batch of pairs) is provided with truncation_strategy = longest_first or True , an error is raised instead of returning overflowing tokens.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.return_special_tokens_mask return_special_tokens_mask ( bool , optional , defaults to False ) ‚Äî Whether or not to return special tokens mask information.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.return_offsets_mapping return_offsets_mapping ( bool , optional , defaults to False ) ‚Äî Whether or not to return (char_start, char_end) for each token.

                      This is only available on fast tokenizers inheriting from PreTrainedTokenizerFast: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast , if using Python‚Äôs tokenizer, this method will raise NotImplementedError.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.return_length return_length ( bool , optional , defaults to False ) ‚Äî Whether or not to return the lengths of the encoded inputs.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.verbose verbose ( bool , optional , defaults to True ) ‚Äî Whether or not to print more information and warnings.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__.*kwargs * *kwargs ‚Äî passed to the self.tokenize() method

                    Returns

                    BatchEncoding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding

                  A BatchEncoding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding with the following fields:

                    * input_ids ‚Äî List of token ids to be fed to a model.

                      What are input IDs?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#input-ids

                    * token_type_ids ‚Äî List of token type ids to be fed to a model (when return_token_type_ids=True or if ‚Äútoken_type_ids‚Äù is in self.model_input_names).

                      What are token type IDs?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#token-type-ids

                    * attention_mask ‚Äî List of indices specifying which tokens should be attended to by the model (when return_attention_mask=True or if ‚Äúattention_mask‚Äù is in self.model_input_names).

                      What are attention masks?: https://huggingface.co/docs/transformers/v4.53.1/en/glossary#attention-mask

                    * overflowing_tokens ‚Äî List of overflowing tokens sequences (when a max_length is specified and return_overflowing_tokens=True).

                    * num_truncated_tokens ‚Äî Number of tokens truncated (when a max_length is specified and return_overflowing_tokens=True).

                    * special_tokens_mask ‚Äî List of 0s and 1s, with 1 specifying added special tokens and 0 specifying regular sequence tokens (when add_special_tokens=True and return_special_tokens_mask=True).

                    * length ‚Äî The length of the inputs (when return_length=True)

              Main method to tokenize and prepare for the model one or several sequence(s) or one or several pair(s) of sequences.

                add_tokens

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.add_tokens < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L995

                ( new_tokens : typing.Union[str, tokenizers.AddedToken, collections.abc.Sequence[typing.Union[str, tokenizers.AddedToken]]] special_tokens : bool = False ) ‚Üí int

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.add_tokens.new_tokens new_tokens ( str , tokenizers.AddedToken or a sequence of str or tokenizers.AddedToken ) ‚Äî Tokens are only added if they are not already in the vocabulary. tokenizers.AddedToken wraps a string token to let you personalize its behavior: whether this token should only match against a single word, whether this token should strip all potential whitespaces on the left side, whether this token should strip all potential whitespaces on the right side, etc.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.add_tokens.special_tokens special_tokens ( bool , optional , defaults to False ) ‚Äî Can be used to specify if the token is a special token. This mostly change the normalization behavior (special tokens like CLS or [MASK] are usually not lower-cased for instance).

                      See details for tokenizers.AddedToken in HuggingFace tokenizers library.

                    Returns

                    int

                  Number of tokens added to the vocabulary.

              Add a list of new tokens to the tokenizer class. If the new tokens are not in the vocabulary, they are added to it with indices starting from length of the current vocabulary and will be isolated before the tokenization algorithm is applied. Added tokens and tokens from the vocabulary of the tokenization algorithm are therefore not treated in the same way.

              Note, when adding new tokens to the vocabulary, you should make sure to also resize the token embedding matrix of the model so that its embedding matrix matches the tokenizer.

              In order to do that, please use the resize_token_embeddings(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model#transformers.PreTrainedModel.resize_token_embeddings method.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.add_tokens.example

                Examples:

                      Copied
                  # Let's see how to increase the vocabulary of Bert model and tokenizer
                  tokenizer = BertTokenizerFast.from_pretrained("google-bert/bert-base-uncased")
                  model = BertModel.from_pretrained("google-bert/bert-base-uncased")
                  
                  num_added_toks = tokenizer.add_tokens(["new_tok1", "my_new-tok2"])
                  print("We have added", num_added_toks, "tokens")
                  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e., the length of the tokenizer.
                  model.resize_token_embeddings(len(tokenizer))

                add_special_tokens

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.add_special_tokens < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L891

                ( special_tokens_dict : dict replace_additional_special_tokens = True ) ‚Üí int

                    Expand 2 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.add_special_tokens.special_tokens_dict special_tokens_dict (dictionary str to str , tokenizers.AddedToken , or Sequence[Union[str, AddedToken]] ) ‚Äî Keys should be in the list of predefined special attributes: [ bos_token , eos_token , unk_token , sep_token , pad_token , cls_token , mask_token , additional_special_tokens ].

                      Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the unk_token to them).

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.add_special_tokens.replace_additional_special_tokens replace_additional_special_tokens ( bool , optional ,, defaults to True ) ‚Äî If True , the existing list of additional special tokens will be replaced by the list provided in special_tokens_dict . Otherwise, self._special_tokens_map["additional_special_tokens"] is just extended. In the former case, the tokens will NOT be removed from the tokenizer‚Äôs full vocabulary - they are only being flagged as non-special tokens. Remember, this only affects which tokens are skipped during decoding, not the added_tokens_encoder and added_tokens_decoder . This means that the previous additional_special_tokens are still added tokens, and will not be split by the model.

                    Returns

                    int

                  Number of tokens added to the vocabulary.

              Add a dictionary of special tokens (eos, pad, cls, etc.) to the encoder and link them to class attributes. If special tokens are NOT in the vocabulary, they are added to it (indexed starting from the last index of the current vocabulary).

              When adding new tokens to the vocabulary, you should make sure to also resize the token embedding matrix of the model so that its embedding matrix matches the tokenizer.

              In order to do that, please use the resize_token_embeddings(): https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/model#transformers.PreTrainedModel.resize_token_embeddings method.

              Using add_special_tokens will ensure your special tokens can be used in several ways:

                * Special tokens can be skipped when decoding using skip_special_tokens = True.
                * Special tokens are carefully handled by the tokenizer (they are never split), similar to AddedTokens.
                * You can easily refer to special tokens using tokenizer class attributes like tokenizer.cls_token. This makes it easy to develop model-agnostic training and fine-tuning scripts.

              When possible, special tokens are already registered for provided pretrained models (for instance BertTokenizer: https://huggingface.co/docs/transformers/v4.53.1/en/model_doc/bert#transformers.BertTokenizer cls_token is already registered to be '[CLS]' and XLM‚Äôs one is also registered to be '</s>').

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.add_special_tokens.example

                Examples:

                      Copied
                  # Let's see how to add a new classification token to GPT-2
                  tokenizer = GPT2Tokenizer.from_pretrained("openai-community/gpt2")
                  model = GPT2Model.from_pretrained("openai-community/gpt2")
                  
                  special_tokens_dict = {"cls_token": "<CLS>"}
                  
                  num_added_toks = tokenizer.add_special_tokens(special_tokens_dict)
                  print("We have added", num_added_toks, "tokens")
                  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e., the length of the tokenizer.
                  model.resize_token_embeddings(len(tokenizer))
                  
                  assert tokenizer.cls_token == "<CLS>"

                apply_chat_template

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L1519

                ( conversation : typing.Union[list[dict[str, str]], list[list[dict[str, str]]]] tools : typing.Optional[list[typing.Union[dict, typing.Callable]]] = None documents : typing.Optional[list[dict[str, str]]] = None chat_template : typing.Optional[str] = None add_generation_prompt : bool = False continue_final_message : bool = False tokenize : bool = True padding : typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation : bool = False max_length : typing.Optional[int] = None return_tensors : typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None return_dict : bool = False return_assistant_tokens_mask : bool = False tokenizer_kwargs : typing.Optional[dict[str, typing.Any]] = None **kwargs ) ‚Üí Union[list[int], Dict]

                    Expand 15 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.conversation conversation (Union[list[dict[str, str]], list[list[dict[str, str]]]]) ‚Äî A list of dicts with ‚Äúrole‚Äù and ‚Äúcontent‚Äù keys, representing the chat history so far.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.tools tools ( list[Union[Dict, Callable]] , optional ) ‚Äî A list of tools (callable functions) that will be accessible to the model. If the template does not support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema, giving the name, description and argument types for the tool. See our chat templating guide: https://huggingface.co/docs/transformers/main/en/chat_templating#automated-function-conversion-for-tool-use for more information.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.documents documents ( list[dict[str, str]] , optional ) ‚Äî A list of dicts representing documents that will be accessible to the model if it is performing RAG (retrieval-augmented generation). If the template does not support RAG, this argument will have no effect. We recommend that each document should be a dict containing ‚Äútitle‚Äù and ‚Äútext‚Äù keys. Please see the RAG section of the chat templating guide: https://huggingface.co/docs/transformers/main/en/chat_templating#arguments-for-RAG for examples of passing documents with chat templates.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.chat_template chat_template ( str , optional ) ‚Äî A Jinja template to use for this conversion. It is usually not necessary to pass anything to this argument, as the model‚Äôs template will be used by default.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.add_generation_prompt add_generation_prompt (bool, optional ) ‚Äî If this is set, a prompt with the token(s) that indicate the start of an assistant message will be appended to the formatted output. This is useful when you want to generate a response from the model. Note that this argument will be passed to the chat template, and so it must be supported in the template for this argument to have any effect.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.continue_final_message continue_final_message (bool, optional ) ‚Äî If this is set, the chat will be formatted so that the final message in the chat is open-ended, without any EOS tokens. The model will continue this message rather than starting a new one. This allows you to ‚Äúprefill‚Äù part of the model‚Äôs response for it. Cannot be used at the same time as add_generation_prompt .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.tokenize tokenize ( bool , defaults to True ) ‚Äî Whether to tokenize the output. If False , the output will be a string.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.padding padding ( bool , str or PaddingStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.utils.PaddingStrategy , optional , defaults to False ) ‚Äî Select a strategy to pad the returned sequences (according to the model‚Äôs padding side and padding index) among:

                        + True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence if provided).
                        + 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided.
                        + False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.truncation truncation ( bool , defaults to False ) ‚Äî Whether to truncate sequences at the maximum length. Has no effect if tokenize is False .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.max_length max_length ( int , optional ) ‚Äî Maximum length (in tokens) to use for padding or truncation. Has no effect if tokenize is False . If not specified, the tokenizer‚Äôs max_length attribute will be used as a default.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.return_tensors return_tensors ( str or TensorType: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.TensorType , optional ) ‚Äî If set, will return tensors of a particular framework. Has no effect if tokenize is False . Acceptable values are:

                        + 'tf': Return TensorFlow tf.Tensor objects.
                        + 'pt': Return PyTorch torch.Tensor objects.
                        + 'np': Return NumPy np.ndarray objects.
                        + 'jax': Return JAX jnp.ndarray objects.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.return_dict return_dict ( bool , defaults to False ) ‚Äî Whether to return a dictionary with named outputs. Has no effect if tokenize is False .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.tokenizer_kwargs tokenizer_kwargs ( dict[str -- Any] , optional ): Additional kwargs to pass to the tokenizer.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.return_assistant_tokens_mask return_assistant_tokens_mask ( bool , defaults to False ) ‚Äî Whether to return a mask of the assistant generated tokens. For tokens generated by the assistant, the mask will contain 1. For user and system tokens, the mask will contain 0. This functionality is only available for chat templates that support it via the {% generation %} keyword.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.apply_chat_template.*kwargs * *kwargs ‚Äî Additional kwargs to pass to the template renderer. Will be accessible by the chat template.

                    Returns

                    Union[list[int], Dict]

                  A list of token ids representing the tokenized chat so far, including control tokens. This output is ready to pass to the model, either directly or via methods like generate(). If return_dict is set, will return a dict of tokenizer outputs instead.

              Converts a list of dictionaries with "role" and "content" keys to a list of token ids. This method is intended for use with chat models, and will read the tokenizer‚Äôs chat_template attribute to determine the format and control tokens to use when converting.

                batch_decode

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.batch_decode < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L3777

                ( sequences : typing.Union[list[int], list[list[int]], ForwardRef('np.ndarray'), ForwardRef('torch.Tensor'), ForwardRef('tf.Tensor')] skip_special_tokens : bool = False clean_up_tokenization_spaces : typing.Optional[bool] = None **kwargs ) ‚Üí list[str]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.batch_decode.sequences sequences ( Union[list[int], list[list[int]], np.ndarray, torch.Tensor, tf.Tensor] ) ‚Äî List of tokenized input ids. Can be obtained using the __call__ method.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.batch_decode.skip_special_tokens skip_special_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not to remove special tokens in the decoding.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.batch_decode.clean_up_tokenization_spaces clean_up_tokenization_spaces ( bool , optional ) ‚Äî Whether or not to clean up the tokenization spaces. If None , will default to self.clean_up_tokenization_spaces .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.batch_decode.kwargs kwargs (additional keyword arguments, optional ) ‚Äî Will be passed to the underlying model specific decode method.

                    Returns

                    list[str]

                  The list of decoded sentences.

              Convert a list of lists of token ids into a list of strings by calling decode.

                decode

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.decode < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L3811

                ( token_ids : typing.Union[int, list[int], ForwardRef('np.ndarray'), ForwardRef('torch.Tensor'), ForwardRef('tf.Tensor')] skip_special_tokens : bool = False clean_up_tokenization_spaces : typing.Optional[bool] = None **kwargs ) ‚Üí str

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.decode.token_ids token_ids ( Union[int, list[int], np.ndarray, torch.Tensor, tf.Tensor] ) ‚Äî List of tokenized input ids. Can be obtained using the __call__ method.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.decode.skip_special_tokens skip_special_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not to remove special tokens in the decoding.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.decode.clean_up_tokenization_spaces clean_up_tokenization_spaces ( bool , optional ) ‚Äî Whether or not to clean up the tokenization spaces. If None , will default to self.clean_up_tokenization_spaces .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.decode.kwargs kwargs (additional keyword arguments, optional ) ‚Äî Will be passed to the underlying model specific decode method.

                    Returns

                    str

                  The decoded sentence.

              Converts a sequence of ids in a string, using the tokenizer and vocabulary with options to remove special tokens and clean up tokenization spaces.

              Similar to doing self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids)).

                encode

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L2611

                ( text : typing.Union[str, list[str], list[int]] text_pair : typing.Union[str, list[str], list[int], NoneType] = None add_special_tokens : bool = True padding : typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False truncation : typing.Union[bool, str, transformers.tokenization_utils_base.TruncationStrategy, NoneType] = None max_length : typing.Optional[int] = None stride : int = 0 padding_side : typing.Optional[str] = None return_tensors : typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None **kwargs ) ‚Üí list[int] , torch.Tensor , tf.Tensor or np.ndarray

                    Expand 12 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.text text ( str , list[str] or list[int] ) ‚Äî The first sequence to be encoded. This can be a string, a list of strings (tokenized string using the tokenize method) or a list of integers (tokenized string ids using the convert_tokens_to_ids method).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.text_pair text_pair ( str , list[str] or list[int] , optional ) ‚Äî Optional second sequence to be encoded. This can be a string, a list of strings (tokenized string using the tokenize method) or a list of integers (tokenized string ids using the convert_tokens_to_ids method).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.add_special_tokens add_special_tokens ( bool , optional , defaults to True ) ‚Äî Whether or not to add special tokens when encoding the sequences. This will use the underlying PretrainedTokenizerBase.build_inputs_with_special_tokens function, which defines which tokens are automatically added to the input ids. This is useful if you want to add bos or eos tokens automatically.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.padding padding ( bool , str or PaddingStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.utils.PaddingStrategy , optional , defaults to False ) ‚Äî Activates and controls padding. Accepts the following values:

                        + True or 'longest': Pad to the longest sequence in the batch (or no padding if only a single sequence is provided).
                        + 'max_length': Pad to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided.
                        + False or 'do_not_pad' (default): No padding (i.e., can output a batch with sequences of different lengths).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.truncation truncation ( bool , str or TruncationStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy , optional , defaults to False ) ‚Äî Activates and controls truncation. Accepts the following values:

                        + True or 'longest_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will truncate token by token, removing a token from the longest sequence in the pair if a pair of sequences (or a batch of pairs) is provided.
                        + 'only_first': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the first sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
                        + 'only_second': Truncate to a maximum length specified with the argument max_length or to the maximum acceptable input length for the model if that argument is not provided. This will only truncate the second sequence of a pair if a pair of sequences (or a batch of pairs) is provided.
                        + False or 'do_not_truncate' (default): No truncation (i.e., can output batch with sequence lengths greater than the model maximum admissible input size).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.max_length max_length ( int , optional ) ‚Äî Controls the maximum length to use by one of the truncation/padding parameters.

                      If left unset or set to None, this will use the predefined model maximum length if a maximum length is required by one of the truncation/padding parameters. If the model has no specific maximum input length (like XLNet) truncation/padding to a maximum length will be deactivated.

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.stride stride ( int , optional , defaults to 0) ‚Äî If set to a number along with max_length , the overflowing tokens returned when return_overflowing_tokens=True will contain some tokens from the end of the truncated sequence returned to provide some overlap between truncated and overflowing sequences. The value of this argument defines the number of overlapping tokens.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.is_split_into_words is_split_into_words ( bool , optional , defaults to False ) ‚Äî Whether or not the input is already pre-tokenized (e.g., split into words). If set to True , the tokenizer assumes the input is already split into words (for instance, by splitting it on whitespace) which it will tokenize. This is useful for NER or token classification.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.pad_to_multiple_of pad_to_multiple_of ( int , optional ) ‚Äî If set will pad the sequence to a multiple of the provided value. Requires padding to be activated. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.padding_side padding_side ( str , optional ) ‚Äî The side on which the model should have padding applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is picked from the class attribute of the same name.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.return_tensors return_tensors ( str or TensorType: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.TensorType , optional ) ‚Äî If set, will return tensors instead of list of python integers. Acceptable values are:

                        + 'tf': Return TensorFlow tf.constant objects.
                        + 'pt': Return PyTorch torch.Tensor objects.
                        + 'np': Return Numpy np.ndarray objects.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode.*kwargs * *kwargs ‚Äî Passed along to the .tokenize() method.

                    Returns

                    list[int], torch.Tensor, tf.Tensor or np.ndarray

                  The tokenized ids of the text.

              Converts a string to a sequence of ids (integer), using the tokenizer and vocabulary.

              Same as doing self.convert_tokens_to_ids(self.tokenize(text)).

                push_to_hub

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/utils/hub.py#L838

                ( repo_id : str use_temp_dir : typing.Optional[bool] = None commit_message : typing.Optional[str] = None private : typing.Optional[bool] = None token : typing.Union[bool, str, NoneType] = None max_shard_size : typing.Union[str, int, NoneType] = '5GB' create_pr : bool = False safe_serialization : bool = True revision : typing.Optional[str] = None commit_description : typing.Optional[str] = None tags : typing.Optional[list[str]] = None **deprecated_kwargs )

                    Expand 11 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.repo_id repo_id ( str ) ‚Äî The name of the repository you want to push your tokenizer to. It should contain your organization name when pushing to a given organization.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.use_temp_dir use_temp_dir ( bool , optional ) ‚Äî Whether or not to use a temporary directory to store the files saved before they are pushed to the Hub. Will default to True if there is no directory named like repo_id , False otherwise.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.commit_message commit_message ( str , optional ) ‚Äî Message to commit while pushing. Will default to "Upload tokenizer" .
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.private private ( bool , optional ) ‚Äî Whether to make the repo private. If None (default), the repo will be public unless the organization‚Äôs default is private. This value is ignored if the repo already exists.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.token token ( bool or str , optional ) ‚Äî The token to use as HTTP bearer authorization for remote files. If True , will use the token generated when running huggingface-cli login (stored in ~/.huggingface ). Will default to True if repo_url is not specified.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.max_shard_size max_shard_size ( int or str , optional , defaults to "5GB" ) ‚Äî Only applicable for models. The maximum size for a checkpoint before being sharded. Checkpoints shard will then be each of size lower than this size. If expressed as a string, needs to be digits followed by a unit (like "5MB" ). We default it to "5GB" so that users can easily load models on free-tier Google Colab instances without any CPU OOM issues.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.create_pr create_pr ( bool , optional , defaults to False ) ‚Äî Whether or not to create a PR with the uploaded files or directly commit.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.safe_serialization safe_serialization ( bool , optional , defaults to True ) ‚Äî Whether or not to convert the model weights in safetensors format for safer serialization.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.revision revision ( str , optional ) ‚Äî Branch to push the uploaded files to.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.commit_description commit_description ( str , optional ) ‚Äî The description of the commit that will be created
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.tags tags ( list[str] , optional ) ‚Äî List of tags to push on the Hub.

              Upload the tokenizer files to the ü§ó Model Hub.

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.push_to_hub.example

                Examples:

                      Copied
                  from transformers import AutoTokenizer
                  
                  tokenizer = AutoTokenizer.from_pretrained("google-bert/bert-base-cased")
                  
                  # Push the tokenizer to your namespace with the name "my-finetuned-bert".
                  tokenizer.push_to_hub("my-finetuned-bert")
                  
                  # Push the tokenizer to an organization with the name "my-finetuned-bert".
                  tokenizer.push_to_hub("huggingface/my-finetuned-bert")

                convert_ids_to_tokens

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.convert_ids_to_tokens < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_fast.py#L406

                ( ids : typing.Union[int, list[int]] skip_special_tokens : bool = False ) ‚Üí str or list[str]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.convert_ids_to_tokens.ids ids ( int or list[int] ) ‚Äî The token id (or token ids) to convert to tokens.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.convert_ids_to_tokens.skip_special_tokens skip_special_tokens ( bool , optional , defaults to False ) ‚Äî Whether or not to remove special tokens in the decoding.

                    Returns

                    str or list[str]

                  The decoded token(s).

              Converts a single index or a sequence of indices in a token or a sequence of tokens, using the vocabulary and added tokens.

                convert_tokens_to_ids

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.convert_tokens_to_ids < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_fast.py#L354

                ( tokens : typing.Union[str, collections.abc.Iterable[str]] ) ‚Üí int or list[int]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.convert_tokens_to_ids.tokens tokens ( str or Iterable[str] ) ‚Äî One or several token(s) to convert to token id(s).

                    Returns

                    int or list[int]

                  The token id or list of token ids.

              Converts a token string (or a sequence of tokens) in a single integer id (or a Iterable of ids), using the vocabulary.

                get_added_vocab

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.get_added_vocab < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_fast.py#L272

                ( ) ‚Üí dict[str, int]

                    Returns

                    dict[str, int]

                  The added tokens.

              Returns the added tokens in the vocabulary as a dictionary of token to index.

                num_special_tokens_to_add

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.num_special_tokens_to_add < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_fast.py#L385

                ( pair : bool = False ) ‚Üí int

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.num_special_tokens_to_add.pair pair ( bool , optional , defaults to False ) ‚Äî Whether the number of added tokens should be computed in the case of a sequence pair or a single sequence.

                    Returns

                    int

                  Number of special tokens added to sequences.

              Returns the number of added tokens when encoding a sequence with special tokens.

                This encodes a dummy input and checks the number of added tokens, and is therefore not efficient. Do not put this inside your training loop.

                set_truncation_and_padding

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.set_truncation_and_padding < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_fast.py#L437

                ( padding_strategy : PaddingStrategy truncation_strategy : TruncationStrategy max_length : int stride : int pad_to_multiple_of : typing.Optional[int] padding_side : typing.Optional[str] )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.set_truncation_and_padding.padding_strategy padding_strategy (PaddingStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.utils.PaddingStrategy ) ‚Äî The kind of padding that will be applied to the input
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.set_truncation_and_padding.truncation_strategy truncation_strategy (TruncationStrategy: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy ) ‚Äî The kind of truncation that will be applied to the input
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.set_truncation_and_padding.max_length max_length ( int ) ‚Äî The maximum size of a sequence.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.set_truncation_and_padding.stride stride ( int ) ‚Äî The stride to use when handling overflow.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.set_truncation_and_padding.pad_to_multiple_of pad_to_multiple_of ( int , optional ) ‚Äî If set will pad the sequence to a multiple of the provided value. This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >= 7.5 (Volta).
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.set_truncation_and_padding.padding_side padding_side ( str , optional ) ‚Äî The side on which the model should have padding applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is picked from the class attribute of the same name.

              Define the truncation and the padding strategies for fast tokenizers (provided by HuggingFace tokenizers library) and restore the tokenizer settings afterwards.

              The provided tokenizer has no padding / truncation strategy before the managed section. If your tokenizer set a padding / truncation strategy before, then it will be reset to no padding / truncation when exiting the managed section.

                train_new_from_iterator

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.train_new_from_iterator < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_fast.py#L744

                ( text_iterator vocab_size length = None new_special_tokens = None special_tokens_map = None **kwargs ) ‚Üí PreTrainedTokenizerFast: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast

                    Expand 6 parameters

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.train_new_from_iterator.text_iterator text_iterator (generator of list[str] ) ‚Äî The training corpus. Should be a generator of batches of texts, for instance a list of lists of texts if you have everything in memory.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.train_new_from_iterator.vocab_size vocab_size ( int ) ‚Äî The size of the vocabulary you want for your tokenizer.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.train_new_from_iterator.length length ( int , optional ) ‚Äî The total number of sequences in the iterator. This is used to provide meaningful progress tracking
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.train_new_from_iterator.new_special_tokens new_special_tokens (list of str or AddedToken , optional ) ‚Äî A list of new special tokens to add to the tokenizer you are training.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.train_new_from_iterator.special_tokens_map special_tokens_map ( dict[str, str] , optional ) ‚Äî If you want to rename some of the special tokens this tokenizer uses, pass along a mapping old special token name to new special token name in this argument.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.train_new_from_iterator.kwargs kwargs ( dict[str, Any] , optional ) ‚Äî Additional keyword arguments passed along to the trainer from the ü§ó Tokenizers library.

                    Returns

                    PreTrainedTokenizerFast: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast

                  A new tokenizer of the same type as the original one, trained on text_iterator.

              Trains a tokenizer on a new corpus with the same defaults (in terms of special tokens or tokenization pipeline) as the current one.

          : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding BatchEncoding

              class transformers. BatchEncoding

              : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L192

              ( data : typing.Optional[dict[str, typing.Any]] = None encoding : typing.Union[tokenizers.Encoding, collections.abc.Sequence[tokenizers.Encoding], NoneType] = None tensor_type : typing.Union[NoneType, str, transformers.utils.generic.TensorType] = None prepend_batch_axis : bool = False n_sequences : typing.Optional[int] = None )

                Parameters

                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.data data ( dict , optional ) ‚Äî Dictionary of lists/arrays/tensors returned by the __call__ / encode_plus / batch_encode_plus methods (‚Äòinput_ids‚Äô, ‚Äòattention_mask‚Äô, etc.).
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.encoding encoding ( tokenizers.Encoding or Sequence[tokenizers.Encoding] , optional ) ‚Äî If the tokenizer is a fast tokenizer which outputs additional information like mapping from word/character space to token space the tokenizers.Encoding instance or list of instance (for batches) hold this information.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.tensor_type tensor_type ( Union[None, str, TensorType] , optional ) ‚Äî You can give a tensor_type here to convert the lists of integers in PyTorch/TensorFlow/Numpy Tensors at initialization.
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.prepend_batch_axis prepend_batch_axis ( bool , optional , defaults to False ) ‚Äî Whether or not to add a batch axis when converting to tensors (see tensor_type above). Note that this parameter has an effect if the parameter tensor_type is set, otherwise has no effect .
                  * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.n_sequences n_sequences ( Optional[int] , optional ) ‚Äî You can give a tensor_type here to convert the lists of integers in PyTorch/TensorFlow/Numpy Tensors at initialization.

            Holds the output of the call(): https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__ , encode_plus(): https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode_plus and batch_encode_plus(): https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.batch_encode_plus methods (tokens, attention_masks, etc).

            This class is derived from a python dictionary and can be used as a dictionary. In addition, this class exposes utility methods to map from word/character space to token space.

                char_to_token

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.char_to_token < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L563

                ( batch_or_char_index : int char_index : typing.Optional[int] = None sequence_index : int = 0 ) ‚Üí int

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.char_to_token.batch_or_char_index batch_or_char_index ( int ) ‚Äî Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of the word in the sequence
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.char_to_token.char_index char_index ( int , optional ) ‚Äî If a batch index is provided in batch_or_token_index , this can be the index of the word in the sequence.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.char_to_token.sequence_index sequence_index ( int , optional , defaults to 0) ‚Äî If pair of sequences are encoded in the batch this can be used to specify which sequence in the pair (0 or 1) the provided character index belongs to.

                    Returns

                    int

                  Index of the token, or None if the char index refers to a whitespace only token and whitespace is trimmed with trim_offsets=True.

              Get the index of the token in the encoded output comprising a character in the original string for a sequence of the batch.

              Can be called as:

                * self.char_to_token(char_index) if batch size is 1
                * self.char_to_token(batch_index, char_index) if batch size is greater or equal to 1

              This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e. words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words.

                char_to_word

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.char_to_word < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L650

                ( batch_or_char_index : int char_index : typing.Optional[int] = None sequence_index : int = 0 ) ‚Üí int or list[int]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.char_to_word.batch_or_char_index batch_or_char_index ( int ) ‚Äî Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of the character in the original string.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.char_to_word.char_index char_index ( int , optional ) ‚Äî If a batch index is provided in batch_or_token_index , this can be the index of the character in the original string.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.char_to_word.sequence_index sequence_index ( int , optional , defaults to 0) ‚Äî If pair of sequences are encoded in the batch this can be used to specify which sequence in the pair (0 or 1) the provided character index belongs to.

                    Returns

                    int or list[int]

                  Index or indices of the associated encoded token(s).

              Get the word in the original string corresponding to a character in the original string of a sequence of the batch.

              Can be called as:

                * self.char_to_word(char_index) if batch size is 1
                * self.char_to_word(batch_index, char_index) if batch size is greater than 1

              This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e. words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words.

                convert_to_tensors

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.convert_to_tensors < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L689

                ( tensor_type : typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None prepend_batch_axis : bool = False )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.convert_to_tensors.tensor_type tensor_type ( str or TensorType: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.TensorType , optional ) ‚Äî The type of tensors to use. If str , should be one of the values of the enum TensorType: https://huggingface.co/docs/transformers/v4.53.1/en/internal/file_utils#transformers.TensorType . If None , no modification is done.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.convert_to_tensors.prepend_batch_axis prepend_batch_axis ( int , optional , defaults to False ) ‚Äî Whether or not to add the batch dimension during the conversion.

              Convert the inner content to tensors.

                sequence_ids

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.sequence_ids < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L327

                ( batch_index : int = 0 ) ‚Üí list[Optional[int]]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.sequence_ids.batch_index batch_index ( int , optional , defaults to 0) ‚Äî The index to access in the batch.

                    Returns

                    list[Optional[int]]

                  A list indicating the sequence id corresponding to each token. Special tokens added by the tokenizer are mapped to None and other tokens are mapped to the index of their corresponding sequence.

              Return a list mapping the tokens to the id of their original sentences:

                * None for special tokens added around or between sequences,
                * 0 for tokens corresponding to words in the first sequence,
                * 1 for tokens corresponding to words in the second sequence when a pair of sequences was jointly encoded.

                to

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.to < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L792

                ( device : typing.Union[str, ForwardRef('torch.device')] non_blocking : bool = False ) ‚Üí BatchEncoding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.to.device device ( str or torch.device ) ‚Äî The device to put the tensors on.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.to.non_blocking non_blocking ( bool ) ‚Äî Whether to perform the copy asynchronously.

                    Returns

                    BatchEncoding: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding

                  The same instance after modification.

              Send all values to device by calling v.to(device, non_blocking=non_blocking) (PyTorch only).

                token_to_chars

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.token_to_chars < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L524

                ( batch_or_token_index : int token_index : typing.Optional[int] = None ) ‚Üí CharSpan: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.CharSpan

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.token_to_chars.batch_or_token_index batch_or_token_index ( int ) ‚Äî Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of the token in the sequence.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.token_to_chars.token_index token_index ( int , optional ) ‚Äî If a batch index is provided in batch_or_token_index , this can be the index of the token or tokens in the sequence.

                    Returns

                    CharSpan: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.CharSpan

                  Span of characters in the original string, or None, if the token (e.g. , ) doesn‚Äôt correspond to any chars in the origin string.

              Get the character span corresponding to an encoded token in a sequence of the batch.

              Character spans are returned as a CharSpan: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.CharSpan with:

                * start ‚Äî Index of the first character in the original string associated to the token.
                * end ‚Äî Index of the character following the last character in the original string associated to the token.

              Can be called as:

                * self.token_to_chars(token_index) if batch size is 1
                * self.token_to_chars(batch_index, token_index) if batch size is greater or equal to 1

                token_to_sequence

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.token_to_sequence < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L394

                ( batch_or_token_index : int token_index : typing.Optional[int] = None ) ‚Üí int

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.token_to_sequence.batch_or_token_index batch_or_token_index ( int ) ‚Äî Index of the sequence in the batch. If the batch only comprises one sequence, this can be the index of the token in the sequence.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.token_to_sequence.token_index token_index ( int , optional ) ‚Äî If a batch index is provided in batch_or_token_index , this can be the index of the token in the sequence.

                    Returns

                    int

                  Index of the word in the input sequence.

              Get the index of the sequence represented by the given token. In the general use case, this method returns 0 for a single sequence or the first sequence of a pair, and 1 for the second sequence of a pair

              Can be called as:

                * self.token_to_sequence(token_index) if batch size is 1
                * self.token_to_sequence(batch_index, token_index) if batch size is greater than 1

              This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e., words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words.

                token_to_word

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.token_to_word < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L433

                ( batch_or_token_index : int token_index : typing.Optional[int] = None ) ‚Üí int

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.token_to_word.batch_or_token_index batch_or_token_index ( int ) ‚Äî Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of the token in the sequence.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.token_to_word.token_index token_index ( int , optional ) ‚Äî If a batch index is provided in batch_or_token_index , this can be the index of the token in the sequence.

                    Returns

                    int

                  Index of the word in the input sequence.

              Get the index of the word corresponding (i.e. comprising) to an encoded token in a sequence of the batch.

              Can be called as:

                * self.token_to_word(token_index) if batch size is 1
                * self.token_to_word(batch_index, token_index) if batch size is greater than 1

              This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e., words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words.

                tokens

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.tokens < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L309

                ( batch_index : int = 0 ) ‚Üí list[str]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.tokens.batch_index batch_index ( int , optional , defaults to 0) ‚Äî The index to access in the batch.

                    Returns

                    list[str]

                  The list of tokens at that index.

              Return the list of tokens (sub-parts of the input strings after word/subword splitting and before conversion to integer indices) at a given batch index (only works for the output of a fast tokenizer).

                word_ids

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_ids < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L375

                ( batch_index : int = 0 ) ‚Üí list[Optional[int]]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_ids.batch_index batch_index ( int , optional , defaults to 0) ‚Äî The index to access in the batch.

                    Returns

                    list[Optional[int]]

                  A list indicating the word corresponding to each token. Special tokens added by the tokenizer are mapped to None and other tokens are mapped to the index of their corresponding word (several tokens will be mapped to the same word index if they are parts of that word).

              Return a list mapping the tokens to their actual word in the initial sentence for a fast tokenizer.

                word_to_chars

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_to_chars < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L605

                ( batch_or_word_index : int word_index : typing.Optional[int] = None sequence_index : int = 0 ) ‚Üí CharSpan or list[CharSpan]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_to_chars.batch_or_word_index batch_or_word_index ( int ) ‚Äî Index of the sequence in the batch. If the batch only comprise one sequence, this can be the index of the word in the sequence
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_to_chars.word_index word_index ( int , optional ) ‚Äî If a batch index is provided in batch_or_token_index , this can be the index of the word in the sequence.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_to_chars.sequence_index sequence_index ( int , optional , defaults to 0) ‚Äî If pair of sequences are encoded in the batch this can be used to specify which sequence in the pair (0 or 1) the provided word index belongs to.

                    Returns

                    CharSpan or list[CharSpan]

                  Span(s) of the associated character or characters in the string. CharSpan are NamedTuple with:

                    * start: index of the first character associated to the token in the original string
                    * end: index of the character following the last character associated to the token in the original string

              Get the character span in the original string corresponding to given word in a sequence of the batch.

              Character spans are returned as a CharSpan NamedTuple with:

                * start: index of the first character in the original string
                * end: index of the character following the last character in the original string

              Can be called as:

                * self.word_to_chars(word_index) if batch size is 1
                * self.word_to_chars(batch_index, word_index) if batch size is greater or equal to 1

                word_to_tokens

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_to_tokens < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L471

                ( batch_or_word_index : int word_index : typing.Optional[int] = None sequence_index : int = 0 ) ‚Üí (TokenSpan: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.TokenSpan , optional )

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_to_tokens.batch_or_word_index batch_or_word_index ( int ) ‚Äî Index of the sequence in the batch. If the batch only comprises one sequence, this can be the index of the word in the sequence.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_to_tokens.word_index word_index ( int , optional ) ‚Äî If a batch index is provided in batch_or_token_index , this can be the index of the word in the sequence.
                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.word_to_tokens.sequence_index sequence_index ( int , optional , defaults to 0) ‚Äî If pair of sequences are encoded in the batch this can be used to specify which sequence in the pair (0 or 1) the provided word index belongs to.

                    Returns

                    (TokenSpan: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.TokenSpan , optional)

                  Span of tokens in the encoded sequence. Returns None if no tokens correspond to the word. This can happen especially when the token is a special token that has been used to format the tokenization. For example when we add a class token at the very beginning of the tokenization.

              Get the encoded token span corresponding to a word in a sequence of the batch.

              Token spans are returned as a TokenSpan: https://huggingface.co/docs/transformers/v4.53.1/en/internal/tokenization_utils#transformers.TokenSpan with:

                * start ‚Äî Index of the first token.
                * end ‚Äî Index of the token following the last token.

              Can be called as:

                * self.word_to_tokens(word_index, sequence_index: int = 0) if batch size is 1
                * self.word_to_tokens(batch_index, word_index, sequence_index: int = 0) if batch size is greater or equal to 1

              This method is particularly suited when the input sequences are provided as pre-tokenized sequences (i.e. words are defined by the user). In this case it allows to easily associate encoded tokens with provided tokenized words.

                words

                : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.words < source >: https://github.com/huggingface/transformers/blob/v4.53.1/src/transformers/tokenization_utils_base.py#L351

                ( batch_index : int = 0 ) ‚Üí list[Optional[int]]

                  Parameters

                    * : https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#transformers.BatchEncoding.words.batch_index batch_index ( int , optional , defaults to 0) ‚Äî The index to access in the batch.

                    Returns

                    list[Optional[int]]

                  A list indicating the word corresponding to each token. Special tokens added by the tokenizer are mapped to None and other tokens are mapped to the index of their corresponding word (several tokens will be mapped to the same word index if they are parts of that word).

              Return a list mapping the tokens to their actual word in the initial sentence for a fast tokenizer.

          < > Update on GitHub: https://github.com/huggingface/transformers/blob/main/docs/source/en/main_classes/tokenizer.md

            ‚ÜêQuantization: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/quantization Trainer‚Üí: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/trainer
        Tokenizer: https://huggingface.co/docs/transformers/v4.53.1/en/main_classes/tokenizer#tokenizer