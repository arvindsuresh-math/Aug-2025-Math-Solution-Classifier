In the TASK below, you will be given a math problem and its corresponding step-by-step solution. Each step in the solution is numbered (e.g. "L1", "L2" and so on), and many of the steps include calculator annotations (e.g. "<<20*0.1=2>>"). Your goal is to convert this information into a structured JSON object according to the following schema and detailed instructions.

# Detailed Field Instructions

## 1. "function_code"

This string must contain a Python function with the following characteristics:

*   **1.A. No Imports:** You should not have ANY imports. The very first line MUST be the function definition (i.e. `def solve():`).
*   **1.B. Function Naming & Docstring:** The function must be named `solve`, and it should not have any args. It must begin with a docstring that has exactly two lines:
    *   **1.B.i.** The first line must be: "Index: [Index]." using the index from the task header.
    *   **1.B.ii.** The second line must be a succinct, one-sentence description of what the function returns (e.g., "Returns: the total cost of wages and taxes.").
*   **1.C. Line comments:** For each solution line that is used to compute the final answer, include a comment of the form `# L1`, `# L2` and so on, which references the line number.
    *   **1.C.i.** Such a comment must immediately be followed by a code block that precisely formalizes the corresponding solution line. More details about code blocks are provided in 1.D below.
    *   **1.C.ii.** If a solution line does not contain any computation relevant to the final answer, then omit it completely from the function code and do NOT add a corresponding line comment.
*   **1.D. Code blocks:** Each code block constitutes a complete formalization of its corresponding solution line. It must consist of the following:
    *   **1.D.i. Input Variables** First, define any NEW variables needed for the computation, i.e. that will be used for the first time in the solution. Each input variable MUST be followed by a comment (`#`) in the same line. These variables fall into two categories:
        *   "question_inputs": These are variables whose values are stated in or can be extracted from the question text (only the question text, NOT the answer text). The comment for these variables should quote or refer to the phrase in the question text from which it is extracted.
        *   "WK_inputs": These are variables drawn from common-sense "World Knowledge" (e.g. `minutes_per_hour = 60`, `dozen = 12`). The comment for these variables MUST simply say `# WK`.
    *   **1.D.ii. Output Variables** Second, there should be EXACTLY ONE line of code which formalizes the computation in the solution line and assigns the resulting value to a new variable (this is the "output_variable" field).
*   **1.E. The Direct Substitution Rule:** This is the MOST IMPORTANT RULE, which ensures that the "solution_line_template" is purely identical to the original solution line except that numerical values in computations have been replaced with variable placeholders: You MUST define variables in such a way that they can be DIRECTLY SUBSTITUTED into the solution line without changing any operators or surrounding text in the line.
*   **1.F. Final Answer:** The line that assigns the final result to the `answer` variable must be immediately preceded by a line containing only the comment `# FA`. The last line of the function must always return the `answer` variable.

## 2. "solution_line_template"

*   **2.A.** The template should be EXACTLY identical to the original solution line, with the ONLY CHANGES being that every NUMERICAL value used in a computation is replaced by its corresponding `{variable_name}` placeholder. This applies to the entire content of the solution line, including the inside and outside of the calculator annotations.
*   **2.B.** In particular, EVERY SINGLE numerical value appearing inside the calculator annotation (`<<..>>`) MUST be replaced with a `{variable_name}` placeholder.
*   **2.C.** Note: some quantities may appear as words in the solution line (e.g. "twice as many"). Do NOT attempt to replace these with variable name placeholders.
*   **2.D.** The Direct Substitution Rule will ensure that for correctly defined variables, it will be possible to replace the numerical values with variable name placeholders while leaving all surrounding text, symbols, and operators unchanged. Thus, in a correct "solution_line_template", the calculator annotation will not contain any numerical values, and moreover, replacing each `{variable_name}` by its value should exactly recover the original solution line, including the original calculator annotation.

# Examples

Given below are three examples that illustrate what a perfect formalization will look like. For each example, you are given the following:

*   Input: consisting of an index, question, and solution mapping.
*   Output: complete output, following the correct JSON schema.

In all examples, you will observe the following:

*   **A rigid adherence to the Direct Substitution Rule (1.E)**. This is the most important principle. The `solution_line_template` must be an exact copy of the original solution line, with only computational numbers replaced by `{variable}` placeholders. Every other point follows from this rule.

*   **How to formalize numbers depends entirely on how they appear in the solution text.** The goal is to create variables so that the numerical values can be directly substituted.
    *   **Simple Case:** In **Example 3**, the calculation uses `.8`. This is formalized with a single variable: `insurance_coverage_percent = 0.8`. In **Example 1**, "half an hour" is used in a calculation as `.5`, so it is formalized as `chase_duration = 0.5`.
    *   **Complex Case (Inconsistent Text):** A solution can be inconsistent, using multiple representations for the same concept. The Direct Substitution Rule must still be followed, even if it requires creating multiple variables. For instnace, in line L2 of **Example 2**:
        *   The text "10%" requires `discount_percent_num = 10`.
        *   The text ".10" requires `discount_percent_decimal = 0.10`.
        *   The calculation `10 * .01` inside the annotation requires `percent_factor = 0.01` to represent the `.01` that does not appear elsewhere.
        *   This results in three distinct variables to satisfy the substitution rule for one conceptual idea.

*   **Strict adherence to defining only NEW variables** in each step's `question_inputs` and `WK_inputs` lists. For instance, in **Example 1**, `fast_speed` is defined in L2 and then simply re-used in the computation for L4 without being listed as an input again.

*   Comments for `question_inputs` must cite the question text only, **NEVER** the solution text. Note how `percent_factor = 0.01` in **Example 2** is correctly labeled `# WK` because that fact constitutes common-sense World Knowledge and is not present in the question text.

## Example 1

### Input

**Index:**
2401

**Question:**
A wild tiger escapes the zoo.  He escapes at 1 AM and zookeepers do not notice he is missing until 4 AM.  He runs at a speed of 25 mph.  It takes 2 more hours to find him but after 4 hours of running, the tiger slows his speed to 10 mph.  He then gets chased for half an hour going 50 mph.  How far away from the zoo was he caught?

**Solution mapping:**
{
  "L1": "He was running for 4-1=<<4-1=3>>3 hours",
  "L2": "So in that time he runs 3*25=<<3*25=75>>75 miles",
  "L3": "Since he slowed down after 4 hours, the time he spent running at 25mph was an additional 4-3=<<4-3=1>>1 hours",
  "L4": "So in the first hour they were finding him, he ran 1*25=<<1*25=25>>25 miles",
  "L5": "In the second hour they were finding him, he ran 1*10=<<1*10=10>>10 miles",
  "L6": "Finally, during the chase, he ran 50*.5=<<50*.5=25>>25 miles",
  "L7": "So he is 75+25+10+25=<<75+25+10+25=135>>135 miles away"
}

### Output

```json
{
  "function_code": "def solve():\n    \"\"\"Index: 2401.\n    Returns: how far away from the zoo the tiger was caught.\n    \"\"\"\n    # L1\n    notice_time = 4 # notice he is missing until 4 AM\n    escape_time = 1 # escapes at 1 AM\n    initial_run_duration = notice_time - escape_time\n\n    # L2\n    fast_speed = 25 # runs at a speed of 25 mph\n    distance_before_notice = initial_run_duration * fast_speed\n\n    # L3\n    time_before_slow = 4 # after 4 hours of running\n    additional_fast_run_duration = time_before_slow - initial_run_duration\n\n    # L4\n    additional_fast_distance = additional_fast_run_duration * fast_speed\n\n    # L5\n    slow_run_duration = 1 # In the second hour\n    slow_speed = 10 # slows his speed to 10 mph\n    slow_distance = slow_run_duration * slow_speed\n\n    # L6\n    chase_speed = 50 # going 50 mph\n    chase_duration = 0.5 # for half an hour\n    chase_distance = chase_speed * chase_duration\n\n    # L7\n    total_distance = distance_before_notice + additional_fast_distance + slow_distance + chase_distance\n\n    # FA\n    answer = total_distance\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["notice_time", "escape_time"],
      "WK_inputs": [],
      "output_variable": "initial_run_duration",
      "solution_line_template": "He was running for {notice_time}-{escape_time}=<<{notice_time}-{escape_time}={initial_run_duration}>>{initial_run_duration} hours"
    },
    {
      "line_number": "L2",
      "question_inputs": ["fast_speed"],
      "WK_inputs": [],
      "output_variable": "distance_before_notice",
      "solution_line_template": "So in that time he runs {initial_run_duration}*{fast_speed}=<<{initial_run_duration}*{fast_speed}={distance_before_notice}>>{distance_before_notice} miles"
    },
    {
      "line_number": "L3",
      "question_inputs": ["time_before_slow"],
      "WK_inputs": [],
      "output_variable": "additional_fast_run_duration",
      "solution_line_template": "Since he slowed down after 4 hours, the time he spent running at 25mph was an additional {time_before_slow}-{initial_run_duration}=<<{time_before_slow}-{initial_run_duration}={additional_fast_run_duration}>>{additional_fast_run_duration} hours"
    },
    {
      "line_number": "L4",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "additional_fast_distance",
      "solution_line_template": "So in the first hour they were finding him, he ran {additional_fast_run_duration}*{fast_speed}=<<{additional_fast_run_duration}*{fast_speed}={additional_fast_distance}>>{additional_fast_distance} miles"
    },
    {
      "line_number": "L5",
      "question_inputs": ["slow_speed", "slow_run_duration"],
      "WK_inputs": [],
      "output_variable": "slow_distance",
      "solution_line_template": "In the second hour they were finding him, he ran {slow_run_duration}*{slow_speed}=<<{slow_run_duration}*{slow_speed}={slow_distance}>>{slow_distance} miles"
    },
    {
      "line_number": "L6",
      "question_inputs": ["chase_speed", "chase_duration"],
      "WK_inputs": [],
      "output_variable": "chase_distance",
      "solution_line_template": "Finally, during the chase, he ran {chase_speed}*{chase_duration}=<<{chase_speed}*{chase_duration}={chase_distance}>>{chase_distance} miles"
    },
    {
      "line_number": "L7",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_distance",
      "solution_line_template": "So he is {distance_before_notice}+{additional_fast_distance}+{slow_distance}+{chase_distance}=<<{distance_before_notice}+{additional_fast_distance}+{slow_distance}+{chase_distance}={total_distance}>>{total_distance} miles away"
    }
  ]
}
```

## Example 2

### Input

**Index:**
2918

**Question:**
Monica charges $25.00 per person when catering a dinner party.  For repeat customers, she offers a 10% discount.  Phoebe is a repeat customer who is having a dinner party for 20 guests.  How much will Monica make from the party?

**Solution mapping:**
{
  "L1": "Phoebe is having 20 guests and Monica charges $25.00 per person so that’s 20*25 = $<<20*25=500.00>>500.00",
  "L2": "Phoebe is a repeat customer so she gets 10% off of $500.00 so that’s .10*500 = $<<10*.01*500=50.00>>50.00 discount",
  "L3": "Monica is charging $500.00 minus the repeat customer discount of $50.00 so she will make 500-50 = $<<500-50=450.00>>450.00"
}

### Output

```json
{
  "function_code": "def solve():\n    \"\"\"Index: 2918.\n    Returns: the amount Monica will make from the party.\n    \"\"\"\n    # L1\n    num_guests = 20 # 20 guests\n    cost_per_person = 25.00 # $25.00 per person\n    base_cost = num_guests * cost_per_person\n\n    # L2\n    discount_percent_decimal = 0.10 # from solution text: .10*500\n    discount_percent_num = 10 # 10% discount\n    percent_factor = 0.01 # WK\n    discount_amount = discount_percent_num * percent_factor * base_cost\n\n    # L3\n    final_cost = base_cost - discount_amount\n\n    # FA\n    answer = final_cost\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["num_guests", "cost_per_person"],
      "WK_inputs": [],
      "output_variable": "base_cost",
      "solution_line_template": "Phoebe is having {num_guests} guests and Monica charges ${cost_per_person} per person so that’s {num_guests}*{cost_per_person} = $<<{num_guests}*{cost_per_person}={base_cost}>>{base_cost}"
    },
    {
      "line_number": "L2",
      "question_inputs": ["discount_percent_num", "discount_percent_decimal"],
      "WK_inputs": ["percent_factor"],
      "output_variable": "discount_amount",
      "solution_line_template": "Phoebe is a repeat customer so she gets {discount_percent_num}% off of ${base_cost} so that’s {discount_percent_decimal}*{base_cost} = $<<{discount_percent_num}*{percent_factor}*{base_cost}={discount_amount}>>{discount_amount} discount"
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "final_cost",
      "solution_line_template": "Monica is charging ${base_cost} minus the repeat customer discount of ${discount_amount} so she will make {base_cost}-{discount_amount} = $<<{base_cost}-{discount_amount}={final_cost}>>{final_cost}"
    }
  ]
}
```

## Example 3

### Input

**Index:**
4822

**Question:**
James needs to get a new pair of glasses.  His frames cost $200 and the lenses cost $500.  Insurance will cover 80% of the cost of lenses and he has a $50 off coupon for frames.  How much does everything cost?

**Solution mapping:**
{
  "L1": "He gets 500*.8=$<<500*.8=400>>400 off the cost of lenses",
  "L2": "That means the lenses cost 500-400=$<<500-400=100>>100",
  "L3": "The frames cost 200-50=$<<200-50=150>>150",
  "L4": "So he pays 100+150=$<<100+150=250>>250"
}
```

### Output

```json
{
  "function_code": "def solve():\n    \"\"\"Index: 4822.\n    Returns: the total cost for the glasses.\n    \"\"\"\n    # L1\n    lenses_cost = 500 # lenses cost $500\n    insurance_coverage_percent = 0.8 # cover 80% of the cost\n    lenses_coverage_amount = lenses_cost * insurance_coverage_percent\n\n    # L2\n    final_lenses_cost = lenses_cost - lenses_coverage_amount\n\n    # L3\n    frames_cost = 200 # frames cost $200\n    coupon_discount = 50 # $50 off coupon\n    final_frames_cost = frames_cost - coupon_discount\n\n    # L4\n    total_cost = final_lenses_cost + final_frames_cost\n\n    # FA\n    answer = total_cost\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["lenses_cost", "insurance_coverage_percent"],
      "WK_inputs": [],
      "output_variable": "lenses_coverage_amount",
      "solution_line_template": "He gets {lenses_cost}*{insurance_coverage_percent}=$<<{lenses_cost}*{insurance_coverage_percent}={lenses_coverage_amount}>>{lenses_coverage_amount} off the cost of lenses"
    },
    {
      "line_number": "L2",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "final_lenses_cost",
      "solution_line_template": "That means the lenses cost {lenses_cost}-{lenses_coverage_amount}=$<<{lenses_cost}-{lenses_coverage_amount}={final_lenses_cost}>>{final_lenses_cost}"
    },
    {
      "line_number": "L3",
      "question_inputs": ["frames_cost", "coupon_discount"],
      "WK_inputs": [],
      "output_variable": "final_frames_cost",
      "solution_line_template": "The frames cost {frames_cost}-{coupon_discount}=$<<{frames_cost}-{coupon_discount}={final_frames_cost}>>{final_frames_cost}"
    },
    {
      "line_number": "L4",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_cost",
      "solution_line_template": "So he pays {final_lenses_cost}+{final_frames_cost}=$<<{final_lenses_cost}+{final_frames_cost}={total_cost}>>{total_cost}"
    }
  ]
}
```

