```json
{
  "function_code": "def solve():\n    \"\"\"Index: 2462.\n    Returns: the number of additional demerits Andy can get before being fired.\n    \"\"\"\n    # L1\n    demerits_per_late_instance = 2 # 2 demerits per instance\n    late_instances = 6 # 6 times\n    demerits_from_late = demerits_per_late_instance * late_instances\n\n    # L2\n    max_demerits = 50 # 50 demerits in a month before getting fired\n    demerits_from_joke = 15 # 15 demerits for making an inappropriate joke\n    remaining_demerits = max_demerits - demerits_from_late - demerits_from_joke\n\n    # FA\n    answer = remaining_demerits\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["demerits_per_late_instance", "late_instances"],
      "WK_inputs": [],
      "output_variable": "demerits_from_late",
      "solution_line_template": "First find how many demerits Andy got for showing up late: {demerits_per_late_instance} demerits/time * {late_instances} times = <<{demerits_per_late_instance}*{late_instances}={demerits_from_late}>>{demerits_from_late} demerits"
    },
    {
      "line_number": "L2",
      "question_inputs": ["max_demerits", "demerits_from_joke"],
      "WK_inputs": [],
      "output_variable": "remaining_demerits",
      "solution_line_template": "Then subtract the number of demerits he's gotten so far to find how many more he can get before getting fired: {max_demerits} demerits - {demerits_from_late} demerits - {demerits_from_joke} demerits = <<{max_demerits}-{demerits_from_late}-{demerits_from_joke}={remaining_demerits}>>{remaining_demerits} demerits"
    }
  ]
}
```