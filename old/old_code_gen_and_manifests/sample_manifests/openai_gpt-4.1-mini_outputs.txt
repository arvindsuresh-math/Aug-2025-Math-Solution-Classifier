{
  "function_code": "def solve():\n    \"\"\"Index: 0.\n    Returns: the total number of clips Natalia sold in April and May.\n    \"\"\"\n    # L1\n    april_clips = 48 # sold clips to 48 friends in April\n    may_clips = april_clips / 2\n\n    # L2\n    total_clips = april_clips + may_clips\n\n    # FA\n    answer = total_clips\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "april_clips"
      ],
      "output_variable": "may_clips",
      "solution_line_template": "Natalia sold {april_clips}/2 = <<{april_clips}/2={may_clips}>>{may_clips} clips in May."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_clips",
      "solution_line_template": "Natalia sold {april_clips}+{may_clips} = <<{april_clips}+{may_clips}={total_clips}>>{total_clips} clips altogether in April and May."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 1.\n    Returns: how much Weng earned babysitting for 50 minutes.\n    \"\"\"\n    # L1\n    hourly_wage = 12 # Weng earns $12 an hour\n    minutes_per_hour = 60 # 60 minutes in an hour\n    wage_per_minute = hourly_wage / minutes_per_hour\n\n    # L2\n    minutes_worked = 50 # she did 50 minutes of babysitting\n    total_earnings = wage_per_minute * minutes_worked\n\n    # FA\n    answer = total_earnings\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "hourly_wage",
        "minutes_per_hour"
      ],
      "output_variable": "wage_per_minute",
      "solution_line_template": "Weng earns {hourly_wage} / {minutes_per_hour} = ${wage_per_minute} per minute."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "minutes_worked"
      ],
      "output_variable": "total_earnings",
      "solution_line_template": "Working {minutes_worked} minutes, she earned {wage_per_minute} x {minutes_worked} = ${total_earnings}."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 2.\n    Returns: how much more money Betty needs to buy the wallet.\n    \"\"\"\n    # L1\n    wallet_cost = 100 # wallet costs $100\n    initial_fraction = 2 # Betty has only half of the money\n    initial_money = wallet_cost / initial_fraction\n\n    # L2\n    parents_gift = 15 # parents give $15\n    grandparents_gift = parents_gift * 2\n\n    # L3\n    money_needed = wallet_cost - initial_money - grandparents_gift - parents_gift\n\n    # FA\n    answer = money_needed\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "wallet_cost",
        "initial_fraction"
      ],
      "output_variable": "initial_money",
      "solution_line_template": "In the beginning, Betty has only {wallet_cost} / {initial_fraction} = ${initial_money}."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "parents_gift"
      ],
      "output_variable": "grandparents_gift",
      "solution_line_template": "Betty's grandparents gave her {parents_gift} * 2 = ${grandparents_gift}."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "money_needed",
      "solution_line_template": "This means, Betty needs {wallet_cost} - {initial_money} - {grandparents_gift} - {parents_gift} = ${money_needed} more."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 3.\n    Returns: the number of pages Julie should read tomorrow.\n    \"\"\"\n    # L1\n    pages_yesterday = 12 # read 12 pages yesterday\n    multiplier_today = 2 # read twice as many pages as yesterday\n    pages_today = pages_yesterday * multiplier_today\n\n    # L2\n    total_pages_read = pages_yesterday + pages_today\n\n    # L3\n    total_pages = 120 # total pages in the book\n    pages_left = total_pages - total_pages_read\n\n    # L4\n    half = 2 # wants to read half of the remaining pages\n    pages_to_read_tomorrow = pages_left / half\n\n    # FA\n    answer = pages_to_read_tomorrow\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_yesterday",
        "multiplier_today"
      ],
      "output_variable": "pages_today",
      "solution_line_template": "Maila read {pages_yesterday} x {multiplier_today} = <<{pages_yesterday}*{multiplier_today}={pages_today}>>{pages_today} pages today."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_pages_read",
      "solution_line_template": "So she was able to read a total of {pages_yesterday} + {pages_today} = <<{pages_yesterday}+{pages_today}={total_pages_read}>>{total_pages_read} pages since yesterday."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "total_pages"
      ],
      "output_variable": "pages_left",
      "solution_line_template": "There are {total_pages} - {total_pages_read} = <<{total_pages}-{total_pages_read}={pages_left}>>{pages_left} pages left to be read."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "half"
      ],
      "output_variable": "pages_to_read_tomorrow",
      "solution_line_template": "Since she wants to read half of the remaining pages tomorrow, then she should read {pages_left}/{half} = <<{pages_left}/{half}={pages_to_read_tomorrow}>>{pages_to_read_tomorrow} pages."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 4.\n    Returns: the total number of pages James writes in a year.\n    \"\"\"\n    # L1\n    pages_per_letter = 3 # writes a 3-page letter\n    letters_per_friend_per_week = 2 # twice a week\n    pages_per_friend_per_week = pages_per_letter * letters_per_friend_per_week\n\n    # L2\n    num_friends = 2 # 2 different friends\n    pages_per_week = pages_per_friend_per_week * num_friends\n\n    # L3\n    weeks_per_year = 52 # number of weeks in a year\n    pages_per_year = pages_per_week * weeks_per_year\n\n    # FA\n    answer = pages_per_year\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_per_letter",
        "letters_per_friend_per_week"
      ],
      "output_variable": "pages_per_friend_per_week",
      "solution_line_template": "He writes each friend {pages_per_letter}*{letters_per_friend_per_week}=<<{pages_per_letter}*{letters_per_friend_per_week}={pages_per_friend_per_week}>>{pages_per_friend_per_week} pages a week"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_friends"
      ],
      "output_variable": "pages_per_week",
      "solution_line_template": "So he writes {pages_per_friend_per_week}*{num_friends}=<<{pages_per_friend_per_week}*{num_friends}={pages_per_week}>>{pages_per_week} pages every week"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "weeks_per_year"
      ],
      "output_variable": "pages_per_year",
      "solution_line_template": "That means he writes {pages_per_week}*{weeks_per_year}=<<{pages_per_week}*{weeks_per_year}={pages_per_year}>>{pages_per_year} pages a year"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 5.\n    Returns: the total number of flowers Mark has in his garden.\n    \"\"\"\n    # L1\n    yellow_flowers = 10 # Ten of them are yellow\n    purple_more_ratio_numerator = 80 # 80% more of those in purple\n    purple_more_ratio_denominator = 100\n    purple_more_flowers = purple_more_ratio_numerator / purple_more_ratio_denominator * yellow_flowers\n\n    # L2\n    purple_flowers = yellow_flowers + purple_more_flowers\n\n    # L3\n    yellow_and_purple_sum = yellow_flowers + purple_flowers\n\n    # L4\n    green_ratio_numerator = 25 # 25% as many green flowers\n    green_ratio_denominator = 100\n    green_flowers = green_ratio_numerator / green_ratio_denominator * yellow_and_purple_sum\n\n    # L5\n    total_flowers = yellow_and_purple_sum + green_flowers\n\n    # FA\n    answer = total_flowers\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "yellow_flowers",
        "purple_more_ratio_numerator",
        "purple_more_ratio_denominator"
      ],
      "output_variable": "purple_more_flowers",
      "solution_line_template": "There are {purple_more_ratio_numerator}/{purple_more_ratio_denominator} * {yellow_flowers} = <<{purple_more_ratio_numerator}/{purple_more_ratio_denominator}*{yellow_flowers}={purple_more_flowers}>>{purple_more_flowers} more purple flowers than yellow flowers."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "purple_flowers",
      "solution_line_template": "So in Mark's garden, there are {yellow_flowers} + {purple_more_flowers} = <<{yellow_flowers}+{purple_more_flowers}={purple_flowers}>>{purple_flowers} purple flowers."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "yellow_and_purple_sum",
      "solution_line_template": "Purple and yellow flowers sum up to {yellow_flowers} + {purple_flowers} = <<{yellow_flowers}+{purple_flowers}={yellow_and_purple_sum}>>{yellow_and_purple_sum} flowers."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "green_ratio_numerator",
        "green_ratio_denominator"
      ],
      "output_variable": "green_flowers",
      "solution_line_template": "That means in Mark's garden there are {green_ratio_numerator}/{green_ratio_denominator} * {yellow_and_purple_sum} = <<{green_ratio_numerator}/{green_ratio_denominator}*{yellow_and_purple_sum}={green_flowers}>>{green_flowers} green flowers."
    },
    {
      "line_number": "L5",
      "new_inputs": [],
      "output_variable": "total_flowers",
      "solution_line_template": "So in total Mark has {yellow_and_purple_sum} + {green_flowers} = <<{yellow_and_purple_sum}+{green_flowers}={total_flowers}>>{total_flowers} plants in his garden."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 6.\n    Returns: the total number of pizza pieces Albert eats in one day.\n    \"\"\"\n    # L1\n    num_large_pizzas = 2 # buys 2 large pizzas\n    slices_per_large_pizza = 16 # a large pizza has 16 slices\n    large_pizza_slices = num_large_pizzas * slices_per_large_pizza\n\n    # L2\n    num_small_pizzas = 2 # buys 2 small pizzas\n    slices_per_small_pizza = 8 # a small pizza has 8 slices\n    small_pizza_slices = num_small_pizzas * slices_per_small_pizza\n\n    # L3\n    total_slices = large_pizza_slices + small_pizza_slices\n\n    # FA\n    answer = total_slices\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "num_large_pizzas",
        "slices_per_large_pizza"
      ],
      "output_variable": "large_pizza_slices",
      "solution_line_template": "He eats {num_large_pizzas} from the largest pizzas because {num_large_pizzas} x {slices_per_large_pizza} = <<{num_large_pizzas}*{slices_per_large_pizza}={large_pizza_slices}>>{large_pizza_slices}"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_small_pizzas",
        "slices_per_small_pizza"
      ],
      "output_variable": "small_pizza_slices",
      "solution_line_template": "He eats {num_small_pizzas} from the small pizza because {num_small_pizzas} x {slices_per_small_pizza} = <<{num_small_pizzas}*{slices_per_small_pizza}={small_pizza_slices}>>{small_pizza_slices}"
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "total_slices",
      "solution_line_template": "He eats {large_pizza_slices} pieces because {large_pizza_slices} + {small_pizza_slices} = <<{large_pizza_slices}+{small_pizza_slices}={total_slices}>>{total_slices}"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 7.\n    Returns: the final weight of the box of goodies, in pounds.\n    \"\"\"\n    # L1\n    initial_weight = 2 # initial 2 pounds of jelly beans\n    triple_factor = 3 # weight triples after adding brownies\n    weight_after_brownies = initial_weight * triple_factor\n\n    # L2\n    added_jellybeans = 2 # another 2 pounds of jelly beans\n    weight_after_more_jellybeans = weight_after_brownies + added_jellybeans\n\n    # L3\n    double_factor = 2 # weight doubles after adding gummy worms\n    final_weight = weight_after_more_jellybeans * double_factor\n\n    # FA\n    answer = final_weight\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "initial_weight",
        "triple_factor"
      ],
      "output_variable": "weight_after_brownies",
      "solution_line_template": "To the initial {initial_weight} pounds of jelly beans, he added enough brownies to cause the weight to triple, bringing the weight to {initial_weight}*{triple_factor}=<<{initial_weight}*{triple_factor}={weight_after_brownies}>>{weight_after_brownies} pounds."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "added_jellybeans"
      ],
      "output_variable": "weight_after_more_jellybeans",
      "solution_line_template": "Next, he added another {added_jellybeans} pounds of jelly beans, bringing the weight to {weight_after_brownies}+{added_jellybeans}=<<{weight_after_brownies}+{added_jellybeans}={weight_after_more_jellybeans}>>{weight_after_more_jellybeans} pounds."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "double_factor"
      ],
      "output_variable": "final_weight",
      "solution_line_template": "And finally, he added enough gummy worms to double the weight once again, to a final weight of {weight_after_more_jellybeans}*{double_factor}=<<{weight_after_more_jellybeans}*{double_factor}={final_weight}>>{final_weight} pounds."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 8.\n    Returns: the amount Alexis paid for the shoes.\n    \"\"\"\n    # L1\n    # No computation in this line, just variable definition\n\n    # L2\n    shirt_price = 30 # $30 on a button-up shirt\n    pants_price = 46 # $46 on suit pants\n    coat_price = 38 # $38 on a suit coat\n    socks_price = 11 # $11 on socks\n    belt_price = 18 # $18 on a belt\n    sum_known_items = shirt_price + pants_price + coat_price + socks_price + belt_price\n\n    # L3\n    total_budget = 200 # budget of $200\n    money_left = 16 # $16 left from her budget\n    amount_spent = total_budget - money_left\n\n    # L4\n    shoes_price = amount_spent - sum_known_items\n\n    # FA\n    answer = shoes_price\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [],
      "output_variable": "",
      "solution_line_template": "Let S be the amount Alexis paid for the shoes."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "shirt_price",
        "pants_price",
        "coat_price",
        "socks_price",
        "belt_price"
      ],
      "output_variable": "sum_known_items",
      "solution_line_template": "She spent S + {shirt_price} + {pants_price} + {coat_price} + {socks_price} + {belt_price} = S + <<+{shirt_price}+{pants_price}+{coat_price}+{socks_price}+{belt_price}={sum_known_items}>>{sum_known_items}."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "total_budget",
        "money_left"
      ],
      "output_variable": "amount_spent",
      "solution_line_template": "She used all but {money_left} of her budget, so S + {sum_known_items} = {total_budget} - {money_left} = {amount_spent}."
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "shoes_price",
      "solution_line_template": "Thus, Alexis paid S = {amount_spent} - {sum_known_items} = $<<{amount_spent}-{sum_known_items}={shoes_price}>>{shoes_price} for the shoes."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 9.\n    Returns: the total amount of money Tina makes.\n    \"\"\"\n    # L1\n    regular_hours = 8 # works 8 hours a day\n    hourly_wage = 18.00 # $18 per hour\n    regular_shift_pay = regular_hours * hourly_wage\n\n    # L2\n    total_hours = 10 # works 10 hours a day\n    overtime_hours = total_hours - regular_hours\n\n    # L3\n    overtime_rate_fraction = 0.5 # overtime is hourly wage + half hourly wage\n    overtime_extra_pay = hourly_wage * overtime_rate_fraction\n\n    # L4\n    overtime_hourly_pay = hourly_wage + overtime_extra_pay\n\n    # L5\n    work_days = 5 # works 5 days\n    base_pay_total = regular_shift_pay * work_days\n\n    # L6\n    overtime_pay_per_day = overtime_hourly_pay * overtime_hours\n\n    # L7\n    overtime_pay_total = overtime_pay_per_day * work_days\n\n    # L8\n    total_pay = base_pay_total + overtime_pay_total\n\n    # FA\n    answer = total_pay\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "regular_hours",
        "hourly_wage"
      ],
      "output_variable": "regular_shift_pay",
      "solution_line_template": "She works {regular_hours} hours a day for ${hourly_wage} per hour so she makes {regular_hours}*{hourly_wage} = $<<{regular_hours}*{hourly_wage}={regular_shift_pay}>>{regular_shift_pay} per 8-hour shift"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "total_hours"
      ],
      "output_variable": "overtime_hours",
      "solution_line_template": "She works {total_hours} hours a day and anything over {regular_hours} hours is eligible for overtime, so she gets {total_hours}-{regular_hours} = <<{total_hours}-{regular_hours}={overtime_hours}>>{overtime_hours} hours of overtime"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "overtime_rate_fraction"
      ],
      "output_variable": "overtime_extra_pay",
      "solution_line_template": "Overtime is calculated as time and a half so and she makes ${hourly_wage}/hour so her overtime pay is {hourly_wage}*{overtime_rate_fraction} = $<<{hourly_wage}*{overtime_rate_fraction}={overtime_extra_pay}>>{overtime_extra_pay}"
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "overtime_hourly_pay",
      "solution_line_template": "Her overtime pay is {hourly_wage}+{overtime_extra_pay} = $<<{hourly_wage}+{overtime_extra_pay}={overtime_hourly_pay}>>{overtime_hourly_pay}"
    },
    {
      "line_number": "L5",
      "new_inputs": [
        "work_days"
      ],
      "output_variable": "base_pay_total",
      "solution_line_template": "Her base pay is ${regular_shift_pay} per 8-hour shift and she works {work_days} days and makes {work_days} * ${regular_shift_pay} = $<<{regular_shift_pay}*{work_days}={base_pay_total}>>{base_pay_total}"
    },
    {
      "line_number": "L6",
      "new_inputs": [],
      "output_variable": "overtime_pay_per_day",
      "solution_line_template": "Her overtime pay is ${overtime_hourly_pay} per hour and she works {overtime_hours} hours of overtime per day and makes {overtime_hourly_pay}*{overtime_hours} = $<<{overtime_hourly_pay}*{overtime_hours}={overtime_pay_per_day}>>{overtime_pay_per_day} in overtime pay"
    },
    {
      "line_number": "L7",
      "new_inputs": [],
      "output_variable": "overtime_pay_total",
      "solution_line_template": "{overtime_hours} hours of overtime pay for {work_days} days means she makes {overtime_pay_per_day}*{work_days} = $270.00"
    },
    {
      "line_number": "L8",
      "new_inputs": [],
      "output_variable": "total_pay",
      "solution_line_template": "In {work_days} days her base pay is ${base_pay_total} and she makes $270.00 in overtime pay so she makes ${base_pay_total} + $270 = $<<{base_pay_total}+270={total_pay}>>{total_pay}"
    }
  ]
}