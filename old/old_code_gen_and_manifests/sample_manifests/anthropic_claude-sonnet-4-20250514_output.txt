{
  "function_code": "def solve():\n    \"\"\"Index: 0.\n    Returns: the total number of clips Natalia sold in April and May.\n    \"\"\"\n    # L1\n    clips_april = 48 # sold clips to 48 of her friends in April\n    may_divisor = 2 # sold half as many clips in May\n    clips_may = clips_april / may_divisor\n\n    # L2\n    total_clips = clips_april + clips_may\n\n    # FA\n    answer = total_clips\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "clips_april",
        "may_divisor"
      ],
      "output_variable": "clips_may",
      "solution_line_template": "Natalia sold {clips_april}/{may_divisor} = <<{clips_april}/{may_divisor}={clips_may}>>{clips_may} clips in May."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_clips",
      "solution_line_template": "Natalia sold {clips_april}+{clips_may} = <<{clips_april}+{clips_may}={total_clips}>>{total_clips} clips altogether in April and May."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 1.\n    Returns: how much Weng earned from babysitting.\n    \"\"\"\n    # L1\n    hourly_rate = 12 # earns $12 an hour\n    minutes_per_hour = 60 # converting hourly rate to per minute\n    per_minute_rate = hourly_rate / minutes_per_hour\n\n    # L2\n    minutes_worked = 50 # did 50 minutes of babysitting\n    total_earned = per_minute_rate * minutes_worked\n\n    # FA\n    answer = total_earned\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "hourly_rate",
        "minutes_per_hour"
      ],
      "output_variable": "per_minute_rate",
      "solution_line_template": "Weng earns {hourly_rate}/{minutes_per_hour} = $<<{hourly_rate}/{minutes_per_hour}={per_minute_rate}>>{per_minute_rate} per minute."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "minutes_worked"
      ],
      "output_variable": "total_earned",
      "solution_line_template": "Working {minutes_worked} minutes, she earned {per_minute_rate} x {minutes_worked} = $<<{per_minute_rate}*{minutes_worked}={total_earned}>>{total_earned}."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 2.\n    Returns: how much more money Betty needs to buy the wallet.\n    \"\"\"\n    # L1\n    wallet_cost = 100 # costs $100\n    divisor = 2 # has only half of the money she needs\n    betty_initial_money = wallet_cost / divisor\n\n    # L2\n    parents_gift = 15 # give her $15\n    grandparents_multiplier = 2 # twice as much as her parents\n    grandparents_gift = parents_gift * grandparents_multiplier\n\n    # L3\n    money_needed = wallet_cost - betty_initial_money - grandparents_gift - parents_gift\n\n    # FA\n    answer = money_needed\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "wallet_cost",
        "divisor"
      ],
      "output_variable": "betty_initial_money",
      "solution_line_template": "In the beginning, Betty has only {wallet_cost} / {divisor} = $<<{wallet_cost}/{divisor}={betty_initial_money}>>{betty_initial_money}."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "parents_gift",
        "grandparents_multiplier"
      ],
      "output_variable": "grandparents_gift",
      "solution_line_template": "Betty's grandparents gave her {parents_gift} * {grandparents_multiplier} = $<<{parents_gift}*{grandparents_multiplier}={grandparents_gift}>>{grandparents_gift}."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "money_needed",
      "solution_line_template": "This means, Betty needs {wallet_cost} - {betty_initial_money} - {grandparents_gift} - {parents_gift} = $<<{wallet_cost}-{betty_initial_money}-{grandparents_gift}-{parents_gift}={money_needed}>>{money_needed} more."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 3.\n    Returns: the number of pages Julie should read tomorrow.\n    \"\"\"\n    # L1\n    pages_yesterday = 12 # she was able to read 12 pages\n    multiplier = 2 # she read twice as many pages as yesterday\n    pages_today = pages_yesterday * multiplier\n\n    # L2\n    total_pages_read = pages_yesterday + pages_today\n\n    # L3\n    total_book_pages = 120 # 120-page book\n    pages_remaining = total_book_pages - total_pages_read\n\n    # L4\n    half_divisor = 2 # read half of the remaining pages\n    pages_to_read_tomorrow = pages_remaining / half_divisor\n\n    # FA\n    answer = pages_to_read_tomorrow\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_yesterday",
        "multiplier"
      ],
      "output_variable": "pages_today",
      "solution_line_template": "Maila read {pages_yesterday} x {multiplier} = <<{pages_yesterday}*{multiplier}={pages_today}>>{pages_today} pages today."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_pages_read",
      "solution_line_template": "So she was able to read a total of {pages_yesterday} + {pages_today} = <<{pages_yesterday}+{pages_today}={total_pages_read}>>{total_pages_read} pages since yesterday."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "total_book_pages"
      ],
      "output_variable": "pages_remaining",
      "solution_line_template": "There are {total_book_pages} - {total_pages_read} = <<{total_book_pages}-{total_pages_read}={pages_remaining}>>{pages_remaining} pages left to be read."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "half_divisor"
      ],
      "output_variable": "pages_to_read_tomorrow",
      "solution_line_template": "Since she wants to read half of the remaining pages tomorrow, then she should read {pages_remaining}/{half_divisor} = <<{pages_remaining}/{half_divisor}={pages_to_read_tomorrow}>>{pages_to_read_tomorrow} pages."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 4.\n    Returns: the number of pages James writes in a year.\n    \"\"\"\n    # L1\n    pages_per_letter = 3 # writes a 3-page letter\n    letters_per_friend_per_week = 2 # twice a week\n    pages_per_friend_per_week = pages_per_letter * letters_per_friend_per_week\n\n    # L2\n    num_friends = 2 # to 2 different friends\n    total_pages_per_week = pages_per_friend_per_week * num_friends\n\n    # L3\n    weeks_per_year = 52 # a year\n    total_pages_per_year = total_pages_per_week * weeks_per_year\n\n    # FA\n    answer = total_pages_per_year\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_per_letter",
        "letters_per_friend_per_week"
      ],
      "output_variable": "pages_per_friend_per_week",
      "solution_line_template": "He writes each friend {pages_per_letter}*{letters_per_friend_per_week}=<<{pages_per_letter}*{letters_per_friend_per_week}={pages_per_friend_per_week}>>{pages_per_friend_per_week} pages a week"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_friends"
      ],
      "output_variable": "total_pages_per_week",
      "solution_line_template": "So he writes {pages_per_friend_per_week}*{num_friends}=<<{pages_per_friend_per_week}*{num_friends}={total_pages_per_week}>>{total_pages_per_week} pages every week"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "weeks_per_year"
      ],
      "output_variable": "total_pages_per_year",
      "solution_line_template": "That means he writes {total_pages_per_week}*{weeks_per_year}=<<{total_pages_per_week}*{weeks_per_year}={total_pages_per_year}>>{total_pages_per_year} pages a year"
    }
  ]
}
{
  "function_code": "from fractions import Fraction\n\ndef solve():\n    \"\"\"Index: 5.\n    Returns: the total number of flowers Mark has in his garden.\n    \"\"\"\n    # L1\n    purple_percentage = Fraction(80, 100) # 80% more of those in purple\n    yellow_flowers = 10 # Ten of them are yellow\n    additional_purple_flowers = purple_percentage * yellow_flowers\n\n    # L2\n    purple_flowers = yellow_flowers + additional_purple_flowers\n\n    # L3\n    yellow_and_purple_flowers = yellow_flowers + purple_flowers\n\n    # L4\n    green_percentage = Fraction(25, 100) # only 25% as many green flowers\n    green_flowers = green_percentage * yellow_and_purple_flowers\n\n    # L5\n    total_flowers = yellow_and_purple_flowers + green_flowers\n\n    # FA\n    answer = total_flowers\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "purple_percentage",
        "yellow_flowers"
      ],
      "output_variable": "additional_purple_flowers",
      "solution_line_template": "There are {purple_percentage} * {yellow_flowers} = <<{purple_percentage}*{yellow_flowers}={additional_purple_flowers}>>{additional_purple_flowers} more purple flowers than yellow flowers."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "purple_flowers",
      "solution_line_template": "So in Mark's garden, there are {yellow_flowers} + {additional_purple_flowers} = <<{yellow_flowers}+{additional_purple_flowers}={purple_flowers}>>{purple_flowers} purple flowers."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "yellow_and_purple_flowers",
      "solution_line_template": "Purple and yellow flowers sum up to {yellow_flowers} + {purple_flowers} = <<{yellow_flowers}+{purple_flowers}={yellow_and_purple_flowers}>>{yellow_and_purple_flowers} flowers."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "green_percentage"
      ],
      "output_variable": "green_flowers",
      "solution_line_template": "That means in Mark's garden there are {green_percentage} * {yellow_and_purple_flowers} = <<{green_percentage}*{yellow_and_purple_flowers}={green_flowers}>>{green_flowers} green flowers."
    },
    {
      "line_number": "L5",
      "new_inputs": [],
      "output_variable": "total_flowers",
      "solution_line_template": "So in total Mark has {yellow_and_purple_flowers} + {green_flowers} = <<{yellow_and_purple_flowers}+{green_flowers}={total_flowers}>>{total_flowers} plants in his garden."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 6.\n    Returns: the total number of pizza pieces Albert eats that day.\n    \"\"\"\n    # L1\n    num_large_pizzas = 2 # buys 2 large pizzas\n    slices_per_large_pizza = 16 # A large pizza has 16 slices\n    large_pizza_slices = num_large_pizzas * slices_per_large_pizza\n\n    # L2\n    num_small_pizzas = 2 # and 2 small pizzas\n    slices_per_small_pizza = 8 # a small pizza has 8 slices\n    small_pizza_slices = num_small_pizzas * slices_per_small_pizza\n\n    # L3\n    total_pieces = large_pizza_slices + small_pizza_slices\n\n    # FA\n    answer = total_pieces\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "num_large_pizzas",
        "slices_per_large_pizza"
      ],
      "output_variable": "large_pizza_slices",
      "solution_line_template": "He eats {large_pizza_slices} from the largest pizzas because {num_large_pizzas} x {slices_per_large_pizza} = <<{num_large_pizzas}*{slices_per_large_pizza}={large_pizza_slices}>>{large_pizza_slices}"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_small_pizzas",
        "slices_per_small_pizza"
      ],
      "output_variable": "small_pizza_slices",
      "solution_line_template": "He eats {small_pizza_slices} from the small pizza because {num_small_pizzas} x {slices_per_small_pizza} = <<{num_small_pizzas}*{slices_per_small_pizza}={small_pizza_slices}>>{small_pizza_slices}"
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "total_pieces",
      "solution_line_template": "He eats {total_pieces} pieces because {large_pizza_slices} + {small_pizza_slices} = <<{large_pizza_slices}+{small_pizza_slices}={total_pieces}>>{total_pieces}"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 7.\n    Returns: the final weight of the box of goodies in pounds.\n    \"\"\"\n    # L1\n    initial_weight = 2 # enough jelly beans to bring the weight to 2 pounds\n    triple_multiplier = 3 # added enough brownies to cause the weight to triple\n    weight_after_brownies = initial_weight * triple_multiplier\n\n    # L2\n    additional_jelly_beans = 2 # added another 2 pounds of jelly beans\n    weight_after_more_jelly_beans = weight_after_brownies + additional_jelly_beans\n\n    # L3\n    double_multiplier = 2 # added enough gummy worms to double the weight once again\n    final_weight = weight_after_more_jelly_beans * double_multiplier\n\n    # FA\n    answer = final_weight\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "initial_weight",
        "triple_multiplier"
      ],
      "output_variable": "weight_after_brownies",
      "solution_line_template": "To the initial {initial_weight} pounds of jelly beans, he added enough brownies to cause the weight to triple, bringing the weight to {initial_weight}*{triple_multiplier}=<<{initial_weight}*{triple_multiplier}={weight_after_brownies}>>{weight_after_brownies} pounds."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "additional_jelly_beans"
      ],
      "output_variable": "weight_after_more_jelly_beans",
      "solution_line_template": "Next, he added another {additional_jelly_beans} pounds of jelly beans, bringing the weight to {weight_after_brownies}+{additional_jelly_beans}=<<{weight_after_brownies}+{additional_jelly_beans}={weight_after_more_jelly_beans}>>{weight_after_more_jelly_beans} pounds."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "double_multiplier"
      ],
      "output_variable": "final_weight",
      "solution_line_template": "And finally, he added enough gummy worms to double the weight once again, to a final weight of {weight_after_more_jelly_beans}*{double_multiplier}=<<{weight_after_more_jelly_beans}*{double_multiplier}={final_weight}>>{final_weight} pounds."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 8.\n    Returns: the amount Alexis paid for the shoes.\n    \"\"\"\n    # L2\n    shirt_cost = 30 # spent $30 on a button-up shirt\n    pants_cost = 46 # $46 on suit pants\n    coat_cost = 38 # $38 on a suit coat\n    socks_cost = 11 # $11 on socks\n    belt_cost = 18 # $18 on a belt\n    other_items_total = shirt_cost + pants_cost + coat_cost + socks_cost + belt_cost\n\n    # L3\n    budget = 200 # budget of $200\n    money_left = 16 # has $16 left from her budget\n    total_spent = budget - money_left\n\n    # L4\n    shoes_cost = total_spent - other_items_total\n\n    # FA\n    answer = shoes_cost\n    return answer",
  "logical_steps": [
    {
      "line_number": "L2",
      "new_inputs": [
        "shirt_cost",
        "pants_cost",
        "coat_cost",
        "socks_cost",
        "belt_cost"
      ],
      "output_variable": "other_items_total",
      "solution_line_template": "She spent S + {shirt_cost} + {pants_cost} + {coat_cost} + {socks_cost} + {belt_cost} = S + <<+{shirt_cost}+{pants_cost}+{coat_cost}+{socks_cost}+{belt_cost}={other_items_total}>>{other_items_total}."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "budget",
        "money_left"
      ],
      "output_variable": "total_spent",
      "solution_line_template": "She used all but ${money_left} of her budget, so S + {other_items_total} = {budget} - {money_left} = {total_spent}."
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "shoes_cost",
      "solution_line_template": "Thus, Alexis paid S = {total_spent} - {other_items_total} = $<<{total_spent}-{other_items_total}={shoes_cost}>>{shoes_cost} for the shoes."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 9.\n    Returns: the total amount of money Tina makes.\n    \"\"\"\n    # L1\n    regular_hours_per_shift = 8 # works more than 8 hours per shift\n    hourly_wage = 18 # makes $18.00 an hour\n    regular_pay_per_shift = regular_hours_per_shift * hourly_wage\n\n    # L2\n    total_hours_per_day = 10 # works 10 hours every day\n    overtime_hours_per_day = total_hours_per_day - regular_hours_per_shift\n\n    # L3\n    overtime_multiplier = 0.5 # 1/2 your hourly wage\n    overtime_bonus = hourly_wage * overtime_multiplier\n\n    # L4\n    overtime_hourly_rate = hourly_wage + overtime_bonus\n\n    # L5\n    num_days = 5 # for 5 days\n    total_regular_pay = num_days * regular_pay_per_shift\n\n    # L6\n    overtime_pay_per_day = overtime_hourly_rate * overtime_hours_per_day\n\n    # L7\n    total_overtime_pay = overtime_pay_per_day * num_days\n\n    # L8\n    total_pay = total_regular_pay + total_overtime_pay\n\n    # FA\n    answer = total_pay\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "regular_hours_per_shift",
        "hourly_wage"
      ],
      "output_variable": "regular_pay_per_shift",
      "solution_line_template": "She works {regular_hours_per_shift} hours a day for ${hourly_wage} per hour so she makes {regular_hours_per_shift}*{hourly_wage} = $<<{regular_hours_per_shift}*{hourly_wage}={regular_pay_per_shift}>>{regular_pay_per_shift} per 8-hour shift"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "total_hours_per_day"
      ],
      "output_variable": "overtime_hours_per_day",
      "solution_line_template": "She works {total_hours_per_day} hours a day and anything over {regular_hours_per_shift} hours is eligible for overtime, so she gets {total_hours_per_day}-{regular_hours_per_shift} = <<{total_hours_per_day}-{regular_hours_per_shift}={overtime_hours_per_day}>>{overtime_hours_per_day} hours of overtime"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "overtime_multiplier"
      ],
      "output_variable": "overtime_bonus",
      "solution_line_template": "Overtime is calculated as time and a half so and she makes ${hourly_wage}/hour so her overtime pay is {hourly_wage}*{overtime_multiplier} = $<<{hourly_wage}*{overtime_multiplier}={overtime_bonus}>>{overtime_bonus}"
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "overtime_hourly_rate",
      "solution_line_template": "Her overtime pay is {hourly_wage}+{overtime_bonus} = $<<{hourly_wage}+{overtime_bonus}={overtime_hourly_rate}>>{overtime_hourly_rate}"
    },
    {
      "line_number": "L5",
      "new_inputs": [
        "num_days"
      ],
      "output_variable": "total_regular_pay",
      "solution_line_template": "Her base pay is ${regular_pay_per_shift} per 8-hour shift and she works {num_days} days and makes {num_days} * ${regular_pay_per_shift} = $<<{regular_pay_per_shift}*{num_days}={total_regular_pay}>>{total_regular_pay}"
    },
    {
      "line_number": "L6",
      "new_inputs": [],
      "output_variable": "overtime_pay_per_day",
      "solution_line_template": "Her overtime pay is ${overtime_hourly_rate} per hour and she works {overtime_hours_per_day} hours of overtime per day and makes {overtime_hourly_rate}*{overtime_hours_per_day} = $<<{overtime_hourly_rate}*{overtime_hours_per_day}={overtime_pay_per_day}>>{overtime_pay_per_day} in overtime pay"
    },
    {
      "line_number": "L7",
      "new_inputs": [],
      "output_variable": "total_overtime_pay",
      "solution_line_template": "{overtime_hours_per_day} hours of overtime pay for {num_days} days means she makes {overtime_pay_per_day}*{num_days} = ${total_overtime_pay}"
    },
    {
      "line_number": "L8",
      "new_inputs": [],
      "output_variable": "total_pay",
      "solution_line_template": "In {num_days} days her base pay is ${total_regular_pay} and she makes ${total_overtime_pay} in overtime pay so she makes ${total_regular_pay} + ${total_overtime_pay} = $<<{total_regular_pay}+{total_overtime_pay}={total_pay}>>{total_pay}"
    }
  ]
}