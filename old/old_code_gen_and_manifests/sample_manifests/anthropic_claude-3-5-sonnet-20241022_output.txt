{
  "function_code": "def solve():\n    \"\"\"Index: 0.\n    Returns: the total number of clips Natalia sold in April and May.\n    \"\"\"\n    # L1\n    april_sales = 48  # sold clips to 48 of her friends in April\n    may_sales = april_sales / 2  # sold half as many clips in May\n    \n    # L2\n    total_sales = april_sales + may_sales\n    \n    # FA\n    answer = total_sales\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": ["april_sales"],
      "output_variable": "may_sales",
      "solution_line_template": "Natalia sold {april_sales}/2 = <<{april_sales}/2={may_sales}>>{may_sales} clips in May."
    },
    {
      "line_number": "L2", 
      "new_inputs": [],
      "output_variable": "total_sales",
      "solution_line_template": "Natalia sold {april_sales}+{may_sales} = <<{april_sales}+{may_sales}={total_sales}>>{total_sales} clips altogether in April and May."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 1.\n    Returns: the amount Weng earned for 50 minutes of babysitting.\n    \"\"\"\n    # L1\n    hourly_rate = 12  # earns $12 an hour\n    minutes_per_hour = 60\n    rate_per_minute = hourly_rate / minutes_per_hour\n\n    # L2\n    minutes_worked = 50  # did 50 minutes of babysitting\n    earnings = rate_per_minute * minutes_worked\n\n    # FA\n    answer = earnings\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "hourly_rate",
        "minutes_per_hour"
      ],
      "output_variable": "rate_per_minute",
      "solution_line_template": "Weng earns {hourly_rate}/{minutes_per_hour} = $<<{hourly_rate}/{minutes_per_hour}={rate_per_minute}>>{rate_per_minute} per minute."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "minutes_worked"
      ],
      "output_variable": "earnings",
      "solution_line_template": "Working {minutes_worked} minutes, she earned {rate_per_minute} x {minutes_worked} = $<<{rate_per_minute}*{minutes_worked}={earnings}>>{earnings}."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 2.\n    Returns: how much more money Betty needs to buy the wallet.\n    \"\"\"\n    # L1\n    wallet_cost = 100 # costs $100\n    initial_fraction = 2 # has only half\n    betty_initial = wallet_cost / initial_fraction\n\n    # L2\n    parents_contribution = 15 # parents decided to give her $15\n    grandparents_multiplier = 2 # grandparents twice as much\n    grandparents_contribution = parents_contribution * grandparents_multiplier\n\n    # L3\n    money_still_needed = wallet_cost - betty_initial - grandparents_contribution - parents_contribution\n\n    # FA\n    answer = money_still_needed\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "wallet_cost",
        "initial_fraction"
      ],
      "output_variable": "betty_initial",
      "solution_line_template": "In the beginning, Betty has only {wallet_cost} / {initial_fraction} = $<<{wallet_cost}/{initial_fraction}={betty_initial}>>{betty_initial}."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "parents_contribution",
        "grandparents_multiplier"
      ],
      "output_variable": "grandparents_contribution",
      "solution_line_template": "Betty's grandparents gave her {parents_contribution} * {grandparents_multiplier} = $<<{parents_contribution}*{grandparents_multiplier}={grandparents_contribution}>>{grandparents_contribution}."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "money_still_needed",
      "solution_line_template": "This means, Betty needs {wallet_cost} - {betty_initial} - {grandparents_contribution} - {parents_contribution} = $<<{wallet_cost}-{betty_initial}-{grandparents_contribution}-{parents_contribution}={money_still_needed}>>{money_still_needed} more."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 3.\n    Returns: the number of pages Julie should read tomorrow.\n    \"\"\"\n    # L1\n    pages_yesterday = 12 # she was able to read 12 pages\n    multiplier = 2 # twice as many pages as yesterday\n    pages_today = pages_yesterday * multiplier\n\n    # L2\n    total_pages_read = pages_yesterday + pages_today\n\n    # L3\n    total_pages = 120 # 120-page book\n    remaining_pages = total_pages - total_pages_read\n\n    # L4\n    denominator = 2 # half of the remaining pages\n    pages_for_tomorrow = remaining_pages / denominator\n\n    # FA\n    answer = pages_for_tomorrow\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_yesterday",
        "multiplier"
      ],
      "output_variable": "pages_today",
      "solution_line_template": "Maila read {pages_yesterday} x {multiplier} = <<{pages_yesterday}*{multiplier}={pages_today}>>{pages_today} pages today."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_pages_read",
      "solution_line_template": "So she was able to read a total of {pages_yesterday} + {pages_today} = <<{pages_yesterday}+{pages_today}={total_pages_read}>>{total_pages_read} pages since yesterday."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "total_pages"
      ],
      "output_variable": "remaining_pages",
      "solution_line_template": "There are {total_pages} - {total_pages_read} = <<{total_pages}-{total_pages_read}={remaining_pages}>>{remaining_pages} pages left to be read."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "denominator"
      ],
      "output_variable": "pages_for_tomorrow",
      "solution_line_template": "Since she wants to read half of the remaining pages tomorrow, then she should read {remaining_pages}/{denominator} = <<{remaining_pages}/{denominator}={pages_for_tomorrow}>>{pages_for_tomorrow} pages."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 4.\n    Returns: the number of pages James writes in a year.\n    \"\"\"\n    # L1\n    pages_per_letter = 3 # writes a 3-page letter\n    letters_per_friend_per_week = 2 # twice a week\n    pages_per_friend_per_week = pages_per_letter * letters_per_friend_per_week\n\n    # L2\n    num_friends = 2 # 2 different friends\n    total_pages_per_week = pages_per_friend_per_week * num_friends\n\n    # L3\n    weeks_per_year = 52 # a year\n    total_pages_per_year = total_pages_per_week * weeks_per_year\n\n    # FA\n    answer = total_pages_per_year\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_per_letter",
        "letters_per_friend_per_week"
      ],
      "output_variable": "pages_per_friend_per_week",
      "solution_line_template": "He writes each friend {pages_per_letter}*{letters_per_friend_per_week}=<<{pages_per_letter}*{letters_per_friend_per_week}={pages_per_friend_per_week}>>{pages_per_friend_per_week} pages a week"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_friends"
      ],
      "output_variable": "total_pages_per_week",
      "solution_line_template": "So he writes {pages_per_friend_per_week}*{num_friends}=<<{pages_per_friend_per_week}*{num_friends}={total_pages_per_week}>>{total_pages_per_week} pages every week"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "weeks_per_year"
      ],
      "output_variable": "total_pages_per_year",
      "solution_line_template": "That means he writes {total_pages_per_week}*{weeks_per_year}=<<{total_pages_per_week}*{weeks_per_year}={total_pages_per_year}>>{total_pages_per_year} pages a year"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 5.\n    Returns: the total number of flowers in Mark's garden.\n    \"\"\"\n    # L1\n    yellow_flowers = 10 # Ten of them are yellow\n    purple_excess_ratio = 0.8 # 80% more\n    purple_excess = purple_excess_ratio * yellow_flowers\n\n    # L2\n    purple_flowers = yellow_flowers + purple_excess\n\n    # L3\n    yellow_and_purple = yellow_flowers + purple_flowers\n\n    # L4\n    green_ratio = 0.25 # 25% as many\n    green_flowers = green_ratio * yellow_and_purple\n\n    # L5\n    total_flowers = yellow_and_purple + green_flowers\n\n    # FA\n    answer = total_flowers\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "yellow_flowers",
        "purple_excess_ratio"
      ],
      "output_variable": "purple_excess",
      "solution_line_template": "There are {purple_excess_ratio} * {yellow_flowers} = <<{purple_excess_ratio}*{yellow_flowers}={purple_excess}>>{purple_excess} more purple flowers than yellow flowers."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "purple_flowers",
      "solution_line_template": "So in Mark's garden, there are {yellow_flowers} + {purple_excess} = <<{yellow_flowers}+{purple_excess}={purple_flowers}>>{purple_flowers} purple flowers."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "yellow_and_purple",
      "solution_line_template": "Purple and yellow flowers sum up to {yellow_flowers} + {purple_flowers} = <<{yellow_flowers}+{purple_flowers}={yellow_and_purple}>>{yellow_and_purple} flowers."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "green_ratio"
      ],
      "output_variable": "green_flowers",
      "solution_line_template": "That means in Mark's garden there are {green_ratio} * {yellow_and_purple} = <<{green_ratio}*{yellow_and_purple}={green_flowers}>>{green_flowers} green flowers."
    },
    {
      "line_number": "L5",
      "new_inputs": [],
      "output_variable": "total_flowers",
      "solution_line_template": "So in total Mark has {yellow_and_purple} + {green_flowers} = <<{yellow_and_purple}+{green_flowers}={total_flowers}>>{total_flowers} plants in his garden."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 6.\n    Returns: the total number of pizza pieces Albert eats.\n    \"\"\"\n    # L1\n    num_large_pizzas = 2 # buys 2 large pizzas\n    slices_per_large = 16 # large pizza has 16 slices\n    large_pizza_slices = num_large_pizzas * slices_per_large\n\n    # L2\n    num_small_pizzas = 2 # buys 2 small pizzas\n    slices_per_small = 8 # small pizza has 8 slices\n    small_pizza_slices = num_small_pizzas * slices_per_small\n\n    # L3\n    total_slices = large_pizza_slices + small_pizza_slices\n\n    # FA\n    answer = total_slices\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "num_large_pizzas",
        "slices_per_large"
      ],
      "output_variable": "large_pizza_slices",
      "solution_line_template": "He eats {large_pizza_slices} from the largest pizzas because {num_large_pizzas} x {slices_per_large} = <<{num_large_pizzas}*{slices_per_large}={large_pizza_slices}>>{large_pizza_slices}"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_small_pizzas",
        "slices_per_small"
      ],
      "output_variable": "small_pizza_slices",
      "solution_line_template": "He eats {small_pizza_slices} from the small pizza because {num_small_pizzas} x {slices_per_small} = <<{num_small_pizzas}*{slices_per_small}={small_pizza_slices}>>{small_pizza_slices}"
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "total_slices",
      "solution_line_template": "He eats {total_slices} pieces because {large_pizza_slices} + {small_pizza_slices} = <<{large_pizza_slices}+{small_pizza_slices}={total_slices}>>{total_slices}"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 7.\n    Returns: the final weight of the box of goodies in pounds.\n    \"\"\"\n    # L1\n    initial_weight = 2 # poured into the box enough jelly beans to bring the weight to 2 pounds\n    triple_multiplier = 3 # added enough brownies to cause the weight to triple\n    weight_after_brownies = initial_weight * triple_multiplier\n\n    # L2\n    additional_jellybeans = 2 # added another 2 pounds of jelly beans\n    weight_after_more_jellybeans = weight_after_brownies + additional_jellybeans\n\n    # L3\n    double_multiplier = 2 # added enough gummy worms to double the weight\n    final_weight = weight_after_more_jellybeans * double_multiplier\n\n    # FA\n    answer = final_weight\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "initial_weight",
        "triple_multiplier"
      ],
      "output_variable": "weight_after_brownies",
      "solution_line_template": "To the initial {initial_weight} pounds of jelly beans, he added enough brownies to cause the weight to triple, bringing the weight to {initial_weight}*{triple_multiplier}=<<{initial_weight}*{triple_multiplier}={weight_after_brownies}>>{weight_after_brownies} pounds."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "additional_jellybeans"
      ],
      "output_variable": "weight_after_more_jellybeans",
      "solution_line_template": "Next, he added another {additional_jellybeans} pounds of jelly beans, bringing the weight to {weight_after_brownies}+{additional_jellybeans}=<<{weight_after_brownies}+{additional_jellybeans}={weight_after_more_jellybeans}>>{weight_after_more_jellybeans} pounds."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "double_multiplier"
      ],
      "output_variable": "final_weight",
      "solution_line_template": "And finally, he added enough gummy worms to double the weight once again, to a final weight of {weight_after_more_jellybeans}*{double_multiplier}=<<{weight_after_more_jellybeans}*{double_multiplier}={final_weight}>>{final_weight} pounds."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 8.\n    Returns: the amount Alexis paid for the shoes.\n    \"\"\"\n    # L2\n    shirt_cost = 30 # spent $30 on a button-up shirt\n    pants_cost = 46 # $46 on suit pants\n    coat_cost = 38 # $38 on a suit coat\n    socks_cost = 11 # $11 on socks\n    belt_cost = 18 # $18 on a belt\n    other_costs = shirt_cost + pants_cost + coat_cost + socks_cost + belt_cost\n\n    # L3\n    budget = 200 # budget of $200\n    remaining = 16 # $16 left from her budget\n    total_spent = budget - remaining\n\n    # L4\n    shoes_cost = total_spent - other_costs\n\n    # FA\n    answer = shoes_cost\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [],
      "output_variable": "",
      "solution_line_template": "Let S be the amount Alexis paid for the shoes."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "shirt_cost",
        "pants_cost",
        "coat_cost",
        "socks_cost",
        "belt_cost"
      ],
      "output_variable": "other_costs",
      "solution_line_template": "She spent S + {shirt_cost} + {pants_cost} + {coat_cost} + {socks_cost} + {belt_cost} = S + <<+{shirt_cost}+{pants_cost}+{coat_cost}+{socks_cost}+{belt_cost}={other_costs}>>{other_costs}."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "budget",
        "remaining"
      ],
      "output_variable": "total_spent",
      "solution_line_template": "She used all but ${remaining} of her budget, so S + {other_costs} = {budget} - {remaining} = {total_spent}."
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "shoes_cost",
      "solution_line_template": "Thus, Alexis paid S = {total_spent} - {other_costs} = $<<{total_spent}-{other_costs}={shoes_cost}>>{shoes_cost} for the shoes."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 9.\n    Returns: the total amount of money Tina makes in 5 days including overtime.\n    \"\"\"\n    # L1\n    hourly_wage = 18 # makes $18.00 an hour\n    regular_hours = 8 # works more than 8 hours per shift\n    base_pay_per_day = regular_hours * hourly_wage\n\n    # L2\n    total_hours = 10 # works 10 hours every day\n    overtime_hours = total_hours - regular_hours\n\n    # L3\n    overtime_premium = hourly_wage * 0.5\n\n    # L4\n    overtime_rate = hourly_wage + overtime_premium\n\n    # L5\n    days_worked = 5 # works 10 hours every day for 5 days\n    total_base_pay = base_pay_per_day * days_worked\n\n    # L6\n    overtime_pay_per_day = overtime_rate * overtime_hours\n\n    # L7\n    total_overtime_pay = overtime_pay_per_day * days_worked\n\n    # L8\n    total_pay = total_base_pay + total_overtime_pay\n\n    # FA\n    answer = total_pay\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "hourly_wage",
        "regular_hours"
      ],
      "output_variable": "base_pay_per_day",
      "solution_line_template": "She works {regular_hours} hours a day for ${hourly_wage} per hour so she makes {regular_hours}*{hourly_wage} = $<<{regular_hours}*{hourly_wage}={base_pay_per_day}>>{base_pay_per_day} per 8-hour shift"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "total_hours"
      ],
      "output_variable": "overtime_hours",
      "solution_line_template": "She works {total_hours} hours a day and anything over {regular_hours} hours is eligible for overtime, so she gets {total_hours}-{regular_hours} = <<{total_hours}-{regular_hours}={overtime_hours}>>{overtime_hours} hours of overtime"
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "overtime_premium",
      "solution_line_template": "Overtime is calculated as time and a half so and she makes ${hourly_wage}/hour so her overtime pay is {hourly_wage}*.5 = $<<{hourly_wage}*.5={overtime_premium}>>{overtime_premium}"
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "overtime_rate",
      "solution_line_template": "Her overtime pay is {hourly_wage}+{overtime_premium} = $<<{hourly_wage}+{overtime_premium}={overtime_rate}>>{overtime_rate}"
    },
    {
      "line_number": "L5",
      "new_inputs": [
        "days_worked"
      ],
      "output_variable": "total_base_pay",
      "solution_line_template": "Her base pay is ${base_pay_per_day} per 8-hour shift and she works {days_worked} days and makes {days_worked} * ${base_pay_per_day} = $<<{base_pay_per_day}*{days_worked}={total_base_pay}>>{total_base_pay}"
    },
    {
      "line_number": "L6",
      "new_inputs": [],
      "output_variable": "overtime_pay_per_day",
      "solution_line_template": "Her overtime pay is ${overtime_rate} per hour and she works {overtime_hours} hours of overtime per day and makes {overtime_rate}*{overtime_hours} = $<<{overtime_rate}*{overtime_hours}={overtime_pay_per_day}>>{overtime_pay_per_day} in overtime pay"
    },
    {
      "line_number": "L7",
      "new_inputs": [],
      "output_variable": "total_overtime_pay",
      "solution_line_template": "{overtime_hours} hours of overtime pay for {days_worked} days means she makes {overtime_pay_per_day}*{days_worked} = ${total_overtime_pay}"
    },
    {
      "line_number": "L8",
      "new_inputs": [],
      "output_variable": "total_pay",
      "solution_line_template": "In {days_worked} days her base pay is ${total_base_pay} and she makes ${total_overtime_pay} in overtime pay so she makes ${total_base_pay} + ${total_overtime_pay} = $<<{total_base_pay}+{total_overtime_pay}={total_pay}>>{total_pay}"
    }
  ]
}