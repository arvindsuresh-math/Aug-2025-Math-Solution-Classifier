{
  "function_code": "def solve():\n    \"\"\"Index: 0.\n    Returns: the total number of clips Natalia sold altogether in April and May.\n    \"\"\"\n    # L1\n    clips_sold_april = 48 # Natalia sold clips to 48 of her friends in April\n    clips_sold_may = clips_sold_april / 2\n\n    # L2\n    total_clips_sold = clips_sold_april + clips_sold_may\n\n    # FA\n    answer = total_clips_sold\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "clips_sold_april"
      ],
      "output_variable": "clips_sold_may",
      "solution_line_template": "Natalia sold {clips_sold_april}/2 = <<{clips_sold_april}/2={clips_sold_may}>>{clips_sold_may} clips in May."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_clips_sold",
      "solution_line_template": "Natalia sold {clips_sold_april}+{clips_sold_may} = <<{clips_sold_april}+{clips_sold_may}={total_clips_sold}>>{total_clips_sold} clips altogether in April and May."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 1.\n    Returns: how much Weng earned.\n    \"\"\"\n    # L1\n    hourly_wage = 12 # earns $12 an hour\n    minutes_in_hour = 60\n    wage_per_minute = hourly_wage / minutes_in_hour\n\n    # L2\n    minutes_worked = 50 # did 50 minutes of babysitting\n    total_earnings = wage_per_minute * minutes_worked\n\n    # FA\n    answer = total_earnings\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "hourly_wage",
        "minutes_in_hour"
      ],
      "output_variable": "wage_per_minute",
      "solution_line_template": "Weng earns {hourly_wage}/{minutes_in_hour} = ${wage_per_minute} per minute."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "minutes_worked"
      ],
      "output_variable": "total_earnings",
      "solution_line_template": "Working {minutes_worked} minutes, she earned {wage_per_minute} x {minutes_worked} = ${total_earnings}."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 2.\n    Returns: how much more money Betty needs to buy the wallet.\n    \"\"\"\n    # L1\n    wallet_cost = 100 # costs $100\n    initial_savings_proportion = 2 # Betty has only half of the money\n    betty_initial_savings = wallet_cost / initial_savings_proportion\n\n    # L2\n    parents_gift = 15 # give her $15\n    grandparents_gift_multiplier = 2 # twice as much as her parents\n    grandparents_gift = parents_gift * grandparents_gift_multiplier\n\n    # L3\n    money_needed = wallet_cost - betty_initial_savings - parents_gift - grandparents_gift\n\n    # FA\n    answer = money_needed\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "wallet_cost",
        "initial_savings_proportion"
      ],
      "output_variable": "betty_initial_savings",
      "solution_line_template": "In the beginning, Betty has only {wallet_cost} / {initial_savings_proportion} = ${betty_initial_savings}."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "parents_gift",
        "grandparents_gift_multiplier"
      ],
      "output_variable": "grandparents_gift",
      "solution_line_template": "Betty's grandparents gave her {parents_gift} * {grandparents_gift_multiplier} = ${grandparents_gift}."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "money_needed",
      "solution_line_template": "This means, Betty needs {wallet_cost} - {betty_initial_savings} - {parents_gift} - {grandparents_gift} = ${money_needed} more."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 3.\n    Returns: the number of pages Julie should read tomorrow.\n    \"\"\"\n    # L1\n    pages_yesterday = 12 # she was able to read 12 pages\n    pages_today = pages_yesterday * 2\n\n    # L2\n    total_pages_read = pages_yesterday + pages_today\n\n    # L3\n    total_pages_in_book = 120 # a 120-page book\n    remaining_pages = total_pages_in_book - total_pages_read\n\n    # L4\n    pages_to_read_tomorrow = remaining_pages / 2\n\n    # FA\n    answer = pages_to_read_tomorrow\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_yesterday"
      ],
      "output_variable": "pages_today",
      "solution_line_template": "Maila read {pages_yesterday} x 2 = <<{pages_yesterday}*2={pages_today}>>{pages_today} pages today."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_pages_read",
      "solution_line_template": "So she was able to read a total of {pages_yesterday} + {pages_today} = <<{pages_yesterday}+{pages_today}={total_pages_read}>>{total_pages_read} pages since yesterday."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "total_pages_in_book"
      ],
      "output_variable": "remaining_pages",
      "solution_line_template": "There are {total_pages_in_book} - {total_pages_read} = <<{total_pages_in_book}-{total_pages_read}={remaining_pages}>>{remaining_pages} pages left to be read."
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "pages_to_read_tomorrow",
      "solution_line_template": "Since she wants to read half of the remaining pages tomorrow, then she should read {remaining_pages}/2 = <<{remaining_pages}/2={pages_to_read_tomorrow}>>{pages_to_read_tomorrow} pages."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 4.\n    Returns: the total number of pages James writes a year.\n    \"\"\"\n    # L1\n    pages_per_letter = 3 # a 3-page letter\n    letters_per_friend_per_week = 2 # to 2 different friends twice a week\n    pages_per_friend_per_week = pages_per_letter * letters_per_friend_per_week\n\n    # L2\n    num_friends = 2 # to 2 different friends twice a week\n    pages_per_week = pages_per_friend_per_week * num_friends\n\n    # L3\n    weeks_per_year = 52 # a year\n    pages_per_year = pages_per_week * weeks_per_year\n\n    # FA\n    answer = pages_per_year\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_per_letter",
        "letters_per_friend_per_week"
      ],
      "output_variable": "pages_per_friend_per_week",
      "solution_line_template": "He writes each friend {pages_per_letter}*2=<<{pages_per_letter}*2={pages_per_friend_per_week}>>{pages_per_friend_per_week} pages a week"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_friends"
      ],
      "output_variable": "pages_per_week",
      "solution_line_template": "So he writes {pages_per_friend_per_week}*2=<<{pages_per_friend_per_week}*2={pages_per_week}>>{pages_per_week} pages every week"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "weeks_per_year"
      ],
      "output_variable": "pages_per_year",
      "solution_line_template": "That means he writes {pages_per_week}*52=<<{pages_per_week}*52={pages_per_year}>>{pages_per_year} pages a year"
    }
  ]
}
{
  "function_code": "from fractions import Fraction\n\ndef solve():\n    \"\"\"Index: 5.\n    Returns: the total number of flowers Mark has in his garden.\n    \"\"\"\n    # L1\n    yellow_flowers = 10 # Ten of them are yellow\n    purple_flower_increase_rate = Fraction(80, 100) # 80% more of those in purple\n    more_purple_flowers = yellow_flowers * purple_flower_increase_rate\n\n    # L2\n    purple_flowers = yellow_flowers + more_purple_flowers\n\n    # L3\n    yellow_and_purple_flowers = yellow_flowers + purple_flowers\n\n    # L4\n    green_flower_rate = Fraction(25, 100) # 25% as many green flowers as there are yellow and purple flowers\n    green_flowers = green_flower_rate * yellow_and_purple_flowers\n\n    # L5\n    total_flowers = yellow_and_purple_flowers + green_flowers\n\n    # FA\n    answer = total_flowers\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "yellow_flowers",
        "purple_flower_increase_rate"
      ],
      "output_variable": "more_purple_flowers",
      "solution_line_template": "There are {purple_flower_increase_rate} * {yellow_flowers} = <<{purple_flower_increase_rate}*{yellow_flowers}={more_purple_flowers}>>{more_purple_flowers} more purple flowers than yellow flowers."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "purple_flowers",
      "solution_line_template": "So in Mark's garden, there are {yellow_flowers} + {more_purple_flowers} = <<{yellow_flowers}+{more_purple_flowers}={purple_flowers}>>{purple_flowers} purple flowers."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "yellow_and_purple_flowers",
      "solution_line_template": "Purple and yellow flowers sum up to {yellow_flowers} + {purple_flowers} = <<{yellow_flowers}+{purple_flowers}={yellow_and_purple_flowers}>>{yellow_and_purple_flowers} flowers."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "green_flower_rate"
      ],
      "output_variable": "green_flowers",
      "solution_line_template": "That means in Mark's garden there are {green_flower_rate} * {yellow_and_purple_flowers} = <<{green_flower_rate}*{yellow_and_purple_flowers}={green_flowers}>>{green_flowers} green flowers."
    },
    {
      "line_number": "L5",
      "new_inputs": [],
      "output_variable": "total_flowers",
      "solution_line_template": "So in total Mark has {yellow_and_purple_flowers} + {green_flowers} = <<{yellow_and_purple_flowers}+{green_flowers}={total_flowers}>>{total_flowers} plants in his garden."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 6.\n    Returns: how many pieces of pizza Albert eats that day.\n    \"\"\"\n    # L1\n    num_large_pizzas = 2 # buys 2 large pizzas\n    slices_per_large_pizza = 16 # A large pizza has 16 slices\n    total_slices_large_pizzas = num_large_pizzas * slices_per_large_pizza\n\n    # L2\n    num_small_pizzas = 2 # and 2 small pizzas\n    slices_per_small_pizza = 8 # a small pizza has 8 slices\n    total_slices_small_pizzas = num_small_pizzas * slices_per_small_pizza\n\n    # L3\n    total_pieces_eaten = total_slices_large_pizzas + total_slices_small_pizzas\n\n    # FA\n    answer = total_pieces_eaten\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "num_large_pizzas",
        "slices_per_large_pizza"
      ],
      "output_variable": "total_slices_large_pizzas",
      "solution_line_template": "He eats {num_large_pizzas} x {slices_per_large_pizza} = <<{num_large_pizzas}*{slices_per_large_pizza}={total_slices_large_pizzas}>>{total_slices_large_pizzas}"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_small_pizzas",
        "slices_per_small_pizza"
      ],
      "output_variable": "total_slices_small_pizzas",
      "solution_line_template": "He eats {num_small_pizzas} x {slices_per_small_pizza} = <<{num_small_pizzas}*{slices_per_small_pizza}={total_slices_small_pizzas}>>{total_slices_small_pizzas}"
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "total_pieces_eaten",
      "solution_line_template": "He eats {total_slices_large_pizzas} + {total_slices_small_pizzas} = <<{total_slices_large_pizzas}+{total_slices_small_pizzas}={total_pieces_eaten}>>{total_pieces_eaten}"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 7.\n    Returns: the final weight of the box of goodies, in pounds.\n    \"\"\"\n    # L1\n    initial_jelly_beans_weight = 2 # enough jelly beans to bring the weight to 2 pounds\n    weight_after_brownies = initial_jelly_beans_weight * 3\n\n    # L2\n    added_jelly_beans_weight = 2 # added another 2 pounds of jelly beans\n    weight_after_more_jelly_beans = weight_after_brownies + added_jelly_beans_weight\n\n    # L3\n    weight_after_gummy_worms = weight_after_more_jelly_beans * 2\n\n    # FA\n    answer = weight_after_gummy_worms\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "initial_jelly_beans_weight"
      ],
      "output_variable": "weight_after_brownies",
      "solution_line_template": "To the initial {initial_jelly_beans_weight} pounds of jelly beans, he added enough brownies to cause the weight to triple, bringing the weight to {initial_jelly_beans_weight}*3=<<{initial_jelly_beans_weight}*3={weight_after_brownies}>>{weight_after_brownies} pounds."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "added_jelly_beans_weight"
      ],
      "output_variable": "weight_after_more_jelly_beans",
      "solution_line_template": "Next, he added another {added_jelly_beans_weight} pounds of jelly beans, bringing the weight to {weight_after_brownies}+{added_jelly_beans_weight}=<<{weight_after_brownies}+{added_jelly_beans_weight}={weight_after_more_jelly_beans}>>{weight_after_more_jelly_beans} pounds."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "weight_after_gummy_worms",
      "solution_line_template": "And finally, he added enough gummy worms to double the weight once again, to a final weight of {weight_after_more_jelly_beans}*2=<<{weight_after_more_jelly_beans}*2={weight_after_gummy_worms}>>{weight_after_gummy_worms} pounds."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 8.\n    Returns: the amount Alexis paid for the shoes.\n    \"\"\"\n    # L1\n    # L2\n    shirt_cost = 30 # spent $30 on a button-up shirt\n    pants_cost = 46 # $46 on suit pants\n    coat_cost = 38 # $38 on a suit coat\n    socks_cost = 11 # $11 on socks\n    belt_cost = 18 # $18 on a belt\n    total_spent_excluding_shoes = shirt_cost + pants_cost + coat_cost + socks_cost + belt_cost\n\n    # L3\n    budget = 200 # budget of $200\n    money_left = 16 # She has $16 left\n    total_spent_including_shoes = budget - money_left\n\n    # L4\n    shoes_cost = total_spent_including_shoes - total_spent_excluding_shoes\n\n    # FA\n    answer = shoes_cost\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [],
      "output_variable": null,
      "solution_line_template": "Let S be the amount Alexis paid for the shoes."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "shirt_cost",
        "pants_cost",
        "coat_cost",
        "socks_cost",
        "belt_cost"
      ],
      "output_variable": "total_spent_excluding_shoes",
      "solution_line_template": "She spent S + {shirt_cost} + {pants_cost} + {coat_cost} + {socks_cost} + {belt_cost} = S + <<+{shirt_cost}+{pants_cost}+{coat_cost}+{socks_cost}+{belt_cost}={total_spent_excluding_shoes}>>{total_spent_excluding_shoes}."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "budget",
        "money_left"
      ],
      "output_variable": "total_spent_including_shoes",
      "solution_line_template": "She used all but ${money_left} of her budget, so S + {total_spent_excluding_shoes} = {budget} - {money_left} = {total_spent_including_shoes}."
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "shoes_cost",
      "solution_line_template": "Thus, Alexis paid S = {total_spent_including_shoes} - {total_spent_excluding_shoes} = ${shoes_cost} for the shoes."
    }
  ]
}
{
  "function_code": "from fractions import Fraction\n\ndef solve():\n    \"\"\"Index: 9.\n    Returns: how much money she makes.\n    \"\"\"\n    # L1\n    regular_hours_per_shift = 8 # She works 8 hours per shift\n    hourly_wage = 18.00 # makes $18.00 an hour\n    base_pay_per_shift = regular_hours_per_shift * hourly_wage\n\n    # L2\n    actual_hours_per_shift = 10 # she works 10 hours every day\n    overtime_hours_per_shift = actual_hours_per_shift - regular_hours_per_shift\n\n    # L3\n    overtime_rate_increase = Fraction(1, 2) # paid by your hourly wage + 1/2 your hourly wage\n    overtime_pay_per_hour_increase = hourly_wage * overtime_rate_increase\n\n    # L4\n    overtime_hourly_rate = hourly_wage + overtime_pay_per_hour_increase\n\n    # L5\n    num_days_worked = 5 # for 5 days\n    total_base_pay = base_pay_per_shift * num_days_worked\n\n    # L6\n    overtime_pay_per_day = overtime_hourly_rate * overtime_hours_per_shift\n\n    # L7\n    total_overtime_pay = overtime_pay_per_hour * num_days_worked\n\n    # L8\n    total_earnings = total_base_pay + total_overtime_pay\n\n    # FA\n    answer = total_earnings\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "regular_hours_per_shift",
        "hourly_wage"
      ],
      "output_variable": "base_pay_per_shift",
      "solution_line_template": "She works {regular_hours_per_shift} hours a day for ${hourly_wage} per hour so she makes {regular_hours_per_shift}*{hourly_wage} = ${base_pay_per_shift} per 8-hour shift"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "actual_hours_per_shift"
      ],
      "output_variable": "overtime_hours_per_shift",
      "solution_line_template": "She works {actual_hours_per_shift} hours a day and anything over {regular_hours_per_shift} hours is eligible for overtime, so she gets {actual_hours_per_shift}-{regular_hours_per_shift} = <<{actual_hours_per_shift}-{regular_hours_per_shift}={overtime_hours_per_shift}>>{overtime_hours_per_shift} hours of overtime"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "overtime_rate_increase"
      ],
      "output_variable": "overtime_pay_per_hour_increase",
      "solution_line_template": "Overtime is calculated as time and a half so and she makes ${hourly_wage}/hour so her overtime pay is {hourly_wage}*{overtime_rate_increase} = ${overtime_pay_per_hour_increase}"
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "overtime_hourly_rate",
      "solution_line_template": "Her overtime pay is {hourly_wage}+{overtime_pay_per_hour_increase} = ${overtime_hourly_rate}"
    },
    {
      "line_number": "L5",
      "new_inputs": [
        "num_days_worked"
      ],
      "output_variable": "total_base_pay",
      "solution_line_template": "Her base pay is ${base_pay_per_shift} per 8-hour shift and she works {num_days_worked} days and makes {num_days_worked} * ${base_pay_per_shift} = ${total_base_pay}"
    },
    {
      "line_number": "L6",
      "new_inputs": [],
      "output_variable": "overtime_pay_per_day",
      "solution_line_template": "Her overtime pay is ${overtime_hourly_rate} per hour and she works {overtime_hours_per_shift} hours of overtime per day and makes {overtime_hourly_rate}*{overtime_hours_per_shift} = ${overtime_pay_per_day} in overtime pay"
    },
    {
      "line_number": "L7",
      "new_inputs": [],
      "output_variable": "total_overtime_pay",
      "solution_line_template": "{overtime_hours_per_shift} hours of overtime pay for {num_days_worked} days means she makes {overtime_pay_per_day}*{num_days_worked} = ${total_overtime_pay}"
    },
    {
      "line_number": "L8",
      "new_inputs": [],
      "output_variable": "total_earnings",
      "solution_line_template": "In {num_days_worked} days her base pay is ${total_base_pay} and she makes ${total_overtime_pay} in overtime pay so she makes ${total_base_pay} + ${total_overtime_pay} = ${total_earnings}"
    }
  ]
}