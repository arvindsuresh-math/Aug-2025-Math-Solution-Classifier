{
  "function_code": "def solve():\n    \"\"\"Index: 0.\n    Returns: the total number of clips Natalia sold in April and May.\n    \"\"\"\n    # L1\n    clips_april = 48  # sold clips to 48 of her friends in April\n    may_denominator = 2  # sold half as many clips in May\n    clips_may = clips_april / may_denominator\n\n    # L2\n    total_clips = clips_april + clips_may\n\n    # FA\n    answer = total_clips\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "clips_april",
        "may_denominator"
      ],
      "output_variable": "clips_may",
      "solution_line_template": "Natalia sold {clips_april}/{may_denominator} = <<{clips_april}/{may_denominator}={clips_may}>>{clips_may} clips in May."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_clips",
      "solution_line_template": "Natalia sold {clips_april}+{clips_may} = <<{clips_april}+{clips_may}={total_clips}>>{total_clips} clips altogether in April and May."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 1.\n    Returns: the amount Weng earned.\n    \"\"\"\n    # L1\n    hourly_wage = 12  # $12 an hour\n    minutes_in_hour = 60  # an hour\n    wage_per_minute = hourly_wage / minutes_in_hour\n\n    # L2\n    minutes_worked = 50  # 50 minutes of babysitting\n    total_earnings = wage_per_minute * minutes_worked\n\n    # FA\n    answer = total_earnings\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "hourly_wage",
        "minutes_in_hour"
      ],
      "output_variable": "wage_per_minute",
      "solution_line_template": "Weng earns {hourly_wage}/{minutes_in_hour} = $<<{hourly_wage}/{minutes_in_hour}={wage_per_minute}>>{wage_per_minute} per minute."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "minutes_worked"
      ],
      "output_variable": "total_earnings",
      "solution_line_template": "Working {minutes_worked} minutes, she earned {wage_per_minute} x {minutes_worked} = $<<{wage_per_minute}*{minutes_worked}={total_earnings}>>{total_earnings}."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 2.\n    Returns: the amount of money Betty still needs to buy the wallet.\n    \"\"\"\n    # L1\n    wallet_cost = 100  # a new wallet which costs $100\n    initial_money_denominator = 2  # Betty has only half of the money she needs\n    initial_money = wallet_cost / initial_money_denominator\n\n    # L2\n    parents_gift = 15  # Her parents decided to give her $15\n    grandparents_multiplier = 2  # her grandparents twice as much as her parents\n    grandparents_gift = parents_gift * grandparents_multiplier\n\n    # L3\n    money_needed = wallet_cost - initial_money - grandparents_gift - parents_gift\n\n    # FA\n    answer = money_needed\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "wallet_cost",
        "initial_money_denominator"
      ],
      "output_variable": "initial_money",
      "solution_line_template": "In the beginning, Betty has only {wallet_cost} / {initial_money_denominator} = $<<{wallet_cost}/{initial_money_denominator}={initial_money}>>{initial_money}."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "parents_gift",
        "grandparents_multiplier"
      ],
      "output_variable": "grandparents_gift",
      "solution_line_template": "Betty's grandparents gave her {parents_gift} * {grandparents_multiplier} = $<<{parents_gift}*{grandparents_multiplier}={grandparents_gift}>>{grandparents_gift}."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "money_needed",
      "solution_line_template": "This means, Betty needs {wallet_cost} - {initial_money} - {grandparents_gift} - {parents_gift} = $<<{wallet_cost}-{initial_money}-{grandparents_gift}-{parents_gift}={money_needed}>>{money_needed} more."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 3.\n    Returns: the number of pages Julie should read tomorrow.\n    \"\"\"\n    # L1\n    pages_read_yesterday = 12 # she was able to read 12 pages\n    today_multiplier = 2 # today, she read twice as many pages as yesterday\n    pages_read_today = pages_read_yesterday * today_multiplier\n\n    # L2\n    total_pages_read = pages_read_yesterday + pages_read_today\n\n    # L3\n    book_pages = 120 # a 120-page book\n    remaining_pages = book_pages - total_pages_read\n\n    # L4\n    tomorrow_divisor = 2 # wants to read half of the remaining pages tomorrow\n    pages_to_read_tomorrow = remaining_pages / tomorrow_divisor\n\n    # FA\n    answer = pages_to_read_tomorrow\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_read_yesterday",
        "today_multiplier"
      ],
      "output_variable": "pages_read_today",
      "solution_line_template": "Maila read {pages_read_yesterday} x {today_multiplier} = <<{pages_read_yesterday}*{today_multiplier}={pages_read_today}>>{pages_read_today} pages today."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_pages_read",
      "solution_line_template": "So she was able to read a total of {pages_read_yesterday} + {pages_read_today} = <<{pages_read_yesterday}+{pages_read_today}={total_pages_read}>>{total_pages_read} pages since yesterday."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "book_pages"
      ],
      "output_variable": "remaining_pages",
      "solution_line_template": "There are {book_pages} - {total_pages_read} = <<{book_pages}-{total_pages_read}={remaining_pages}>>{remaining_pages} pages left to be read."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "tomorrow_divisor"
      ],
      "output_variable": "pages_to_read_tomorrow",
      "solution_line_template": "Since she wants to read half of the remaining pages tomorrow, then she should read {remaining_pages}/{tomorrow_divisor} = <<{remaining_pages}/{tomorrow_divisor}={pages_to_read_tomorrow}>>{pages_to_read_tomorrow} pages."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 4.\n    Returns: the number of pages James writes in a year.\n    \"\"\"\n    # L1\n    pages_per_letter = 3  # a 3-page letter\n    times_per_week = 2  # twice a week\n    pages_per_friend_per_week = pages_per_letter * times_per_week\n\n    # L2\n    num_friends = 2  # 2 different friends\n    total_pages_per_week = pages_per_friend_per_week * num_friends\n\n    # L3\n    weeks_per_year = 52  # a year\n    pages_per_year = total_pages_per_week * weeks_per_year\n\n    # FA\n    answer = pages_per_year\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_per_letter",
        "times_per_week"
      ],
      "output_variable": "pages_per_friend_per_week",
      "solution_line_template": "He writes each friend {pages_per_letter}*{times_per_week}=<<{pages_per_letter}*{times_per_week}={pages_per_friend_per_week}>>{pages_per_friend_per_week} pages a week"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_friends"
      ],
      "output_variable": "total_pages_per_week",
      "solution_line_template": "So he writes {pages_per_friend_per_week}*{num_friends}=<<{pages_per_friend_per_week}*{num_friends}={total_pages_per_week}>>{total_pages_per_week} pages every week"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "weeks_per_year"
      ],
      "output_variable": "pages_per_year",
      "solution_line_template": "That means he writes {total_pages_per_week}*{weeks_per_year}=<<{total_pages_per_week}*{weeks_per_year}={pages_per_year}>>{pages_per_year} pages a year"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 5.\n    Returns: the total number of flowers Mark has in his garden.\n    \"\"\"\n    # L1\n    num_yellow_flowers = 10  # Ten of them are yellow\n    purple_more_numerator = 80  # 80% more\n    one_hundred = 100  # 80/100\n    more_purple_flowers = purple_more_numerator / one_hundred * num_yellow_flowers\n\n    # L2\n    num_purple_flowers = num_yellow_flowers + more_purple_flowers\n\n    # L3\n    num_yellow_and_purple_flowers = num_yellow_flowers + num_purple_flowers\n\n    # L4\n    green_as_many_numerator = 25  # 25% as many\n    num_green_flowers = green_as_many_numerator / one_hundred * num_yellow_and_purple_flowers\n\n    # L5\n    total_flowers = num_yellow_and_purple_flowers + num_green_flowers\n\n    # FA\n    answer = total_flowers\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "purple_more_numerator",
        "one_hundred",
        "num_yellow_flowers"
      ],
      "output_variable": "more_purple_flowers",
      "solution_line_template": "There are {purple_more_numerator}/{one_hundred} * {num_yellow_flowers} = <<{purple_more_numerator}/{one_hundred}*{num_yellow_flowers}={more_purple_flowers}>>{more_purple_flowers} more purple flowers than yellow flowers."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "num_purple_flowers",
      "solution_line_template": "So in Mark's garden, there are {num_yellow_flowers} + {more_purple_flowers} = <<{num_yellow_flowers}+{more_purple_flowers}={num_purple_flowers}>>{num_purple_flowers} purple flowers."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "num_yellow_and_purple_flowers",
      "solution_line_template": "Purple and yellow flowers sum up to {num_yellow_flowers} + {num_purple_flowers} = <<{num_yellow_flowers}+{num_purple_flowers}={num_yellow_and_purple_flowers}>>{num_yellow_and_purple_flowers} flowers."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "green_as_many_numerator"
      ],
      "output_variable": "num_green_flowers",
      "solution_line_template": "That means in Mark's garden there are {green_as_many_numerator}/{one_hundred} * {num_yellow_and_purple_flowers} = <<{green_as_many_numerator}/{one_hundred}*{num_yellow_and_purple_flowers}={num_green_flowers}>>{num_green_flowers} green flowers."
    },
    {
      "line_number": "L5",
      "new_inputs": [],
      "output_variable": "total_flowers",
      "solution_line_template": "So in total Mark has {num_yellow_and_purple_flowers} + {num_green_flowers} = <<{num_yellow_and_purple_flowers}+{num_green_flowers}={total_flowers}>>{total_flowers} plants in his garden."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 6.\n    Returns: the total number of pizza pieces Albert eats.\n    \"\"\"\n    # L1\n    num_large_pizzas = 2 # buys 2 large pizzas\n    slices_per_large_pizza = 16 # A large pizza has 16 slices\n    large_pizza_slices = num_large_pizzas * slices_per_large_pizza\n\n    # L2\n    num_small_pizzas = 2 # and 2 small pizzas\n    slices_per_small_pizza = 8 # a small pizza has 8 slices\n    small_pizza_slices = num_small_pizzas * slices_per_small_pizza\n\n    # L3\n    total_slices = large_pizza_slices + small_pizza_slices\n\n    # FA\n    answer = total_slices\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "num_large_pizzas",
        "slices_per_large_pizza"
      ],
      "output_variable": "large_pizza_slices",
      "solution_line_template": "He eats {large_pizza_slices} from the largest pizzas because {num_large_pizzas} x {slices_per_large_pizza} = <<{num_large_pizzas}*{slices_per_large_pizza}={large_pizza_slices}>>{large_pizza_slices}"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_small_pizzas",
        "slices_per_small_pizza"
      ],
      "output_variable": "small_pizza_slices",
      "solution_line_template": "He eats {small_pizza_slices} from the small pizza because {num_small_pizzas} x {slices_per_small_pizza} = <<{num_small_pizzas}*{slices_per_small_pizza}={small_pizza_slices}>>{small_pizza_slices}"
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "total_slices",
      "solution_line_template": "He eats {total_slices} pieces because {large_pizza_slices} + {small_pizza_slices} = <<{large_pizza_slices}+{small_pizza_slices}={total_slices}>>{total_slices}"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 7.\n    Returns: the final weight of the box of goodies, in pounds.\n    \"\"\"\n    # L1\n    initial_jelly_beans_weight = 2  # enough jelly beans to bring the weight to 2 pounds\n    brownie_multiplier = 3  # cause the weight to triple\n    weight_after_brownies = initial_jelly_beans_weight * brownie_multiplier\n\n    # L2\n    added_jelly_beans_weight = 2  # added another 2 pounds of jelly beans\n    weight_after_more_jelly_beans = weight_after_brownies + added_jelly_beans_weight\n\n    # L3\n    gummy_worm_multiplier = 2  # double the weight once again\n    final_weight = weight_after_more_jelly_beans * gummy_worm_multiplier\n\n    # FA\n    answer = final_weight\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "initial_jelly_beans_weight",
        "brownie_multiplier"
      ],
      "output_variable": "weight_after_brownies",
      "solution_line_template": "To the initial {initial_jelly_beans_weight} pounds of jelly beans, he added enough brownies to cause the weight to triple, bringing the weight to {initial_jelly_beans_weight}*{brownie_multiplier}=<<{initial_jelly_beans_weight}*{brownie_multiplier}={weight_after_brownies}>>{weight_after_brownies} pounds."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "added_jelly_beans_weight"
      ],
      "output_variable": "weight_after_more_jelly_beans",
      "solution_line_template": "Next, he added another {added_jelly_beans_weight} pounds of jelly beans, bringing the weight to {weight_after_brownies}+{added_jelly_beans_weight}=<<{weight_after_brownies}+{added_jelly_beans_weight}={weight_after_more_jelly_beans}>>{weight_after_more_jelly_beans} pounds."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "gummy_worm_multiplier"
      ],
      "output_variable": "final_weight",
      "solution_line_template": "And finally, he added enough gummy worms to double the weight once again, to a final weight of {weight_after_more_jelly_beans}*{gummy_worm_multiplier}=<<{weight_after_more_jelly_beans}*{gummy_worm_multiplier}={final_weight}>>{final_weight} pounds."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 8.\n    Returns: the amount Alexis paid for the shoes.\n    \"\"\"\n    # L2\n    shirt_cost = 30 # spent $30 on a button-up shirt\n    pants_cost = 46 # $46 on suit pants\n    coat_cost = 38 # $38 on a suit coat\n    socks_cost = 11 # $11 on socks\n    belt_cost = 18 # $18 on a belt\n    known_items_cost = shirt_cost + pants_cost + coat_cost + socks_cost + belt_cost\n\n    # L3\n    budget = 200 # budget of $200\n    money_left = 16 # has $16 left\n    total_spent = budget - money_left\n\n    # L4\n    shoe_cost = total_spent - known_items_cost\n\n    # FA\n    answer = shoe_cost\n    return answer",
  "logical_steps": [
    {
      "line_number": "L2",
      "new_inputs": [
        "shirt_cost",
        "pants_cost",
        "coat_cost",
        "socks_cost",
        "belt_cost"
      ],
      "output_variable": "known_items_cost",
      "solution_line_template": "She spent S + {shirt_cost} + {pants_cost} + {coat_cost} + {socks_cost} + {belt_cost} = S + <<+{shirt_cost}+{pants_cost}+{coat_cost}+{socks_cost}+{belt_cost}={known_items_cost}>>{known_items_cost}."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "budget",
        "money_left"
      ],
      "output_variable": "total_spent",
      "solution_line_template": "She used all but ${money_left} of her budget, so S + {known_items_cost} = {budget} - {money_left} = {total_spent}."
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "shoe_cost",
      "solution_line_template": "Thus, Alexis paid S = {total_spent} - {known_items_cost} = $<<{total_spent}-{known_items_cost}={shoe_cost}>>{shoe_cost} for the shoes."
    }
  ]
}