{
  "function_code": "def solve():\n    \"\"\"Index: 0.\n    Returns: the total number of clips Natalia sold in April and May.\n    \"\"\"\n    # L1\n    april_clips = 48 # Natalia sold clips to 48 of her friends in April\n    may_divisor = 2 # she sold half as many clips in May\n    may_clips = april_clips / may_divisor\n\n    # L2\n    total_clips = april_clips + may_clips\n\n    # FA\n    answer = total_clips\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "april_clips",
        "may_divisor"
      ],
      "output_variable": "may_clips",
      "solution_line_template": "Natalia sold {april_clips}/{may_divisor} = <<{april_clips}/{may_divisor}={may_clips}>>{may_clips} clips in May."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_clips",
      "solution_line_template": "Natalia sold {april_clips}+{may_clips} = <<{april_clips}+{may_clips}={total_clips}>>{total_clips} clips altogether in April and May."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 1.\n    Returns: the amount Weng earned for 50 minutes of babysitting.\n    \"\"\"\n    # L1\n    hourly_rate = 12 # Weng earns $12 an hour\n    minutes_per_hour = 60 # 60 minutes in an hour\n    per_minute_rate = hourly_rate / minutes_per_hour\n\n    # L2\n    minutes_worked = 50 # she just did 50 minutes of babysitting\n    earnings = per_minute_rate * minutes_worked\n\n    # FA\n    answer = earnings\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "hourly_rate",
        "minutes_per_hour"
      ],
      "output_variable": "per_minute_rate",
      "solution_line_template": "Weng earns {hourly_rate}/{minutes_per_hour} = $<<{hourly_rate}/{minutes_per_hour}={per_minute_rate}>>{per_minute_rate} per minute."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "minutes_worked"
      ],
      "output_variable": "earnings",
      "solution_line_template": "Working {minutes_worked} minutes, she earned {per_minute_rate} x {minutes_worked} = $<<{per_minute_rate}*{minutes_worked}={earnings}>>{earnings}."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 2.\n    Returns: how much more money Betty needs to buy the wallet.\n    \"\"\"\n    # L1\n    wallet_cost = 100 # wallet which costs $100\n    half_denominator = 2 # only half of the money she needs\n    betty_initial = wallet_cost / half_denominator\n\n    # L2\n    parents_gift = 15 # her parents decided to give her $15\n    grandparents_multiplier = 2 # her grandparents twice as much as her parents\n    grandparents_gift = parents_gift * grandparents_multiplier\n\n    # L3\n    more_needed = wallet_cost - betty_initial - grandparents_gift - parents_gift\n\n    # FA\n    answer = more_needed\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "wallet_cost",
        "half_denominator"
      ],
      "output_variable": "betty_initial",
      "solution_line_template": "In the beginning, Betty has only {wallet_cost} / {half_denominator} = $<<{wallet_cost}/{half_denominator}={betty_initial}>>{betty_initial}."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "parents_gift",
        "grandparents_multiplier"
      ],
      "output_variable": "grandparents_gift",
      "solution_line_template": "Betty's grandparents gave her {parents_gift} * {grandparents_multiplier} = $<<{parents_gift}*{grandparents_multiplier}={grandparents_gift}>>{grandparents_gift}."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "more_needed",
      "solution_line_template": "This means, Betty needs {wallet_cost} - {betty_initial} - {grandparents_gift} - {parents_gift} = $<<{wallet_cost}-{betty_initial}-{grandparents_gift}-{parents_gift}={more_needed}>>{more_needed} more."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 3.\n    Returns: the number of pages Julie should read tomorrow.\n    \"\"\"\n    # L1\n    pages_read_yesterday = 12 # she was able to read 12 pages\n    today_multiplier = 2 # today, she read twice as many pages as yesterday\n    pages_read_today = pages_read_yesterday * today_multiplier\n\n    # L2\n    total_pages_read = pages_read_yesterday + pages_read_today\n\n    # L3\n    total_pages = 120 # Julie is reading a 120-page book\n    pages_left = total_pages - total_pages_read\n\n    # L4\n    tomorrow_fraction = 2 # she wants to read half of the remaining pages tomorrow\n    pages_to_read_tomorrow = pages_left / tomorrow_fraction\n\n    # FA\n    answer = pages_to_read_tomorrow\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_read_yesterday",
        "today_multiplier"
      ],
      "output_variable": "pages_read_today",
      "solution_line_template": "Maila read {pages_read_yesterday} x {today_multiplier} = <<{pages_read_yesterday}*{today_multiplier}={pages_read_today}>>{pages_read_today} pages today."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "total_pages_read",
      "solution_line_template": "So she was able to read a total of {pages_read_yesterday} + {pages_read_today} = <<{pages_read_yesterday}+{pages_read_today}={total_pages_read}>>{total_pages_read} pages since yesterday."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "total_pages"
      ],
      "output_variable": "pages_left",
      "solution_line_template": "There are {total_pages} - {total_pages_read} = <<{total_pages}-{total_pages_read}={pages_left}>>{pages_left} pages left to be read."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "tomorrow_fraction"
      ],
      "output_variable": "pages_to_read_tomorrow",
      "solution_line_template": "Since she wants to read half of the remaining pages tomorrow, then she should read {pages_left}/{tomorrow_fraction} = <<{pages_left}/{tomorrow_fraction}={pages_to_read_tomorrow}>>{pages_to_read_tomorrow} pages."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 4.\n    Returns: the total number of pages James writes in a year.\n    \"\"\"\n    # L1\n    pages_per_letter = 3 # 3-page letter\n    num_friends = 2 # to 2 different friends\n    pages_per_friend_per_week = pages_per_letter * num_friends\n\n    # L2\n    letters_per_week = 2 # twice a week\n    pages_per_week = pages_per_friend_per_week * letters_per_week\n\n    # L3\n    weeks_per_year = 52 # pages a year\n    pages_per_year = pages_per_week * weeks_per_year\n\n    # FA\n    answer = pages_per_year\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "pages_per_letter",
        "num_friends"
      ],
      "output_variable": "pages_per_friend_per_week",
      "solution_line_template": "He writes each friend {pages_per_letter}*{num_friends}=<<{pages_per_letter}*{num_friends}={pages_per_friend_per_week}>>{pages_per_friend_per_week} pages a week"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "letters_per_week"
      ],
      "output_variable": "pages_per_week",
      "solution_line_template": "So he writes {pages_per_friend_per_week}*{letters_per_week}=<<{pages_per_friend_per_week}*{letters_per_week}={pages_per_week}>>{pages_per_week} pages every week"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "weeks_per_year"
      ],
      "output_variable": "pages_per_year",
      "solution_line_template": "That means he writes {pages_per_week}*{weeks_per_year}=<<{pages_per_week}*{weeks_per_year}={pages_per_year}>>{pages_per_year} pages a year"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 5.\n    Returns: the total number of flowers in Mark's garden.\n    \"\"\"\n    # L1\n    purple_percent_numerator = 80 # 80% more of those in purple\n    purple_percent_denominator = 100 # 80/100\n    yellow_flowers = 10 # Ten of them are yellow\n    more_purple_flowers = purple_percent_numerator / purple_percent_denominator * yellow_flowers\n\n    # L2\n    purple_flowers = yellow_flowers + more_purple_flowers\n\n    # L3\n    yellow_and_purple_sum = yellow_flowers + purple_flowers\n\n    # L4\n    green_percent_numerator = 25 # 25% as many green flowers\n    green_percent_denominator = 100 # 25/100\n    green_flowers = green_percent_numerator / green_percent_denominator * yellow_and_purple_sum\n\n    # L5\n    total_flowers = yellow_and_purple_sum + green_flowers\n\n    # FA\n    answer = total_flowers\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "purple_percent_numerator",
        "purple_percent_denominator",
        "yellow_flowers"
      ],
      "output_variable": "more_purple_flowers",
      "solution_line_template": "There are {purple_percent_numerator}/{purple_percent_denominator} * {yellow_flowers} = <<{purple_percent_numerator}/{purple_percent_denominator}*{yellow_flowers}={more_purple_flowers}>>{more_purple_flowers} more purple flowers than yellow flowers."
    },
    {
      "line_number": "L2",
      "new_inputs": [],
      "output_variable": "purple_flowers",
      "solution_line_template": "So in Mark's garden, there are {yellow_flowers} + {more_purple_flowers} = <<{yellow_flowers}+{more_purple_flowers}={purple_flowers}>>{purple_flowers} purple flowers."
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "yellow_and_purple_sum",
      "solution_line_template": "Purple and yellow flowers sum up to {yellow_flowers} + {purple_flowers} = <<{yellow_flowers}+{purple_flowers}={yellow_and_purple_sum}>>{yellow_and_purple_sum} flowers."
    },
    {
      "line_number": "L4",
      "new_inputs": [
        "green_percent_numerator",
        "green_percent_denominator"
      ],
      "output_variable": "green_flowers",
      "solution_line_template": "That means in Mark's garden there are {green_percent_numerator}/{green_percent_denominator} * {yellow_and_purple_sum} = <<{green_percent_numerator}/{green_percent_denominator}*{yellow_and_purple_sum}={green_flowers}>>{green_flowers} green flowers."
    },
    {
      "line_number": "L5",
      "new_inputs": [],
      "output_variable": "total_flowers",
      "solution_line_template": "So in total Mark has {yellow_and_purple_sum} + {green_flowers} = <<{yellow_and_purple_sum}+{green_flowers}={total_flowers}>>{total_flowers} plants in his garden."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 6.\n    Returns: the total number of pizza slices Albert eats in one day.\n    \"\"\"\n    # L1\n    num_large_pizzas = 2 # buys 2 large pizzas\n    slices_per_large = 16 # a large pizza has 16 slices\n    large_total = num_large_pizzas * slices_per_large\n\n    # L2\n    num_small_pizzas = 2 # and 2 small pizzas\n    slices_per_small = 8 # a small pizza has 8 slices\n    small_total = num_small_pizzas * slices_per_small\n\n    # L3\n    total_slices = large_total + small_total\n\n    # FA\n    answer = total_slices\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "num_large_pizzas",
        "slices_per_large"
      ],
      "output_variable": "large_total",
      "solution_line_template": "He eats {large_total} from the largest pizzas because {num_large_pizzas} x {slices_per_large} = <<{num_large_pizzas}*{slices_per_large}={large_total}>>{large_total}"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "num_small_pizzas",
        "slices_per_small"
      ],
      "output_variable": "small_total",
      "solution_line_template": "He eats {small_total} from the small pizza because {num_small_pizzas} x {slices_per_small} = <<{num_small_pizzas}*{slices_per_small}={small_total}>>{small_total}"
    },
    {
      "line_number": "L3",
      "new_inputs": [],
      "output_variable": "total_slices",
      "solution_line_template": "He eats {total_slices} pieces because {large_total} + {small_total} = <<{large_total}+{small_total}={total_slices}>>{total_slices}"
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 7.\n    Returns: the final weight of the box of goodies, in pounds.\n    \"\"\"\n    # L1\n    initial_jelly_beans = 2 # weight to 2 pounds\n    brownies_multiplier = 3 # cause the weight to triple\n    after_brownies = initial_jelly_beans * brownies_multiplier\n\n    # L2\n    added_jelly_beans = 2 # added another 2 pounds of jelly beans\n    after_more_jelly_beans = after_brownies + added_jelly_beans\n\n    # L3\n    gummy_worms_multiplier = 2 # double the weight once again\n    final_weight = after_more_jelly_beans * gummy_worms_multiplier\n\n    # FA\n    answer = final_weight\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "initial_jelly_beans",
        "brownies_multiplier"
      ],
      "output_variable": "after_brownies",
      "solution_line_template": "To the initial {initial_jelly_beans} pounds of jelly beans, he added enough brownies to cause the weight to triple, bringing the weight to {initial_jelly_beans}*{brownies_multiplier}=<<{initial_jelly_beans}*{brownies_multiplier}={after_brownies}>>{after_brownies} pounds."
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "added_jelly_beans"
      ],
      "output_variable": "after_more_jelly_beans",
      "solution_line_template": "Next, he added another {added_jelly_beans} pounds of jelly beans, bringing the weight to {after_brownies}+{added_jelly_beans}=<<{after_brownies}+{added_jelly_beans}={after_more_jelly_beans}>>{after_more_jelly_beans} pounds."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "gummy_worms_multiplier"
      ],
      "output_variable": "final_weight",
      "solution_line_template": "And finally, he added enough gummy worms to double the weight once again, to a final weight of {after_more_jelly_beans}*{gummy_worms_multiplier}=<<{after_more_jelly_beans}*{gummy_worms_multiplier}={final_weight}>>{final_weight} pounds."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 8.\n    Returns: the amount Alexis paid for the shoes.\n    \"\"\"\n    # L2\n    shirt_cost = 30 # $30 on a button-up shirt\n    pants_cost = 46 # $46 on suit pants\n    coat_cost = 38 # $38 on a suit coat\n    socks_cost = 11 # $11 on socks\n    belt_cost = 18 # $18 on a belt\n    sum_other_items = shirt_cost + pants_cost + coat_cost + socks_cost + belt_cost\n\n    # L3\n    budget = 200 # budget of $200\n    money_left = 16 # $16 left from her budget\n    total_spent = budget - money_left\n\n    # L4\n    shoes_cost = total_spent - sum_other_items\n\n    # FA\n    answer = shoes_cost\n    return answer",
  "logical_steps": [
    {
      "line_number": "L2",
      "new_inputs": [
        "shirt_cost",
        "pants_cost",
        "coat_cost",
        "socks_cost",
        "belt_cost"
      ],
      "output_variable": "sum_other_items",
      "solution_line_template": "She spent S + {shirt_cost} + {pants_cost} + {coat_cost} + {socks_cost} + {belt_cost} = S + <<+{shirt_cost}+{pants_cost}+{coat_cost}+{socks_cost}+{belt_cost}={sum_other_items}>>{sum_other_items}."
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "budget",
        "money_left"
      ],
      "output_variable": "total_spent",
      "solution_line_template": "She used all but ${money_left} of her budget, so S + {sum_other_items} = {budget} - {money_left} = {total_spent}."
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "shoes_cost",
      "solution_line_template": "Thus, Alexis paid S = {total_spent} - {sum_other_items} = $<<{total_spent}-{sum_other_items}={shoes_cost}>>{shoes_cost} for the shoes."
    }
  ]
}
{
  "function_code": "def solve():\n    \"\"\"Index: 9.\n    Returns: the total amount of money Tina makes in 5 days including overtime.\n    \"\"\"\n    # L1\n    regular_hours_per_day = 8 # 8 hours a day\n    hourly_wage = 18 # $18 per hour\n    base_pay_per_day = regular_hours_per_day * hourly_wage\n\n    # L2\n    total_hours_per_day = 10 # She works 10 hours a day\n    overtime_threshold = 8 # anything over 8 hours is overtime\n    overtime_hours_per_day = total_hours_per_day - overtime_threshold\n\n    # L3\n    overtime_multiplier = 0.5 # overtime is paid at +1/2 hourly wage\n    overtime_extra = hourly_wage * overtime_multiplier\n\n    # L4\n    overtime_hourly_rate = hourly_wage + overtime_extra\n\n    # L5\n    days_worked = 5 # she works 5 days\n    total_base_pay = base_pay_per_day * days_worked\n\n    # L6\n    overtime_pay_per_day = overtime_hourly_rate * overtime_hours_per_day\n\n    # L7\n    total_overtime_pay = overtime_pay_per_day * days_worked\n\n    # L8\n    total_pay = total_base_pay + total_overtime_pay\n\n    # FA\n    answer = total_pay\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "new_inputs": [
        "regular_hours_per_day",
        "hourly_wage"
      ],
      "output_variable": "base_pay_per_day",
      "solution_line_template": "She works {regular_hours_per_day} hours a day for ${hourly_wage} per hour so she makes {regular_hours_per_day}*{hourly_wage} = $<<{regular_hours_per_day}*{hourly_wage}={base_pay_per_day}>>{base_pay_per_day} per 8-hour shift"
    },
    {
      "line_number": "L2",
      "new_inputs": [
        "total_hours_per_day",
        "overtime_threshold"
      ],
      "output_variable": "overtime_hours_per_day",
      "solution_line_template": "She works {total_hours_per_day} hours a day and anything over {overtime_threshold} hours is eligible for overtime, so she gets {total_hours_per_day}-{overtime_threshold} = <<{total_hours_per_day}-{overtime_threshold}={overtime_hours_per_day}>>{overtime_hours_per_day} hours of overtime"
    },
    {
      "line_number": "L3",
      "new_inputs": [
        "overtime_multiplier"
      ],
      "output_variable": "overtime_extra",
      "solution_line_template": "Overtime is calculated as time and a half so and she makes ${hourly_wage}/hour so her overtime pay is {hourly_wage}*{overtime_multiplier} = $<<{hourly_wage}*{overtime_multiplier}={overtime_extra}>>{overtime_extra}"
    },
    {
      "line_number": "L4",
      "new_inputs": [],
      "output_variable": "overtime_hourly_rate",
      "solution_line_template": "Her overtime pay is {hourly_wage}+{overtime_extra} = $<<{hourly_wage}+{overtime_extra}={overtime_hourly_rate}>>{overtime_hourly_rate}"
    },
    {
      "line_number": "L5",
      "new_inputs": [
        "days_worked"
      ],
      "output_variable": "total_base_pay",
      "solution_line_template": "Her base pay is ${base_pay_per_day} per 8-hour shift and she works {days_worked} days and makes {days_worked} * ${base_pay_per_day} = $<<{base_pay_per_day}*{days_worked}={total_base_pay}>>{total_base_pay}"
    },
    {
      "line_number": "L6",
      "new_inputs": [],
      "output_variable": "overtime_pay_per_day",
      "solution_line_template": "Her overtime pay is ${overtime_hourly_rate} per hour and she works {overtime_hours_per_day} hours of overtime per day and makes {overtime_hourly_rate}*{overtime_hours_per_day} = $<<{overtime_hourly_rate}*{overtime_hours_per_day}={overtime_pay_per_day}>>{overtime_pay_per_day} in overtime pay"
    },
    {
      "line_number": "L7",
      "new_inputs": [],
      "output_variable": "total_overtime_pay",
      "solution_line_template": "{overtime_hours_per_day} hours of overtime pay for {days_worked} days means she makes {overtime_pay_per_day}*{days_worked} = ${total_overtime_pay}"
    },
    {
      "line_number": "L8",
      "new_inputs": [],
      "output_variable": "total_pay",
      "solution_line_template": "In {days_worked} days her base pay is ${total_base_pay} and she makes ${total_overtime_pay} in overtime pay so she makes ${total_base_pay} + ${total_overtime_pay} = $<<{total_base_pay}+{total_overtime_pay}={total_pay}>>{total_pay}"
    }
  ]
}