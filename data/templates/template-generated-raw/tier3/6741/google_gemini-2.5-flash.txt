{
  "function_code": "from fractions import Fraction\n\ndef solve():\n    \"\"\"Index: 6741.\n    Returns: the number of episodes remaining for Cesar to finish the series.\n    \"\"\"\n    # L1\n    episodes_per_season = 20 # each season has 20 episodes\n    num_seasons = 12 # 12 seasons\n    total_episodes = episodes_per_season * num_seasons\n\n    # L2\n    fraction_watched = Fraction(1, 3) # watched 1/3 of the series\n    episodes_watched = fraction_watched * total_episodes\n\n    # L3\n    episodes_remaining = total_episodes - episodes_watched\n\n    # FA\n    answer = episodes_remaining\n    return answer",
  "logical_steps": [
    {
      "WK_inputs": [],
      "line_number": "L1",
      "output_variable": "total_episodes",
      "question_inputs": [
        "episodes_per_season",
        "num_seasons"
      ],
      "solution_line_template": "The total number of episodes in the series is {episodes_per_season} episodes per season* {num_seasons} seasons = <<{episodes_per_season}*{num_seasons}={total_episodes}>>{total_episodes} episodes"
    },
    {
      "WK_inputs": [],
      "line_number": "L2",
      "output_variable": "episodes_watched",
      "question_inputs": [
        "fraction_watched"
      ],
      "solution_line_template": "He watches {fraction_watched} of the series, {fraction_watched}*{total_episodes} = <<{fraction_watched}*{total_episodes}={episodes_watched}>>{episodes_watched} episodes."
    },
    {
      "WK_inputs": [],
      "line_number": "L3",
      "output_variable": "episodes_remaining",
      "question_inputs": [],
      "solution_line_template": "A total of {total_episodes}-{episodes_watched} = <<{total_episodes}-{episodes_watched}={episodes_remaining}>>{episodes_remaining} episodes were remaining for Cesar to finish the series"
    }
  ]
}