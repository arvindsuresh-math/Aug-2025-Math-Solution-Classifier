--- openai_gpt-4.1 Output for Index 4 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 4.\n    Returns: the total number of pages James writes in a year.\n    \"\"\"\n    # L1\n    pages_per_letter = 3 # 3-page letter\n    num_friends = 2 # 2 different friends\n    pages_per_week_per_time = pages_per_letter * num_friends\n\n    # L2\n    times_per_week = 2 # twice a week\n    pages_per_week = pages_per_week_per_time * times_per_week\n\n    # L3\n    weeks_per_year = 52 # WK\n    pages_per_year = pages_per_week * weeks_per_year\n\n    # FA\n    answer = pages_per_year\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["pages_per_letter", "num_friends"],
      "WK_inputs": [],
      "output_variable": "pages_per_week_per_time",
      "solution_line_template": "He writes each friend {pages_per_letter}*{num_friends}=<<{pages_per_letter}*{num_friends}={pages_per_week_per_time}>>{pages_per_week_per_time} pages a week"
    },
    {
      "line_number": "L2",
      "question_inputs": ["times_per_week"],
      "WK_inputs": [],
      "output_variable": "pages_per_week",
      "solution_line_template": "So he writes {pages_per_week_per_time}*{times_per_week}=<<{pages_per_week_per_time}*{times_per_week}={pages_per_week}>>{pages_per_week} pages every week"
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": ["weeks_per_year"],
      "output_variable": "pages_per_year",
      "solution_line_template": "That means he writes {pages_per_week}*{weeks_per_year}=<<{pages_per_week}*{weeks_per_year}={pages_per_year}>>{pages_per_year} pages a year"
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 4 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 4.\n    Returns: the total number of pages James writes a year.\n    \"\"\"\n    # L1\n    pages_per_letter = 3 # 3-page letter\n    times_per_week_per_friend = 2 # twice a week\n    pages_per_friend_per_week = pages_per_letter * times_per_week_per_friend\n\n    # L2\n    num_friends = 2 # 2 different friends\n    total_pages_per_week = pages_per_friend_per_week * num_friends\n\n    # L3\n    weeks_per_year = 52 # WK\n    total_pages_per_year = total_pages_per_week * weeks_per_year\n\n    # FA\n    answer = total_pages_per_year\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["pages_per_letter", "times_per_week_per_friend"],
      "WK_inputs": [],
      "output_variable": "pages_per_friend_per_week",
      "solution_line_template": "He writes each friend {pages_per_letter}*{times_per_week_per_friend}=<<{pages_per_letter}*{times_per_week_per_friend}={pages_per_friend_per_week}>>{pages_per_friend_per_week} pages a week"
    },
    {
      "line_number": "L2",
      "question_inputs": ["num_friends"],
      "WK_inputs": [],
      "output_variable": "total_pages_per_week",
      "solution_line_template": "So he writes {pages_per_friend_per_week}*{num_friends}=<<{pages_per_friend_per_week}*{num_friends}={total_pages_per_week}>>{total_pages_per_week} pages every week"
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": ["weeks_per_year"],
      "output_variable": "total_pages_per_year",
      "solution_line_template": "That means he writes {total_pages_per_week}*{weeks_per_year}=<<{total_pages_per_week}*{weeks_per_year}={total_pages_per_year}>>{total_pages_per_year} pages a year"
    }
  ]
}
```

--- openai_gpt-4.1 Output for Index 6 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 6.\n    Returns: the total number of pizza slices Albert eats in one day.\n    \"\"\"\n    # L1\n    num_large_pizzas = 2 # 2 large pizzas\n    slices_per_large = 16 # A large pizza has 16 slices\n    large_total = num_large_pizzas * slices_per_large\n\n    # L2\n    num_small_pizzas = 2 # 2 small pizzas\n    slices_per_small = 8 # A small pizza has 8 slices\n    small_total = num_small_pizzas * slices_per_small\n\n    # L3\n    total_slices = large_total + small_total\n\n    # FA\n    answer = total_slices\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["num_large_pizzas", "slices_per_large"],
      "WK_inputs": [],
      "output_variable": "large_total",
      "solution_line_template": "He eats {large_total} from the largest pizzas because {num_large_pizzas} x {slices_per_large} = <<{num_large_pizzas}*{slices_per_large}={large_total}>>{large_total}"
    },
    {
      "line_number": "L2",
      "question_inputs": ["num_small_pizzas", "slices_per_small"],
      "WK_inputs": [],
      "output_variable": "small_total",
      "solution_line_template": "He eats {small_total} from the small pizza because {num_small_pizzas} x {slices_per_small} = <<{num_small_pizzas}*{slices_per_small}={small_total}>>{small_total}"
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_slices",
      "solution_line_template": "He eats {total_slices} pieces because {large_total} + {small_total} = <<{large_total}+{small_total}={total_slices}>>{total_slices}"
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 6 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 6.\n    Returns: the total number of pizza pieces Albert eats.\n    \"\"\"\n    # L1\n    num_large_pizzas = 2 # 2 large pizzas\n    slices_per_large_pizza = 16 # large pizza has 16 slices\n    slices_from_large_pizzas = num_large_pizzas * slices_per_large_pizza\n\n    # L2\n    num_small_pizzas = 2 # 2 small pizzas\n    slices_per_small_pizza = 8 # small pizza has 8 slices\n    slices_from_small_pizzas = num_small_pizzas * slices_per_small_pizza\n\n    # L3\n    total_slices = slices_from_large_pizzas + slices_from_small_pizzas\n\n    # FA\n    answer = total_slices\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["num_large_pizzas", "slices_per_large_pizza"],
      "WK_inputs": [],
      "output_variable": "slices_from_large_pizzas",
      "solution_line_template": "He eats {slices_from_large_pizzas} from the largest pizzas because {num_large_pizzas} x {slices_per_large_pizza} = <<{num_large_pizzas}*{slices_per_large_pizza}={slices_from_large_pizzas}>>{slices_from_large_pizzas}"
    },
    {
      "line_number": "L2",
      "question_inputs": ["num_small_pizzas", "slices_per_small_pizza"],
      "WK_inputs": [],
      "output_variable": "slices_from_small_pizzas",
      "solution_line_template": "He eats {slices_from_small_pizzas} from the small pizza because {num_small_pizzas} x {slices_per_small_pizza} = <<{num_small_pizzas}*{slices_per_small_pizza}={slices_from_small_pizzas}>>{slices_from_small_pizzas}"
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_slices",
      "solution_line_template": "He eats {total_slices} pieces because {slices_from_large_pizzas} + {slices_from_small_pizzas} = <<{slices_from_large_pizzas}+{slices_from_small_pizzas}={total_slices}>>{total_slices}"
    }
  ]
}
```

--- openai_gpt-4.1 Output for Index 7 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 7.\n    Returns: the final weight of the box of goodies, in pounds.\n    \"\"\"\n    # L1\n    initial_jellybeans = 2 # weight to 2 pounds\n    triple_factor = 3 # cause the weight to triple\n    after_brownies = initial_jellybeans * triple_factor\n\n    # L2\n    added_jellybeans = 2 # added another 2 pounds of jelly beans\n    after_more_jellybeans = after_brownies + added_jellybeans\n\n    # L3\n    double_factor = 2 # double the weight once again\n    final_weight = after_more_jellybeans * double_factor\n\n    # FA\n    answer = final_weight\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["initial_jellybeans"],
      "WK_inputs": ["triple_factor"],
      "output_variable": "after_brownies",
      "solution_line_template": "To the initial {initial_jellybeans} pounds of jelly beans, he added enough brownies to cause the weight to triple, bringing the weight to {initial_jellybeans}*{triple_factor}=<<{initial_jellybeans}*{triple_factor}={after_brownies}>>{after_brownies} pounds."
    },
    {
      "line_number": "L2",
      "question_inputs": ["added_jellybeans"],
      "WK_inputs": [],
      "output_variable": "after_more_jellybeans",
      "solution_line_template": "Next, he added another {added_jellybeans} pounds of jelly beans, bringing the weight to {after_brownies}+{added_jellybeans}=<<{after_brownies}+{added_jellybeans}={after_more_jellybeans}>>{after_more_jellybeans} pounds."
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": ["double_factor"],
      "output_variable": "final_weight",
      "solution_line_template": "And finally, he added enough gummy worms to double the weight once again, to a final weight of {after_more_jellybeans}*{double_factor}=<<{after_more_jellybeans}*{double_factor}={final_weight}>>{final_weight} pounds."
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 7 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 7.\n    Returns: the final weight of the box of goodies in pounds.\n    \"\"\"\n    # L1\n    initial_jelly_beans_weight = 2 # 2 pounds\n    brownie_multiplier = 3 # cause the weight to triple\n    weight_after_brownies = initial_jelly_beans_weight * brownie_multiplier\n\n    # L2\n    added_jelly_beans_weight = 2 # another 2 pounds of jelly beans\n    weight_after_second_jelly_beans = weight_after_brownies + added_jelly_beans_weight\n\n    # L3\n    gummy_worm_multiplier = 2 # double the weight\n    final_weight = weight_after_second_jelly_beans * gummy_worm_multiplier\n\n    # FA\n    answer = final_weight\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["initial_jelly_beans_weight", "brownie_multiplier"],
      "WK_inputs": [],
      "output_variable": "weight_after_brownies",
      "solution_line_template": "To the initial {initial_jelly_beans_weight} pounds of jelly beans, he added enough brownies to cause the weight to triple, bringing the weight to {initial_jelly_beans_weight}*{brownie_multiplier}=<<{initial_jelly_beans_weight}*{brownie_multiplier}={weight_after_brownies}>>{weight_after_brownies} pounds."
    },
    {
      "line_number": "L2",
      "question_inputs": ["added_jelly_beans_weight"],
      "WK_inputs": [],
      "output_variable": "weight_after_second_jelly_beans",
      "solution_line_template": "Next, he added another {added_jelly_beans_weight} pounds of jelly beans, bringing the weight to {weight_after_brownies}+{added_jelly_beans_weight}=<<{weight_after_brownies}+{added_jelly_beans_weight}={weight_after_second_jelly_beans}>>{weight_after_second_jelly_beans} pounds."
    },
    {
      "line_number": "L3",
      "question_inputs": ["gummy_worm_multiplier"],
      "WK_inputs": [],
      "output_variable": "final_weight",
      "solution_line_template": "And finally, he added enough gummy worms to double the weight once again, to a final weight of {weight_after_second_jelly_beans}*{gummy_worm_multiplier}=<<{weight_after_second_jelly_beans}*{gummy_worm_multiplier}={final_weight}>>{final_weight} pounds."
    }
  ]
}
```

--- openai_gpt-4.1 Output for Index 17 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 17.\n    Returns: the total number of hard hats that remained in the truck.\n    \"\"\"\n    # L1\n    pink_initial = 26 # 26 pink hard hats\n    carl_pink_taken = 4 # Carl takes away 4 pink hard hats\n    pink_after_carl = pink_initial - carl_pink_taken\n\n    # L2\n    john_pink_taken = 6 # John takes away 6 pink hard hats\n    pink_after_john = pink_after_carl - john_pink_taken\n\n    # L3\n    john_green_taken = john_pink_taken * 2 # twice as many green hard hats as pink hard hats\n\n    # L4\n    green_initial = 15 # 15 green hard hats\n    green_after_john = green_initial - john_green_taken\n\n    # L5\n    green_and_pink_remaining = green_after_john + pink_after_john\n\n    # L6\n    yellow_initial = 24 # 24 yellow hard hats\n    answer = green_and_pink_remaining + yellow_initial\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["pink_initial", "carl_pink_taken"],
      "WK_inputs": [],
      "output_variable": "pink_after_carl",
      "solution_line_template": "If there were {pink_initial} pink hard hats and Carl took away {carl_pink_taken} pink hard hats, the number of pink hard hats that remained is {pink_initial}-{carl_pink_taken} = <<{pink_initial}-{carl_pink_taken}={pink_after_carl}>>{pink_after_carl}"
    },
    {
      "line_number": "L2",
      "question_inputs": ["john_pink_taken"],
      "WK_inputs": [],
      "output_variable": "pink_after_john",
      "solution_line_template": "John also took away {john_pink_taken} pink hard hats, leaving {pink_after_carl}-{john_pink_taken} = <<{pink_after_carl}-{john_pink_taken}={pink_after_john}>>{pink_after_john} pink hard hats in the truck."
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "john_green_taken",
      "solution_line_template": "If John also took twice as many green hard hats as pink hard hats, he took 2*{john_pink_taken} = <<{john_pink_taken}*2={john_green_taken}>>{john_green_taken} green hard hats."
    },
    {
      "line_number": "L4",
      "question_inputs": ["green_initial"],
      "WK_inputs": [],
      "output_variable": "green_after_john",
      "solution_line_template": "The total number of green hard hats that remained in the truck is {green_initial}-{john_green_taken} = <<{green_initial}-{john_green_taken}={green_after_john}>>{green_after_john}"
    },
    {
      "line_number": "L5",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "green_and_pink_remaining",
      "solution_line_template": "In the truck, after some are taken, there were {green_after_john} green hard hats + {pink_after_john} pink hard hats = <<{green_after_john}+{pink_after_john}={green_and_pink_remaining}>>{green_and_pink_remaining} hard hats in the truck."
    },
    {
      "line_number": "L6",
      "question_inputs": ["yellow_initial"],
      "WK_inputs": [],
      "output_variable": "answer",
      "solution_line_template": "Altogether, {green_and_pink_remaining} green and pink hard hats + {yellow_initial} yellow hards hats = <<{green_and_pink_remaining}+{yellow_initial}={answer}>>{answer} hard hats remained in the truck"
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 17 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 17.\n    Returns: the total number of hard hats that remained in the truck.\n    \"\"\"\n    # L1\n    initial_pink_hats = 26 # 26 pink hard hats\n    carl_took_pink = 4 # Carl takes away 4 pink hard hats\n    pink_hats_after_carl = initial_pink_hats - carl_took_pink\n\n    # L2\n    john_took_pink = 6 # John takes away 6 pink hard hats\n    pink_hats_after_john = pink_hats_after_carl - john_took_pink\n\n    # L3\n    multiplier_twice = 2 # twice as many green hard hats as the number of pink hard hats that he removed\n    john_took_green = multiplier_twice * john_took_pink\n\n    # L4\n    initial_green_hats = 15 # 15 green hard hats\n    green_hats_remaining = initial_green_hats - john_took_green\n\n    # L5\n    pink_and_green_remaining = green_hats_remaining + pink_hats_after_john\n\n    # L6\n    initial_yellow_hats = 24 # 24 yellow hard hats\n    total_remaining_hats = pink_and_green_remaining + initial_yellow_hats\n\n    # FA\n    answer = total_remaining_hats\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["initial_pink_hats", "carl_took_pink"],
      "WK_inputs": [],
      "output_variable": "pink_hats_after_carl",
      "solution_line_template": "If there were {initial_pink_hats} pink hard hats and Carl took away {carl_took_pink} pink hard hats, the number of pink hard hats that remained is {initial_pink_hats}-{carl_took_pink} = <<{initial_pink_hats}-{carl_took_pink}={pink_hats_after_carl}>>{pink_hats_after_carl}"
    },
    {
      "line_number": "L2",
      "question_inputs": ["john_took_pink"],
      "WK_inputs": [],
      "output_variable": "pink_hats_after_john",
      "solution_line_template": "John also took away {john_took_pink} pink hard hats, leaving {pink_hats_after_carl}-{john_took_pink} = <<{pink_hats_after_carl}-{john_took_pink}={pink_hats_after_john}>>{pink_hats_after_john} pink hard hats in the truck."
    },
    {
      "line_number": "L3",
      "question_inputs": ["multiplier_twice"],
      "WK_inputs": [],
      "output_variable": "john_took_green",
      "solution_line_template": "If John also took twice as many green hard hats as pink hard hats, he took {multiplier_twice}*{john_took_pink} = <<{john_took_pink}*{multiplier_twice}={john_took_green}>>{john_took_green} green hard hats."
    },
    {
      "line_number": "L4",
      "question_inputs": ["initial_green_hats"],
      "WK_inputs": [],

--- openai_gpt-4.1 Output for Index 18 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 18.\n    Returns: the total number of hours Roque takes to get to and from work in a week with walking and biking.\n    \"\"\"\n    # L1\n    walk_to_work_time = 2 # takes Roque two hours to walk to work\n    walk_days = 3 # walks to and from work three times a week\n    walk_oneway_total = walk_to_work_time * walk_days\n\n    # L2\n    walk_roundtrip_multiplier = 2 # to and from work\n    walk_total = walk_oneway_total * walk_roundtrip_multiplier\n\n    # L3\n    bike_to_work_time = 1 # one hour to ride his bike to work\n    bike_days = 2 # rides his bike to and from work twice a week\n    bike_oneway_total = bike_to_work_time * bike_days\n\n    # L4\n    bike_roundtrip_multiplier = 2 # to and from work\n    bike_total = bike_oneway_total * bike_roundtrip_multiplier\n\n    # L5\n    total_hours = walk_total + bike_total\n\n    # FA\n    answer = total_hours\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["walk_to_work_time", "walk_days"],
      "WK_inputs": [],
      "output_variable": "walk_oneway_total",
      "solution_line_template": "Roque takes {walk_to_work_time}*{walk_days} = <<{walk_to_work_time}*{walk_days}={walk_oneway_total}>>{walk_oneway_total} hours a week to walk to work."
    },
    {
      "line_number": "L2",
      "question_inputs": ["walk_roundtrip_multiplier"],
      "WK_inputs": [],
      "output_variable": "walk_total",
      "solution_line_template": "Roque takes {walk_oneway_total}*{walk_roundtrip_multiplier} = <<{walk_oneway_total}*{walk_roundtrip_multiplier}={walk_total}>>{walk_total} hours a week to walk to and from work."
    },
    {
      "line_number": "L3",
      "question_inputs": ["bike_to_work_time", "bike_days"],
      "WK_inputs": [],
      "output_variable": "bike_oneway_total",
      "solution_line_template": "Roque takes {bike_to_work_time}*{bike_days} = <<{bike_to_work_time}*{bike_days}={bike_oneway_total}>>{bike_oneway_total} hours a week to bike to work."
    },
    {
      "line_number": "L4",
      "question_inputs": ["bike_roundtrip_multiplier"],
      "WK_inputs": [],
      "output_variable": "bike_total",
      "solution_line_template": "Roque takes {bike_oneway_total}*{bike_roundtrip_multiplier} = <<{bike_oneway_total}*{bike_roundtrip_multiplier}={bike_total}>>{bike_total} hours a week to bike to and from work."
    },
    {
      "line_number": "L5",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_hours",
      "solution_line_template": "In total, Roque takes {walk_total}+{bike_total} = <<{walk_total}+{bike_total}={total_hours}>>{total_hours} hour a week to go to and from work."
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 18 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 18.\n    Returns: the total hours Roque takes to get to and from work a week with walking and biking.\n    \"\"\"\n    # L1\n    walk_time_one_way = 2 # two hours to walk to work\n    walk_trips_per_week = 3 # walks to and from work three times a week\n    walk_to_work_hours_per_week = walk_time_one_way * walk_trips_per_week\n\n    # L2\n    round_trip_multiplier = 2 # to and from work\n    total_walk_hours_per_week = walk_to_work_hours_per_week * round_trip_multiplier\n\n    # L3\n    bike_time_one_way = 1 # one hour to ride his bike to work\n    bike_trips_per_week = 2 # rides his bike to and from work twice a week\n    bike_to_work_hours_per_week = bike_time_one_way * bike_trips_per_week\n\n    # L4\n    total_bike_hours_per_week = bike_to_work_hours_per_week * round_trip_multiplier\n\n    # L5\n    total_hours_per_week = total_walk_hours_per_week + total_bike_hours_per_week\n\n    # FA\n    answer = total_hours_per_week\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["walk_time_one_way", "walk_trips_per_week"],
      "WK_inputs": [],
      "output_variable": "walk_to_work_hours_per_week",
      "solution_line_template": "Roque takes {walk_time_one_way}*{walk_trips_per_week} = <<{walk_time_one_way}*{walk_trips_per_week}={walk_to_work_hours_per_week}>>{walk_to_work_hours_per_week} hours a week to walk to work."
    },
    {
      "line_number": "L2",
      "question_inputs": [],
      "WK_inputs": ["round_trip_multiplier"],
      "output_variable": "total_walk_hours_per_week",
      "solution_line_template": "Roque takes {walk_to_work_hours_per_week}*{round_trip_multiplier} = <<{walk_to_work_hours_per_week}*{round_trip_multiplier}={total_walk_hours_per_week}>>{total_walk_hours_per_week} hours a week to walk to and from work."
    },
    {
      "line_number": "L3",
      "question_inputs": ["bike_time_one_way", "bike_trips_per_week"],
      "WK_inputs": [],
      "output_variable": "bike_to_work_hours_per_week",
      "solution_line_template": "Roque takes {bike_time_one_way}*{bike_trips_per_week} = <<{bike_time_one_way}*{bike_trips_per_week}={bike_to_work_hours_per_week}>>{bike_to_work_hours_per_week} hours a week to bike to work."
    },
    {
      "line_number": "L4",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_bike_hours_per_week",
      "solution_line_template": "Roque takes {bike_to_work_hours_per_week}*{round_trip_multiplier} = <<{bike_to_work_hours_per_week}*{round_trip_multiplier}={total_bike_hours_per_week}>>{total_bike_hours_per_week} hours a week to bike to and from work."
    },
    {
      "line_number": "L5",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_hours_per_week",
      "solution_line_template": "In total, Roque takes {total_walk_hours_per_week}+{total_bike_hours_per_week} = <<{total_walk_hours_per_week}+{total_bike_hours_per_week}={total_hours_per_week}>>{total_hours_per_week} hour a week to go to and from work."
    }
  ]
}
```

--- openai_gpt-4.1 Output for Index 20 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 20.\n    Returns: the total number of stamps Bella bought in all.\n    \"\"\"\n    # L1\n    snowflake_stamps = 11 # Bella bought 11 snowflake stamps\n    truck_more_than_snowflake = 9 # 9 more truck stamps than snowflake stamps\n    truck_stamps = snowflake_stamps + truck_more_than_snowflake\n\n    # L2\n    rose_fewer_than_truck = 13 # 13 fewer rose stamps than truck stamps\n    rose_stamps = truck_stamps - rose_fewer_than_truck\n\n    # L3\n    total_stamps = snowflake_stamps + truck_stamps + rose_stamps\n\n    # FA\n    answer = total_stamps\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["snowflake_stamps", "truck_more_than_snowflake"],
      "WK_inputs": [],
      "output_variable": "truck_stamps",
      "solution_line_template": "The number of truck stamps is {snowflake_stamps} + {truck_more_than_snowflake} = <<{snowflake_stamps}+{truck_more_than_snowflake}={truck_stamps}>>{truck_stamps}."
    },
    {
      "line_number": "L2",
      "question_inputs": ["rose_fewer_than_truck"],
      "WK_inputs": [],
      "output_variable": "rose_stamps",
      "solution_line_template": "The number of rose stamps is {truck_stamps} − {rose_fewer_than_truck} = <<{truck_stamps}-{rose_fewer_than_truck}={rose_stamps}>>{rose_stamps}."
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_stamps",
      "solution_line_template": "Bella bought {snowflake_stamps} + {truck_stamps} + {rose_stamps} = <<{snowflake_stamps}+{truck_stamps}+{rose_stamps}={total_stamps}>>{total_stamps} stamps in all."
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 20 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 20.\n    Returns: the total number of stamps Bella bought.\n    \"\"\"\n    # L1\n    snowflake_stamps = 11 # 11 snowflake stamps\n    more_truck_than_snowflake = 9 # 9 more truck stamps than snowflake stamps\n    truck_stamps = snowflake_stamps + more_truck_than_snowflake\n\n    # L2\n    fewer_rose_than_truck = 13 # 13 fewer rose stamps than truck stamps\n    rose_stamps = truck_stamps - fewer_rose_than_truck\n\n    # L3\n    total_stamps = snowflake_stamps + truck_stamps + rose_stamps\n\n    # FA\n    answer = total_stamps\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["snowflake_stamps", "more_truck_than_snowflake"],
      "WK_inputs": [],
      "output_variable": "truck_stamps",
      "solution_line_template": "The number of truck stamps is {snowflake_stamps} + {more_truck_than_snowflake} = <<{snowflake_stamps}+{more_truck_than_snowflake}={truck_stamps}>>{truck_stamps}."
    },
    {
      "line_number": "L2",
      "question_inputs": ["fewer_rose_than_truck"],
      "WK_inputs": [],
      "output_variable": "rose_stamps",
      "solution_line_template": "The number of rose stamps is {truck_stamps} − {fewer_rose_than_truck} = <<{truck_stamps}-{fewer_rose_than_truck}={rose_stamps}>>{rose_stamps}."
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_stamps",
      "solution_line_template": "Bella bought {snowflake_stamps} + {truck_stamps} + {rose_stamps} = <<{snowflake_stamps}+{truck_stamps}+{rose_stamps}={total_stamps}>>{total_stamps} stamps in all."
    }
  ]
}
```

--- openai_gpt-4.1 Output for Index 21 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 21.\n    Returns: the total number of beetles eaten each day in the forest.\n    \"\"\"\n    # L1\n    snakes_per_jaguar = 5 # each jaguar eats 5 snakes per day\n    num_jaguars = 6 # 6 jaguars in a forest\n    total_snakes_eaten = snakes_per_jaguar * num_jaguars\n\n    # L2\n    birds_per_snake = 3 # each snake eats 3 birds per day\n    total_birds_eaten = total_snakes_eaten * birds_per_snake\n\n    # L3\n    beetles_per_bird = 12 # each bird eats 12 beetles per day\n    total_beetles_eaten = total_birds_eaten * beetles_per_bird\n\n    # FA\n    answer = total_beetles_eaten\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["snakes_per_jaguar", "num_jaguars"],
      "WK_inputs": [],
      "output_variable": "total_snakes_eaten",
      "solution_line_template": "First find the total number of snakes eaten: {snakes_per_jaguar} snakes/jaguar * {num_jaguars} jaguars = <<{snakes_per_jaguar}*{num_jaguars}={total_snakes_eaten}>>{total_snakes_eaten} snakes"
    },
    {
      "line_number": "L2",
      "question_inputs": ["birds_per_snake"],
      "WK_inputs": [],
      "output_variable": "total_birds_eaten",
      "solution_line_template": "Then find the total number of birds eaten per day: {total_snakes_eaten} snakes * {birds_per_snake} birds/snake = <<{total_snakes_eaten}*{birds_per_snake}={total_birds_eaten}>>{total_birds_eaten} snakes"
    },
    {
      "line_number": "L3",
      "question_inputs": ["beetles_per_bird"],
      "WK_inputs": [],
      "output_variable": "total_beetles_eaten",
      "solution_line_template": "Then multiply the number of snakes by the number of beetles per snake to find the total number of beetles eaten per day: {total_birds_eaten} snakes * {beetles_per_bird} beetles/snake = <<{total_birds_eaten}*{beetles_per_bird}={total_beetles_eaten}>>{total_beetles_eaten} beetles"
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 21 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 21.\n    Returns: the total number of beetles eaten each day.\n    \"\"\"\n    # L1\n    snakes_per_jaguar = 5 # 5 snakes per day\n    num_jaguars = 6 # 6 jaguars in a forest\n    total_snakes = snakes_per_jaguar * num_jaguars\n\n    # L2\n    birds_per_snake = 3 # 3 birds per day\n    total_birds = total_snakes * birds_per_snake\n\n    # L3\n    beetles_per_bird = 12 # 12 beetles per day\n    total_beetles = total_birds * beetles_per_bird\n\n    # FA\n    answer = total_beetles\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["snakes_per_jaguar", "num_jaguars"],
      "WK_inputs": [],
      "output_variable": "total_snakes",
      "solution_line_template": "First find the total number of snakes eaten: {snakes_per_jaguar} snakes/jaguar * {num_jaguars} jaguars = <<{snakes_per_jaguar}*{num_jaguars}={total_snakes}>>{total_snakes} snakes"
    },
    {
      "line_number": "L2",
      "question_inputs": ["birds_per_snake"],
      "WK_inputs": [],
      "output_variable": "total_birds",
      "solution_line_template": "Then find the total number of birds eaten per day: {total_snakes} snakes * {birds_per_snake} birds/snake = <<{total_snakes}*{birds_per_snake}={total_birds}>>{total_birds} snakes"
    },
    {
      "line_number": "L3",
      "question_inputs": ["beetles_per_bird"],
      "WK_inputs": [],
      "output_variable": "total_beetles",
      "solution_line_template": "Then multiply the number of snakes by the number of beetles per snake to find the total number of beetles eaten per day: {total_birds} snakes * {beetles_per_bird} beetles/snake = <<{total_birds}*{beetles_per_bird}={total_beetles}>>{total_beetles} beetles"
    }
  ]
}
```

--- openai_gpt-4.1 Output for Index 22 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 22.\n    Returns: the number of letters in Samantha's last name.\n    \"\"\"\n    # L1\n    jamie_last_name_letters = 4 # Jamie Grey (last name 'Grey' has 4 letters)\n    bobbie_twice_jamie = 2 # twice the length of Jamie’s\n    bobbie_extra_letters = 2 # two letters off her last name\n    bobbie_last_name_letters = jamie_last_name_letters * bobbie_twice_jamie + bobbie_extra_letters\n\n    # L2\n    samantha_fewer_than_bobbie = 3 # three fewer letters than Bobbie’s\n    samantha_last_name_letters = bobbie_last_name_letters - samantha_fewer_than_bobbie\n\n    # FA\n    answer = samantha_last_name_letters\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["jamie_last_name_letters", "bobbie_twice_jamie", "bobbie_extra_letters"],
      "WK_inputs": [],
      "output_variable": "bobbie_last_name_letters",
      "solution_line_template": "There are {jamie_last_name_letters} letters in Jamie’s last name, so Bobbie’s name is {jamie_last_name_letters}*{bobbie_twice_jamie} +{bobbie_extra_letters} = <<{jamie_last_name_letters}*{bobbie_twice_jamie}+{bobbie_extra_letters}={bobbie_last_name_letters}>>{bobbie_last_name_letters} letters long."
    },
    {
      "line_number": "L2",
      "question_inputs": ["samantha_fewer_than_bobbie"],
      "WK_inputs": [],
      "output_variable": "samantha_last_name_letters",
      "solution_line_template": "Samantha’s last name is {samantha_fewer_than_bobbie} letters shorter than Bobbie’s, so there are {bobbie_last_name_letters} - {samantha_fewer_than_bobbie} = <<{bobbie_last_name_letters}-{samantha_fewer_than_bobbie}={samantha_last_name_letters}>>{samantha_last_name_letters} letters in Samantha’s last name."
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 22 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 22.\n    Returns: the number of letters in Samantha's last name.\n    \"\"\"\n    # L1\n    jamie_last_name_length = 4 # Jamie's full name is Jamie Grey.\n    multiplier_for_bobbie = 2 # twice the length of Jamie's\n    bobbie_letters_added_back = 2 # took two letters off her last name\n    bobbie_last_name_length = jamie_last_name_length * multiplier_for_bobbie + bobbie_letters_added_back\n\n    # L2\n    samantha_fewer_letters = 3 # three fewer letters than Bobbie's last name\n    samantha_last_name_length = bobbie_last_name_length - samantha_fewer_letters\n\n    # FA\n    answer = samantha_last_name_length\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["jamie_last_name_length", "multiplier_for_bobbie", "bobbie_letters_added_back"],
      "WK_inputs": [],
      "output_variable": "bobbie_last_name_length",
      "solution_line_template": "There are {jamie_last_name_length} letters in Jamie’s last name, so Bobbie’s name is {jamie_last_name_length}*{multiplier_for_bobbie} + {bobbie_letters_added_back} = <<{jamie_last_name_length}*{multiplier_for_bobbie}+{bobbie_letters_added_back}={bobbie_last_name_length}>>{bobbie_last_name_length} letters long."
    },
    {
      "line_number": "L2",
      "question_inputs": ["samantha_fewer_letters"],
      "WK_inputs": [],
      "output_variable": "samantha_last_name_length",
      "solution_line_template": "Samantha’s last name is {samantha_fewer_letters} letters shorter than Bobbie’s, so there are {bobbie_last_name_length} - {samantha_fewer_letters} = <<{bobbie_last_name_length}-{samantha_fewer_letters}={samantha_last_name_length}>>{samantha_last_name_length} letters in Samantha’s last name."
    }
  ]
}
```

--- openai_gpt-4.1 Output for Index 24 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 24.\n    Returns: the amount of credit Mary needs to pay before her next shopping trip.\n    \"\"\"\n    # L1\n    paid_tuesday = 15 # paid $15 of it on Tuesday\n    paid_thursday = 23 # paid $23 of it on Thursday\n    total_paid = paid_tuesday + paid_thursday\n\n    # L2\n    credit_limit = 100 # allowed a credit of $100\n    remaining_credit = credit_limit - total_paid\n\n    # FA\n    answer = remaining_credit\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["paid_tuesday", "paid_thursday"],
      "WK_inputs": [],
      "output_variable": "total_paid",
      "solution_line_template": "So far, Mary has paid back ${paid_tuesday} +${paid_thursday}=$<<{paid_tuesday}+{paid_thursday}={total_paid}>>{total_paid} of the credit."
    },
    {
      "line_number": "L2",
      "question_inputs": ["credit_limit"],
      "WK_inputs": [],
      "output_variable": "remaining_credit",
      "solution_line_template": "So she still needs to pay ${credit_limit}-${total_paid}=$<<{credit_limit}-{total_paid}={remaining_credit}>>{remaining_credit}"
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 24 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 24.\n    Returns: the amount of credit Mary needs to pay before her next shopping trip.\n    \"\"\"\n    # L1\n    paid_tuesday = 15 # paid $15 of it on Tuesday\n    paid_thursday = 23 # paid $23 of it on Thursday\n    total_paid_so_far = paid_tuesday + paid_thursday\n\n    # L2\n    credit_limit = 100 # credit of $100\n    remaining_to_pay = credit_limit - total_paid_so_far\n\n    # FA\n    answer = remaining_to_pay\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["paid_tuesday", "paid_thursday"],
      "WK_inputs": [],
      "output_variable": "total_paid_so_far",
      "solution_line_template": "So far, Mary has paid back ${paid_tuesday} +${paid_thursday}=${<<{paid_tuesday}+{paid_thursday}={total_paid_so_far}>>{total_paid_so_far}} of the credit."
    },
    {
      "line_number": "L2",
      "question_inputs": ["credit_limit"],
      "WK_inputs": [],
      "output_variable": "remaining_to_pay",
      "solution_line_template": "So she still needs to pay ${credit_limit}-${total_paid_so_far}=${<<{credit_limit}-{total_paid_so_far}={remaining_to_pay}>>{remaining_to_pay}}"
    }
  ]
}
```

--- openai_gpt-4.1 Output for Index 28 ---
{
  "function_code": "def solve():\n    \"\"\"Index: 28.\n    Returns: the number of gnomes in the fifth house.\n    \"\"\"\n    # L1\n    num_first_houses = 4 # first four houses\n    gnomes_per_house = 3 # each of the first four houses has 3 gnomes\n    gnomes_first_four = num_first_houses * gnomes_per_house\n\n    # L2\n    total_gnomes = 20 # total of 20 gnomes on the street\n    gnomes_fifth_house = total_gnomes - gnomes_first_four\n\n    # FA\n    answer = gnomes_fifth_house\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["num_first_houses", "gnomes_per_house"],
      "WK_inputs": [],
      "output_variable": "gnomes_first_four",
      "solution_line_template": "In the first four houses, there are a total of {num_first_houses} houses * {gnomes_per_house} gnomes = <<{num_first_houses}*{gnomes_per_house}={gnomes_first_four}>>{gnomes_first_four} gnomes."
    },
    {
      "line_number": "L2",
      "question_inputs": ["total_gnomes"],
      "WK_inputs": [],
      "output_variable": "gnomes_fifth_house",
      "solution_line_template": "Therefore, the fifth house had {total_gnomes} total gnomes – {gnomes_first_four} gnomes = <<{total_gnomes}-{gnomes_first_four}={gnomes_fifth_house}>>{gnomes_fifth_house} gnomes."
    }
  ]
}

--- google_gemini-2.5-flash Output for Index 28 ---
```json
{
  "function_code": "def solve():\n    \"\"\"Index: 28.\n    Returns: the number of gnomes the fifth house has.\n    \"\"\"\n    # L1\n    num_first_four_houses = 4 # first four houses\n    gnomes_per_house = 3 # 3 gnomes in the garden\n    gnomes_first_four_houses = num_first_four_houses * gnomes_per_house\n\n    # L2\n    total_gnomes = 20 # total of 20 gnomes on the street\n    gnomes_fifth_house = total_gnomes - gnomes_first_four_houses\n\n    # FA\n    answer = gnomes_fifth_house\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["num_first_four_houses", "gnomes_per_house"],
      "WK_inputs": [],
      "output_variable": "gnomes_first_four_houses",
      "solution_line_template": "In the first four houses, there are a total of {num_first_four_houses} houses * {gnomes_per_house} gnomes = <<{num_first_four_houses}*{gnomes_per_house}={gnomes_first_four_houses}>>{gnomes_first_four_houses} gnomes."
    },
    {
      "line_number": "L2",
      "question_inputs": ["total_gnomes"],
      "WK_inputs": [],
      "output_variable": "gnomes_fifth_house",
      "solution_line_template": "Therefore, the fifth house had {total_gnomes} total gnomes – {gnomes_first_four_houses} gnomes = <<{total_gnomes}-{gnomes_first_four_houses}={gnomes_fifth_house}>>{gnomes_fifth_house} gnomes."
    }
  ]
}
```