Of course. Here is the complete user prompt prefix for Tier 4, which handles decimals, fractions, and division. It uses the four specified examples and leaves a placeholder for the notes section.

---
In the TASK below, you will be given a math problem and its corresponding step-by-step solution. Each step in the solution is numbered (e.g. "L1", "L2" and so on), and many of the steps include calculator annotations (e.g. "<<20*0.1=2>>"). Your goal is to convert this information into a structured JSON object according to the following schema and detailed instructions.

# JSON Schema Definition

Your output must adhere to the following JSON structure:

```json
{
  "function_code": "A single string containing a complete, self-contained Python function that constitutes an end-to-end formalization of the solution.",
  "logical_steps": [
    {
      "line_number": "The line number from the original solution (e.g., 'L1', 'L2').",
      "question_inputs": "A (possibly empty) list of variable names with values extracted from the question text, used for the first time in this step.",
      "WK_inputs": "A (possibly empty) list of variable names with values coming from 'world knowledge' (e.g., minutes_per_hour), used for the first time in this step.",
      "output_variable": "The name of the variable being assigned as the result of the main computation in this step.",
      "solution_line_template": "The complete original line from the solution, including the calculator annotation, with all computational numbers replaced by `{variable_name}` placeholders."
    }
  ]
}
```

# Detailed Field Instructions

## 1. "function_code"

This string must contain a Python function with the following characteristics:

*   **1.A. Handling Imports:** The `function_code` should have no imports **unless** your formalization requires the `Fraction` object.
    *   If your code uses the `Fraction()` constructor, the very first line of the string MUST be `from fractions import Fraction`.
    *   If your code does **not** use the `Fraction()` constructor (e.g., it only uses integers, floats, or standard division `/`), the function definition `def solve():` MUST be the very first line.
*   **1.B. Function Naming & Docstring:** The function must be named `solve`, and it should not have any args. It must begin with a docstring that has exactly two lines:
    *   **1.B.i.** The first line must be: "Index: [Index]." using the index from the task header.
    *   **1.B.ii.** The second line must be a succinct, one-sentence description of what the function returns (e.g., "Returns: the total cost of wages and taxes.").
*   **1.C. Line comments:** For each solution line that is used to compute the final answer, include a comment of the form `# L1`, `# L2` and so on, which references the line number.
    *   **1.C.i.** Such a comment must immediately be followed by a code block that precisely formalizes the corresponding solution line. More details about code blocks are provided in 1.D below.
    *   **1.C.ii.** If a solution line does not contain any computation relevant to the final answer, then omit it completely from the function code and do NOT add a corresponding line comment.
*   **1.D. Code blocks:** Each code block constitutes a complete formalization of its corresponding solution line. It must consist of the following:
    *   **1.D.i. Input Variables** First, define any NEW variables needed for the computation, i.e. that will be used for the first time in the solution. Each input variable MUST be followed by a comment (`#`) in the same line. These variables fall into two categories:
        *   "question_inputs": These are variables whose values are stated in or can be extracted from the question text (only the question text, NOT the answer text). The comment for these variables should quote or refer to the phrase in the question text from which it is extracted.
        *   "WK_inputs": These are variables drawn from common-sense "World Knowledge" (e.g. `minutes_per_hour = 60`, `dozen = 12`). The comment for these variables MUST simply say `# WK`.
    *   **1.D.ii. Output Variables** Second, there should be EXACTLY ONE line of code which formalizes the computation in the solution line and assigns the resulting value to a new variable (this is the "output_variable" field).
*   **1.E. The Direct Substitution Rule:** This is the MOST IMPORTANT RULE, which ensures that the "solution_line_template" is purely identical to the original solution line except that numerical values in computations have been replaced with variable placeholders: You MUST define variables in such a way that they can be DIRECTLY SUBSTITUTED into the solution line without changing any operators or surrounding text in the line.
*   **1.F. Final Answer:** The line that assigns the final result to the `answer` variable must be immediately preceded by a line containing only the comment `# FA`. The last line of the function must always return the `answer` variable.

## 2. "solution_line_template"

*   **2.A.** The template should be EXACTLY identical to the original solution line, with the ONLY CHANGES being that every NUMERICAL value used in a computation is replaced by its corresponding `{variable_name}` placeholder. This applies to the entire content of the solution line, including the inside and outside of the calculator annotations.
*   **2.B.** In particular, EVERY SINGLE numerical value appearing inside the calculator annotation (`<<..>>`) MUST be replaced with a `{variable_name}` placeholder.
*   **2.C.** Note: some quantities may appear as words in the solution line (e.g. "twice as many"). Do NOT attempt to replace these with variable name placeholders.
*   **2.D.** The Direct Substitution Rule will ensure that for correctly defined variables, it will be possible to replace the numerical values with variable name placeholders while leaving all surrounding text, symbols, and operators unchanged. Thus, in a correct "solution_line_template", the calculator annotation will not contain any numerical values, and moreover, replacing each `{variable_name}` by its value should exactly recover the original solution line, including the original calculator annotation.

# Examples

Given below are three examples that illustrate what a perfect formalization will look like. For each example, you are given the following:

*   Input: consisting of an index, question, and solution mapping.
*   Output: complete output, wrapped inside ```json .. ```

In all examples, you will observe the following:

*   **A rigid adherence to the Direct Substitution Rule (1.E)**. This is the most important principle. The `solution_line_template` must be an exact copy of the original solution line, with only computational numbers replaced by `{variable}` placeholders. Every other point follows from this rule.

*   **How to formalize a rational number depends entirely on how it appears in the solution text.** It is crucial to distinguish between `floats`, `Fractions`, and the division operation (`/`).
    *   **Use `float` for decimals:** In **Example 1**, "half" is used in the calculation as `0.5`, so it is formalized as `kevin_nice_fraction = 0.5`. In **Example 3**, "30 percent" is used as `.30`, formalized as `third_night_stolen_percent = 0.30`.
    *   **Use `fractions.Fraction` for fractional quantities:** If "/" acts as a separator within a single fractional quantity, use `Fraction`. In **Example 1**, "three-fourths" appears as `(3/4)`, so it is formalized as `Fraction(3, 4)`. This requires the `from fractions import Fraction` import.
    *   **Use the `/` operator for division operations:** If "/" represents the operation of dividing two values, use the standard operator. In **Example 2**, the solution `300/100` is a division operation, formalized using `/`: `total_dollars = total_cents / cents_per_dollar`. This does **not** require an import.

*   **A single manifest can require multiple formalizations.** **Example 1** shows a problem using both `float` (`0.5`) and `Fraction` (`3/4`). **Example 4** shows a mix of percentages (decomposed into floats) and division (`/`). The model must adapt to each line.

*   **Decomposition is sometimes needed to follow the rules.** This is a critical and advanced point. In **Example 4**, the solution for L1 is `80% * 20 votes = <<80*0.01*20=16>>16 votes`. To satisfy the Direct Substitution Rule for the calculator annotation, this must be decomposed into two variables: `taotd_discard_percent_num = 80` and `percent_factor = 0.01`.

*   **Strict adherence to defining only NEW variables** in each step's `question_inputs` and `WK_inputs` lists. For instance, in **Example 3**, `initial_ducks` is defined in L1 and then simply re-used in the computation for L2 without being listed as an input again.

*   Comments for `question_inputs` must cite the question text only, **NEVER** the solution text. Note how `cents_per_dollar = 100` in **Example 2** is correctly labeled `# WK` because that fact constitutes common-sense World Knowledge and is not present in the question text.

## Example 1

### Input

**Index:**
3847

**Question:**
All people named Barry are nice, while only half of the people named Kevin are nice.  Three-fourths of people named Julie are nice, while 10% of people named Joe are nice.  If a crowd contains 24 people named Barry, 20 people named Kevin, 80 people named Julie, and 50 people named Joe, how many nice people are in the crowd?

**Solution mapping:**
{
  "L1": "If all people named Barry are nice, and the crowd contains 24 people named Barry, then 1*24=<<24*1=24>>24 of these people are nice.",
  "L2": "If only half of people named Kevin are nice, and the crowd contains 20 people named Kevin, then 0.5*20=<<0.5*20=10>>10 of these people are nice.",
  "L3": "If three-fourths of people named Julie are nice, and the crowd contains 80 people named Julie, then (3/4)*80=<<3/4*80=60>>60 of these people are nice.",
  "L4": "If 10% of people named Joe are nice, and the crowd contains 50 people named Joe, then 0.1*50=<<0.1*50=5>>5 of these people are nice.",
  "L5": "In total, the crowd contains 24+10+60+5=<<24+10+60+5=99>>99 people who are nice."
}

### Output

```json
{
  "function_code": "from fractions import Fraction\n\ndef solve():\n    \"\"\"Index: 3847.\n    Returns: the number of nice people in the crowd.\n    \"\"\"\n    # L1\n    num_barry = 24 # 24 people named Barry\n    barry_nice_fraction = 1 # All people named Barry are nice\n    nice_barry = barry_nice_fraction * num_barry\n\n    # L2\n    num_kevin = 20 # 20 people named Kevin\n    kevin_nice_fraction = 0.5 # half of the people named Kevin are nice\n    nice_kevin = kevin_nice_fraction * num_kevin\n\n    # L3\n    num_julie = 80 # 80 people named Julie\n    julie_nice_fraction = Fraction(3, 4) # Three-fourths of people named Julie are nice\n    nice_julie = julie_nice_fraction * num_julie\n\n    # L4\n    num_joe = 50 # 50 people named Joe\n    joe_nice_fraction = 0.1 # 10% of people named Joe are nice\n    nice_joe = joe_nice_fraction * num_joe\n\n    # L5\n    total_nice_people = nice_barry + nice_kevin + nice_julie + nice_joe\n\n    # FA\n    answer = total_nice_people\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["num_barry", "barry_nice_fraction"],
      "WK_inputs": [],
      "output_variable": "nice_barry",
      "solution_line_template": "If all people named Barry are nice, and the crowd contains {num_barry} people named Barry, then {barry_nice_fraction}*{num_barry}=<<{num_barry}*{barry_nice_fraction}={nice_barry}>>{nice_barry} of these people are nice."
    },
    {
      "line_number": "L2",
      "question_inputs": ["num_kevin", "kevin_nice_fraction"],
      "WK_inputs": [],
      "output_variable": "nice_kevin",
      "solution_line_template": "If only half of people named Kevin are nice, and the crowd contains {num_kevin} people named Kevin, then {kevin_nice_fraction}*{num_kevin}=<<{kevin_nice_fraction}*{num_kevin}={nice_kevin}>>{nice_kevin} of these people are nice."
    },
    {
      "line_number": "L3",
      "question_inputs": ["num_julie", "julie_nice_fraction"],
      "WK_inputs": [],
      "output_variable": "nice_julie",
      "solution_line_template": "If three-fourths of people named Julie are nice, and the crowd contains {num_julie} people named Julie, then ({julie_nice_fraction})*{num_julie}=<<{julie_nice_fraction}*{num_julie}={nice_julie}>>{nice_julie} of these people are nice."
    },
    {
      "line_number": "L4",
      "question_inputs": ["num_joe", "joe_nice_fraction"],
      "WK_inputs": [],
      "output_variable": "nice_joe",
      "solution_line_template": "If 10% of people named Joe are nice, and the crowd contains {num_joe} people named Joe, then {joe_nice_fraction}*{num_joe}=<<{joe_nice_fraction}*{num_joe}={nice_joe}>>{nice_joe} of these people are nice."
    },
    {
      "line_number": "L5",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "total_nice_people",
      "solution_line_template": "In total, the crowd contains {nice_barry}+{nice_kevin}+{nice_julie}+{nice_joe}=<<{nice_barry}+{nice_kevin}+{nice_julie}+{nice_joe}={total_nice_people}>>{total_nice_people} people who are nice."
    }
  ]
}
```

## Example 2

### Input

**Index:**
4847

**Question:**
Lucy plans to purchase potato chips for a party. Ten people will be at the party, including Lucy. The potato chips cost 25 cents per pound. How much will Lucy pay (in dollars) for the potato chips if she wants each person to get 1.2 pounds?

**Solution mapping:**
{
  "L1": "Lucy needs to purchase 10 x 1.2 = <<10*1.2=12>>12 pounds of potato chips.",
  "L2": "So, Lucy will pay 12 x 25 = <<12*25=300>>300 cents for it.",
  "L3": "Since there are 100 cents in $1, thus, Lucy will pay 300/100 = <<300/100=3>>3 dollars."
}

### Output

```json
{
  "function_code": "def solve():\n    \"\"\"Index: 4847.\n    Returns: the amount Lucy will pay in dollars.\n    \"\"\"\n    # L1\n    num_people = 10 # Ten people will be at the party\n    chips_per_person = 1.2 # each person to get 1.2 pounds\n    total_pounds = num_people * chips_per_person\n\n    # L2\n    cents_per_pound = 25 # 25 cents per pound\n    total_cents = total_pounds * cents_per_pound\n\n    # L3\n    cents_per_dollar = 100 # WK\n    total_dollars = total_cents / cents_per_dollar\n\n    # FA\n    answer = total_dollars\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["num_people", "chips_per_person"],
      "WK_inputs": [],
      "output_variable": "total_pounds",
      "solution_line_template": "Lucy needs to purchase {num_people} x {chips_per_person} = <<{num_people}*{chips_per_person}={total_pounds}>>{total_pounds} pounds of potato chips."
    },
    {
      "line_number": "L2",
      "question_inputs": ["cents_per_pound"],
      "WK_inputs": [],
      "output_variable": "total_cents",
      "solution_line_template": "So, Lucy will pay {total_pounds} x {cents_per_pound} = <<{total_pounds}*{cents_per_pound}={total_cents}>>{total_cents} cents for it."
    },
    {
      "line_number": "L3",
      "question_inputs": [],
      "WK_inputs": ["cents_per_dollar"],
      "output_variable": "total_dollars",
      "solution_line_template": "Since there are 100 cents in $1, thus, Lucy will pay {total_cents}/{cents_per_dollar} = <<{total_cents}/{cents_per_dollar}={total_dollars}>>{total_dollars} dollars."
    }
  ]
}
```

## Example 3

### Input

**Index:**
5040

**Question:**
There are 320 ducks in a pond.  On the first night 1/4 of them get eaten by a fox.  On the second night 1/6 of the remaining ducks fly away, and on the third night 30 percent are stolen.  How many ducks remain after the three nights?

**Solution mapping:**
{
  "L1": "First night:320(1/4)=80",
  "L2": "320-80=<<320-80=240>>240",
  "L3": "Second night:240(1/6)=40",
  "L4": "240-40=<<240-40=200>>200",
  "L5": "Third night:200(.30)=60",
  "L6": "200-60=<<200-60=140>>140 ducks remain"
}

### Output

```json
{
  "function_code": "from fractions import Fraction\n\ndef solve():\n    \"\"\"Index: 5040.\n    Returns: the number of ducks remaining after three nights.\n    \"\"\"\n    # L1\n    initial_ducks = 320 # 320 ducks in a pond\n    first_night_eaten_fraction = Fraction(1, 4) # 1/4 of them get eaten\n    first_night_eaten = initial_ducks * first_night_eaten_fraction\n\n    # L2\n    ducks_after_night1 = initial_ducks - first_night_eaten\n\n    # L3\n    second_night_flew_fraction = Fraction(1, 6) # 1/6 of the remaining ducks fly away\n    second_night_flew = ducks_after_night1 * second_night_flew_fraction\n\n    # L4\n    ducks_after_night2 = ducks_after_night1 - second_night_flew\n\n    # L5\n    third_night_stolen_percent = 0.30 # 30 percent are stolen\n    third_night_stolen = ducks_after_night2 * third_night_stolen_percent\n\n    # L6\n    ducks_after_night3 = ducks_after_night2 - third_night_stolen\n\n    # FA\n    answer = ducks_after_night3\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["initial_ducks", "first_night_eaten_fraction"],
      "WK_inputs": [],
      "output_variable": "first_night_eaten",
      "solution_line_template": "First night:{initial_ducks}({first_night_eaten_fraction})={first_night_eaten}"
    },
    {
      "line_number": "L2",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "ducks_after_night1",
      "solution_line_template": "{initial_ducks}-{first_night_eaten}=<<{initial_ducks}-{first_night_eaten}={ducks_after_night1}>>{ducks_after_night1}"
    },
    {
      "line_number": "L3",
      "question_inputs": ["second_night_flew_fraction"],
      "WK_inputs": [],
      "output_variable": "second_night_flew",
      "solution_line_template": "Second night:{ducks_after_night1}({second_night_flew_fraction})={second_night_flew}"
    },
    {
      "line_number": "L4",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "ducks_after_night2",
      "solution_line_template": "{ducks_after_night1}-{second_night_flew}=<<{ducks_after_night1}-{second_night_flew}={ducks_after_night2}>>{ducks_after_night2}"
    },
    {
      "line_number": "L5",
      "question_inputs": ["third_night_stolen_percent"],
      "WK_inputs": [],
      "output_variable": "third_night_stolen",
      "solution_line_template": "Third night:{ducks_after_night2}({third_night_stolen_percent})={third_night_stolen}"
    },
    {
      "line_number": "L6",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "ducks_after_night3",
      "solution_line_template": "{ducks_after_night2}-{third_night_stolen}=<<{ducks_after_night2}-{third_night_stolen}={ducks_after_night3}>>{ducks_after_night3} ducks remain"
    }
  ]
}
```

## Example 4

### Input

**Index:**
7037

**Question:**
At a book burning, Fran counts 20 votes for The Art of the Deal, 12 votes for Twilight, and 10 votes for Game of Thrones.  She decides to alter the results by throwing away 80% of the votes for The Art of the Deal and half the votes for Twilight. What percentage of the altered votes are for Game of Thrones?

**Solution mapping:**
{
  "L1": "First find the total number of The Art of the Deal votes Fran throws away: 80% * 20 votes = <<80*0.01*20=16>>16 votes",
  "L2": "Then subtract these votes from the total number of The Art of the Deal votes to find the altered number: 20 votes - 16 votes = <<20-16=4>>4 votes",
  "L3": "Then divide the total number Twilight votes by 2 to find the altered number of votes: 12 votes / 2 = <<12/2=6>>6 votes",
  "L4": "Then add the altered number of votes for each book to find the total altered number of votes: 6 votes + 4 votes + 10 votes = <<6+4+10=20>>20 votes",
  "L5": "Then divide the number of votes for Game of Thrones by the total altered number of votes and multiply by 100% to express the answer as a percentage: 10 votes / 20 votes * 100% = 50%"
}

### Output

```json
{
  "function_code": "def solve():\n    \"\"\"Index: 7037.\n    Returns: the percentage of altered votes for Game of Thrones.\n    \"\"\"\n    # L1\n    taotd_initial_votes = 20 # 20 votes for The Art of the Deal\n    taotd_discard_percent_num = 80 # throws away 80% of the votes\n    percent_factor = 0.01 # WK\n    taotd_discarded_votes = taotd_discard_percent_num * percent_factor * taotd_initial_votes\n\n    # L2\n    taotd_altered_votes = taotd_initial_votes - taotd_discarded_votes\n\n    # L3\n    twilight_initial_votes = 12 # 12 votes for Twilight\n    twilight_discard_divisor = 2 # half the votes for Twilight\n    twilight_altered_votes = twilight_initial_votes / twilight_discard_divisor\n\n    # L4\n    got_initial_votes = 10 # 10 votes for Game of Thrones\n    total_altered_votes = twilight_altered_votes + taotd_altered_votes + got_initial_votes\n\n    # L5\n    percent_multiplier = 100 # WK\n    got_percentage = got_initial_votes / total_altered_votes * percent_multiplier\n\n    # FA\n    answer = got_percentage\n    return answer",
  "logical_steps": [
    {
      "line_number": "L1",
      "question_inputs": ["taotd_discard_percent_num", "taotd_initial_votes"],
      "WK_inputs": ["percent_factor"],
      "output_variable": "taotd_discarded_votes",
      "solution_line_template": "First find the total number of The Art of the Deal votes Fran throws away: 80% * {taotd_initial_votes} votes = <<{taotd_discard_percent_num}*{percent_factor}*{taotd_initial_votes}={taotd_discarded_votes}>>{taotd_discarded_votes} votes"
    },
    {
      "line_number": "L2",
      "question_inputs": [],
      "WK_inputs": [],
      "output_variable": "taotd_altered_votes",
      "solution_line_template": "Then subtract these votes from the total number of The Art of the Deal votes to find the altered number: {taotd_initial_votes} - {taotd_discarded_votes} votes = <<{taotd_initial_votes}-{taotd_discarded_votes}={taotd_altered_votes}>>{taotd_altered_votes} votes"
    },
    {
      "line_number": "L3",
      "question_inputs": ["twilight_initial_votes", "twilight_discard_divisor"],
      "WK_inputs": [],
      "output_variable": "twilight_altered_votes",
      "solution_line_template": "Then divide the total number Twilight votes by {twilight_discard_divisor} to find the altered number of votes: {twilight_initial_votes} votes / {twilight_discard_divisor} = <<{twilight_initial_votes}/{twilight_discard_divisor}={twilight_altered_votes}>>{twilight_altered_votes} votes"
    },
    {
      "line_number": "L4",
      "question_inputs": ["got_initial_votes"],
      "WK_inputs": [],
      "output_variable": "total_altered_votes",
      "solution_line_template": "Then add the altered number of votes for each book to find the total altered number of votes: {twilight_altered_votes} votes + {taotd_altered_votes} votes + {got_initial_votes} votes = <<{twilight_altered_votes}+{taotd_altered_votes}+{got_initial_votes}={total_altered_votes}>>{total_altered_votes} votes"
    },
    {
      "line_number": "L5",
      "question_inputs": [],
      "WK_inputs": ["percent_multiplier"],
      "output_variable": "got_percentage",
      "solution_line_template": "Then divide the number of votes for Game of Thrones by the total altered number of votes and multiply by {percent_multiplier}% to express the answer as a percentage: {got_initial_votes} votes / {total_altered_votes} votes * {percent_multiplier}% = {got_percentage}%"
    }
  ]
}
```