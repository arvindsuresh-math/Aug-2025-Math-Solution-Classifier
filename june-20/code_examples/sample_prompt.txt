### Guidelines

0. **Output wrapping**
   Return the code inside a single ```python â€¦ ``` block, and nothing else.

1.  **Function Naming & Docstring:** The function must be named `solve`. It must begin with a docstring that has exactly two lines:
    *   The first line must be: "Index: [Index]." using the index from the task header.
    *   The second line must be a succinct, one-sentence description of what the function returns (e.g., "Returns: the total cost of wages and taxes.").

2.  **Function Arguments:** The function arguments must be derived from the 'Question' text. 
    *   Create a distinct argument for every numerical value that is directly stated in the text.
    *   The arguments should be created **in the same order in which they appear in the question**.
    *   **Note:** Some of these arguments may end up not being used in the function body. This is expected. Do not worry about this and leave the unused arguments in the function signature.

3.  **Argument Formatting:** Each argument must include a type-hint (e.g., `int`, `float`) and a default value equal to its value in the 'Question'. You must also add a comment (`#`) next to each argument that quotes or refers to the phrase in the 'Question' it comes from. 

4.  **Function Body:** The body of the function should follow the logic of the provided 'Solution' dict, which contains the step-by-step solution to the problem. The keys of this dict are strings (e.g. `"L1"`, `"L2"`) which refer to the line number, and the values of the dict are the corresponding steps in the solution. 
    * For every relevant line in the 'Solution', you must include a comment in the Python code that indicates the line number (key) from the 'Solution' dict.
    * These comments should be formatted as `#: L<n>`, where `<n>` is the line number from the 'Solution' dict.
    * Immediately follow the comment with the Python statement that performs the calculation.

5.  **Calculator Annotations:** Pay close attention to the calculator annotations (e.g., `[[25*8=200]]`) in the 'Solution' as they reveal the precise mathematical operations to implement. **Note**: Some lines in the solution may not contain calculator annotations, but you should still pay attention to the logic and calculations described in those lines.

6.  **Final Answer:** Store the final answer in a variable named 'answer', and on the same line, add the comment `# FINAL ANSWER`. In the next line, return the 'answer' variable.

7. **No extra output:** Your output should end with the ``` closing the code block. Do not include any additional text, explanations, or comments outside of the code block.

--- EXAMPLES ---

*Index*: 
310

*Question*: 
Janet hires six employees. Four of them are warehouse workers who make $15/hour, and the other two are managers who make $20/hour. Janet has to pay 10% of her workers' salaries in FICA taxes. If everyone works 25 days a month and 8 hours a day, how much does Janet owe total for their wages and taxes for one month?

*Solution*: 
{'L1': 'First figure out how many hours each worker works per month by multiplying the number of days they work by the number of hours a day they work: 25 days * 8 hours/day = [[25*8=200]]200 hours', 'L2': 'Then calculate how much one warehouse worker makes per month by multiplying their hourly rate by the number of hours they work: 200 hours * $15/hour = $[[200*15=3000]]3000', 'L3': 'Then multiply that number by 4 to find out how much all the warehouse workers make: $3000/worker * 4 workers = $[[3000*4=12000]]12,000', 'L4': 'Now multiply the hours each manager works (also 200) by their hourly wage to find out how much one manager makes per month: 200 hours * $20/hour = $[[200*20=4000]]4,000', 'L5': "Now multiply one manager's wages by the number of managers (2) to find their total wage amount: $4,000/manager * 2 managers = $[[4000*2=8000]]8,000", 'L6': 'Now add the wages for the managers and the workers to find the total cost of the wages: $8,000 + $12,000 = $[[8000+12000=20000]]20,000', 'L7': 'Now multiply the total wage bill by 10% to find how much the FICA taxes are: $20,000 * .1 = $[[20000*.1=2000]]2,000', 'L8': 'Now add the total wage bill to the total tax amount to find the grand total: $2,000 + $20,000 = $[[2000+20000=22000]]22,000'}

*Code*:
```python
def solve(
        num_employees: int = 6, # Janet hires six employees
        num_warehouse_workers: int = 4, # Four of them are warehouse workers
        num_managers: int = 2, # the other two are managers
        hourly_wage_warehouse: int = 15, # warehouse workers make $15/hour
        hourly_wage_manager: int = 20, # managers make $20/hour
        fica_tax_rate: float = 0.1, # FICA tax rate is 10%
        days_per_month: int = 25, # everyone works 25 days a month
        hours_per_day: int = 8 # everyone works 8 hours a day
    ):
    """Index: 310.
    Returns: the monthly total wage bill, including FICA taxes.
    """
    #: L1
    hours_per_month = days_per_month * hours_per_day

    #: L2
    monthly_wage_warehouse = hourly_wage_warehouse * hours_per_month

    #: L3
    total_wage_warehouse = monthly_wage_warehouse * num_warehouse_workers

    #: L4
    monthly_wage_manager = hourly_wage_manager * hours_per_month

    #: L5
    total_wage_manager = monthly_wage_manager * num_managers

    #: L6
    total_wages = total_wage_warehouse + total_wage_manager

    #: L7
    fica_taxes = total_wages * fica_tax_rate

    #: L8
    grand_total = total_wages + fica_taxes

    answer = grand_total # FINAL ANSWER
    return answer
```

*Index*: 
3822

*Question*: 
Alec is running for Class President. He thinks that if he can get three-quarters of the class to vote for him then there is no chance anyone else can beat him. Half of the class have already said they will vote for him but out of the remaining students, only 5 have said they are thinking about voting for him. He surveys the students who are thinking about voting for someone else, and changes his flyers to reflect the issues these students are concerned about. This results in a fifth of these students saying they'll vote for him. If Alec's class has 60 students and everyone who said they will vote for him does so, how many more votes does Alec need to reach his goal number of votes?

*Solution*: 
{'L1': "To calculate Alec's goal number of votes, we need to know that 60 students / 4 = [[60/4=15]]15 students is equal to one-quarter of the class students.", 'L2': "Alec's goal is therefore 15 students * 3 quarters = [[15*3=45]]45 votes.", 'L3': 'Half of the class said they will vote for him, so there are already 60 students / 2 = [[60/2=30]]30 votes.', 'L4': 'Another 5 students are thinking about voting for him which leaves a total so far of 30 + 5 = [[30+5=35]]35 votes.', 'L5': 'This means there are 60 students - 35 voting for Alec = [[60-35=25]]25 students not voting for Alec.', 'L6': 'A fifth of these decided to vote, so this is a further 25 students / 5 = [[25/5=5]]5 votes.', 'L7': 'Alec is therefore receiving a total of 35 + 5 = [[35+5=40]]40 votes.', 'L8': 'So he has missed his goal by 45 goal votes - 40 actual votes = [[45-40=5]]5 votes.'}

*Code*:

```python
def solve(
        fraction_needed_to_win: float = 3/4,  # f he can get three-quarters of the class to vote for him then there is no chance anyone else can beat him.
        fraction_voting_for_him: float = 1/2,  # Half of the class have already said they will vote for him
        students_thinking_about_it: int = 5,  # only 5 have said they are thinking about voting for him
        total_students: int = 60  # Alec's class has 60 students
):    
    """Index: 3822.
    Returns: the number of votes by which Alec is short of his goal.
    """
    #: L1
    students_per_quarter = total_students / 4

    #: L2
    votes_needed = students_per_quarter * 3

    #: L3
    votes_for_him = total_students * fraction_voting_for_him

    #: L4
    votes_so_far = votes_for_him + students_thinking_about_it

    #: L5
    students_not_voting_for_him = total_students - votes_so_far
    
    #: L6
    new_votes = students_not_voting_for_him / 5

    #: L7
    total_votes_for_him = votes_so_far + new_votes

    #: L8
    votes_short_of_goal = votes_needed - total_votes_for_him

    answer = votes_short_of_goal  # FINAL ANSWER
    return answer
```

*Index*: 
7371

*Question*: 
Karen's students are about to take a standardized test. Karen gets a $500 bonus if their average score is above 75, plus an extra $10 bonus for every additional point the average score increases above 75. So far, Karen has graded 8 tests, and the average is 70. Given that each student can have a maximum score of 150, what combined score do the last two tests need to have for Karen to earn a $600 bonus?

*Solution*: 
{'L1': "First subtract $500 from Karen's goal bonus amount to find how much she makes from the extra $10/point bonus: $600 - $500 = $[[600-500=100]]100", 'L2': 'Then divide the extra bonus by the extra rate: $100 / $10/point = [[100/10=10]]10 points', 'L3': "Then add the 10 extra points to the baseline 75 point goal to find the students' average test score: 10 points + 75 points = [[10+75=85]]85 points", 'L4': 'Then added the 8 graded tests to the 2 ungraded tests to find the total number of tests: 2 tests + 8 tests = [[2+8=10]]10 tests', 'L5': 'Then multiply the 85 point average by the number of tests to find the total number of points the students need to earn: 85 points/test * 10 tests = 850 points', 'L6': 'Then multiply the current average by the current number of graded tests to find how many points have been earned so far: 70 points/test * 8 tests = [[70*8=560]]560 points', 'L7': 'Then subtract the number of points earned from the number of points needed to find the combine score the last two tests need: 850 points - 560 points = [[850-560=290]]290 points'}

*Code*:
```python
def solve(
    baseline_bonus: int = 500, # Karen gets a $500 bonus
    baseline_avg_score: int = 75, # if their average score is above 75
    extra_bonus_per_point: int = 10, # plus an extra $10 bonus for every additional point the average score increases above 75
    tests_graded_so_far: int = 8, # So far, Karen has graded 8 tests
    avg_so_far: int = 70, # and the average is 70
    max_score_per_student: int = 150, # each student can have a maximum score of 150
    desired_bonus: int = 600 # Karen wants to earn a $600 bonus
):
    """Index: 7371.
    Returns: the combined score needed in the last two tests to ensure that Karen earns a $600 bonus."""
    #: L1
    extra_bonus_needed = desired_bonus - baseline_bonus

    #: L2
    extra_points_needed = extra_bonus_needed / extra_bonus_per_point

    #: L3
    target_avg_score = baseline_avg_score + extra_points_needed

    #: L4
    total_tests = tests_graded_so_far + 2

    #: L5
    total_points_needed = target_avg_score * total_tests

    #: L6
    points_earned_so_far = avg_so_far * tests_graded_so_far

    #: L7
    points_needed_last_two_tests = total_points_needed - points_earned_so_far

    answer = points_needed_last_two_tests  # FINAL ANSWER
    return answer
```

--- TASK ---

*Index*: 
6237

*Question*: 
Brendan makes $6/hour as a waiter. He's scheduled for 2 8-hour shifts and 1 12-hour shift this week. He also makes an average of $12 in tips each hour. Brendan is supposed to pay 20% of his income in taxes, but he only reports 1/3rd of his tips to the IRS. How much money does Brendan pay in taxes each week?

*Solution*: 
{'L1': 'First find the total number of hours Brendan works for the 8-hour shifts: 2 shifts * 8 hours/shift = [[2*8=16]]16 hours', 'L2': 'Then find the total number of hours Brendan works by adding those hours to the 12-hour shift: 16 hours + 12 hours = [[16+12=28]]28 hours', 'L3': "Now find Brendan's total wage earnings by multiplying his $6/hour wage by the number of hours he works: $6/hour * 28 hours = $[[6*28=168]]168/week", 'L4': 'Now figure out how much Brendan makes in tips by multiplying the number of hours he works by the amount of tips he makes per hour: $12/hour * 28 hours/week = $[[12*28=336]]336/week', 'L5': 'Now divide that number by 3, since Brendan only reports a third of his tips: $336/week / 3 = $[[336/3=112]]112/week', 'L6': "Now add Brendan's wage earnings to that number to find how much income he reports to the IRS each week: $168/week + $112/week = $[[168+112=280]]280/week", 'L7': "Finally, multiply Brendan's reported income by his tax rate to find how much he pays in taxes each week: $280/week * .2 = $[[280*.2=56]]56/week"}

*Code*:
